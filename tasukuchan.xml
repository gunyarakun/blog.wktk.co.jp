<?xml version="1.0" encoding="UTF-8"?>
<diary>
<day date="2005-08-30" title="はてな処女（ヴァー人）">
<body>
*1125396949*[技術メモ][Perl] DBD::Google
[http://search.cpan.org/~darren/DBD-Google-0.11/]
&gt;&gt;
&gt; ppm install dbd-google
&lt;&lt;
…無いんだって。
&gt;&gt;
&gt; perl -MCPAN -e shell
cpan&gt; install DBD::Google
The module DBD::Google isn't available on CPAN.
&lt;&lt;
だってさ。
&gt;&gt;
cpan&gt; i DBD::Google
Strange distribution name [DBD::Google]
Module id = DBD::Google
    DESCRIPTION  Treat Google as a DBI datasource
    CPAN_USERID  DARREN (Darren Chamberlain &lt;darren@cpan.org&gt;)
    CPAN_VERSION undef
    CPAN_FILE    Contact Author Darren Chamberlain &lt;darren@cpan.org&gt;
    DSLI_STATUS  bdpO (beta,developer,perl,object-oriented)
    INST_FILE    (not installed)
&lt;&lt;
もひゃ。
えっと、普通に取ってこよう。
…
解凍して、perl Makefile.PLして、nmake testっと。
…
Net/Google.pmね。
&gt;&gt;
&gt; ppm install net-google
&lt;&lt;
…やっぱりGoogle関係のモジュールは利用許諾関係でないのかしら。
で、
&gt;&gt;
cpan&gt; install Net::Google
&lt;&lt;
spellingでtest1つだけ通らなかった。
&gt;&gt;
cpan&gt; force install Net::Google
&lt;&lt;
で強引にねじこんで。
んが・・・
&gt;&gt;
&gt; nmake test
&lt;&lt;
SQL::Parserがないって。
&gt;&gt;
cpan&gt; install SQL::Parser
&gt; nmake test
&lt;&lt;
お見事。

&lt;strong&gt;結論：SQL::Parserへの依存関係を書いてないDBD::Googleが悪い。&lt;/strong&gt;

*1125396950*[一般] はてなにやってきた。
hatenaにも出張所を設けてみた。
うーん、hatenaのほうが使いやすそうだなあ。
ここに居座っちゃおうかしら。
</body>
</day>
<day date="2005-08-31" title="パーラー">
<body>
*1125457636*[技術メモ][Perl] Net::Googleのバグ

Net::Google中のtool.pm、
sub http_proxyの中の
&gt;&gt;
    shift-&gt;{'_service'}-&gt;transport()-&gt;proxy($uri)-&gt;proxy(http=&gt;$uri);
&lt;&lt;
は、
&gt;&gt;
    $self-&gt;{'_service'}-&gt;transport()-&gt;proxy($uri)-&gt;proxy(http=&gt;$uri);
&lt;&lt;
だと思う。

*1125467999*[仕事][Perl]Perl本大量購入
2005/8/1に就職して、
Visual C++,Java,PHP,Perlと書いてきた。
短期間にしてはいろんな言語で書きすぎたと反省している。
してないけど。

今後はPerlの仕事が続くので、
Perlをまじめにやろうと思う。
今までラクダ本すら読んだことなかったからね。

Webの情報を用いて勉強すればいいじゃない、とも思った。
Googleで「Perl」で検索した結果を見る。
古いバージョンのPerlを用いた文書や、
CPANモジュールを追加しない状況
(いわゆるどっかのレンタルサーバでCGIとして使うような状況）
での使い方の文書が多くて、
はっきり言って有害な情報が多い気がする。
Perlの風評被害って、有害な情報に辟易とした人によるものではないかしら。

僕としては、
漏れがない文法解説・CPANの主要モジュールリファレンス・コード集・
パフォーマンス向上・メンテナンス性/可読性向上
の５つについて情報が欲しいんだな。

初めてのPerlはいいとして…
ということで、以下の9冊の購入申請。
多すぎかしら。

-続・初めてのPerl - Perlオブジェクト、リファレンス、モジュール
-プログラミングPerl〈VOLUME1〉
-プログラミングPerl〈VOLUME2〉
-Perlクックブック〈VOLUME1〉
-Perlクックブック〈VOLUME2〉
-入門Perl DBI
-実用Perlプログラミング
-Perl Best Practices
-Effective Perl    ASCII Addison Wesley Programming Series
</body>
</day>
<day date="2005-09-02" title="さらばFreeBSD、こんにちはLinux（すくなくともSenna+mysqlに関して">
<body>
*1125649608*[技術メモ] Senna + mysql-4.1.14 on FreeBSD5 インストールメモ（失敗中）

&gt;&gt;
# portinstall textproc/senna
&lt;&lt;
にゃんかmecab-razilとかipadicとかも一緒に入れてくれる。
てへ。楽じゃ～ん。

/usr/local/etc/pkgtools.confのMAKE_ARGSに
&gt;&gt;
'databases/mysql41-server' =&gt; 'WITH_CHARSET=ujis WITH_XCHARSET=utf8 WITH_LINUXTHREADS=yes WITH_PROC_SCOPE_PTH=yes BUILD_OPTIMIZED=yes BUILD_STATIC=yes',
&lt;&lt;
を追加。

mysql-4.1.11.senna.diffを
&gt;&gt;
「--- mysql-4.1.11/」-&gt;「--- 」
「+++ mysql-4.1.11.senna/」-&gt;「+++ 」
「&lt;senna/senna.h&gt;」-&gt;「&lt;senna.h&gt;」
「AC_CHECK_LIB(mecab, 」-&gt;「AC_CHECK_LIB(mecab-razil, 」
&lt;&lt;
と置換。
で、/usr/ports/databases/mysql41-server/files/patch-mysql-senna.diff
として置いてみる。

/usr/ports/databases/mysql41-server/Makefile中の
.include &lt;bsd.port.pre.mk&gt;
のあとに、
&gt;&gt;
CFLAGS+=-I/usr/local/include/senna
&lt;&lt;
を追加。
で、multithread関係のリンクオプションのところに
&gt;&gt;
 -L/usr/local/lib -lsenna -lmecab-razil
&lt;&lt;
を追加。
本当はちゃんとリンカオプションを書く場所があるんだろうけど・・・
LD_LIBRARYかしら。
portsの作り方はよくわからん。

んで
&gt;&gt;
# portinstall databases/mysql41-server
&lt;&lt;
うん。通った。

/etc/rc.confに
&gt;&gt;
mysql_enable=&quot;YES&quot;
&lt;&lt;
を追記して、
&gt;&gt;
# /usr/local/etc/rc.d/mysql-server.sh start
# /usr/local/etc/rc.d/mysql-server.sh status
&lt;&lt;
あり、いねえぞ。
&gt;&gt;
# ps aux | grep mysqld
&lt;&lt;
いない・・・
&gt;&gt;
# tail /var/log/messages
&lt;&lt;
おお、core吐いて死んでいらっしゃる・・・南無。

デバッガで追いかけるヒマがないので、
やる気がなくなった。
DBサーバはFreeBSDやめよう。
Web,AppサーバはFreeBSDにするけど。

で、mysqlの副社長がちょうどお見えになっていたので、
どのプラットフォームがいいのか？
Linux? FreeBSD? Intel Solaris?
っていう質問をしてみた。
一般的にはLinuxだということです。
AMD64の乗ったLinuxがパフォーマンスがいいとも言っていた。
まあ、そりゃそうか。

DebianはsargeのAMD64対応版は正式リリースされてないし、
赤帽高いし、
MiracleはOracle入れるわけでもないし、
Turboは・・・Turboは・・・なんか積極的に選ぶ気にならんし・・・
といろいろ悩んだあげく、
SUSEの9.3 Professionalにすることにした。
Enterpriseは、Professionalがよければ考える。
日本語の情報が少ないところが問題やね。

というわけで、今SUSEをテスト環境にしこしこインストール中。
実環境のハードウェア見積もりまだかしら。

ちなみに、mysqlの副社長に
「日本語のfulltext searchはいつ実装するんじゃ」
って聞いたら
「tokenizerが難しくてさ・・・」
とmysqlのドキュメントと同じ言い訳をしていた。
でも5.1には実装される・・・らしい・・・
</body>
<comments>
<comment>
<username>Camden</username>
<body>a5b4e889651300d6ab537a63148ecd38&lt;br&gt;&lt;a href=”http://ragazza-18-anno-vogliosa.inikatafurqadi.info/”&gt; ragazza-18-anno-vogliosa.inikatafurqadi.info &lt;/a&gt; http://ragazzo-almenno-san-bartolomeo.suzuciasapati.info/ &lt;a href=”http://prestito-endine-gaiano.gurutafedaru.info/”&gt; prestito-endine-gaiano.gurutafedaru.info &lt;/a&gt; &lt;br&gt;&lt;a href=”http://ragazza-villa-d-alme.serobomanasagu.info/”&gt; ragazza-villa-d-alme.serobomanasagu.info &lt;/a&gt; http://compra-usato.inikatafurqadi.info/ &lt;a href=”http://15-anni.teramosapotemi.info/”&gt; 15-anni.teramosapotemi.info &lt;/a&gt; &lt;br&gt;&lt;a href=”http://ragazzo-bosco-chiesanuova.teramosapotemi.info/”&gt; ragazzo-bosco-chiesanuova.teramosapotemi.info &lt;/a&gt; http://i-sistema-inerziali.sebratosubar.info/ &lt;a href=”http://leggi-finanziamento-impresa-sociali.suzuciasapati.info/”&gt; leggi-finanziamento-impresa-sociali.suzuciasapati.info &lt;/a&gt; &lt;br&gt;&lt;a href=”http://assicurazione-faeto.gurutafedaru.info/”&gt; assicurazione-faeto.gurutafedaru.info &lt;/a&gt; http://lesioni-tendinee.sebratosubar.info/ &lt;a href=”http://sconti-offerta-computer-software.gurutafedaru.info/”&gt; sconti-offerta-computer-software.gurutafedaru.info &lt;/a&gt; &lt;br&gt;&lt;a href=”http://club-utente-macintosh-powerbook.teramosapotemi.info/”&gt; club-utente-macintosh-powerbook.teramosapotemi.info &lt;/a&gt; http://ristorante-carpi.sebratosubar.info/ &lt;a href=”http://biliardo-tavolo.inikatafurqadi.info/”&gt; biliardo-tavolo.inikatafurqadi.info &lt;/a&gt; &lt;br&gt;&lt;a href=”http://testo-canzone-can-fly-tre-metro-sopra-cielo.inikatafurqadi.info/”&gt; testo-canzone-can-fly-tre-metro-sopra-cielo.inikatafurqadi.info &lt;/a&gt; http://laica-bilancia.inikatafurqadi.info/ &lt;a href=”http://generatore-accordo-chitarra.serobomanasagu.info/”&gt; generatore-accordo-chitarra.serobomanasagu.info &lt;/a&gt; &lt;br&gt;&lt;a href=”http://naturino-sapori-di-mare.gurutafedaru.info/”&gt; naturino-sapori-di-mare.gurutafedaru.info &lt;/a&gt; http://week-end-a-varallo.serobomanasagu.info/ &lt;a href=”http://vincere-lotto.suzuciasapati.info/”&gt; vincere-lotto.suzuciasapati.info &lt;/a&gt; &lt;br&gt;&lt;a href=”http://camera-masserano.gurutafedaru.info/”&gt; camera-masserano.gurutafedaru.info &lt;/a&gt; http://manuela-arcuri-e-aldo-montano.inikatafurqadi.info/ &lt;a href=”http://ventaglio-agenzia-viaggio.suzuciasapati.info/”&gt; ventaglio-agenzia-viaggio.suzuciasapati.info &lt;/a&gt; &lt;br&gt;4a2b72bc154782528b5f2b270b628e88</body>
<timestamp>1169781118</timestamp>
</comment>
</comments>
</day>
<day date="2005-09-05" title="SUSE食いねぇ！">
<body>
*1125974085*[技術メモ]senna(20050905)+MySQL 4.1.14
SUSE Linux Professional 9.3を導入。
で、senna+MySQL 4.1.14を導入。

MySQLのライブラリをすべてスタティックリンクにしようとしたら、
libgcc_sのスタティックリンクが出来ねえ！といわれたので、
さくっとダイナミックリンクに。

コンパイルオプションは
&gt;&gt;
 CFLAGS=&quot;-O3 -mcpu=pentiumpro&quot; CXX=gcc CXXFLAGS=&quot;-O3 -mcpu=pentiumpro \
 -felide-constructors -fno-exceptions -fno-rtti&quot; ./configure \
 --prefix=/usr/local/mysql --enable-assembler \
 --with-named-curses-libs=/lib/libncurses.so.5.4 \
 --with-charset=ujis
&lt;&lt;

で、ホントは

&gt;&gt;
 --with-mysqld-ldflags=-all-static
&lt;&lt;
を入れたかったなあ。というところ。

</body>
</day>
<day date="2005-09-06" title="POEとDBI">
<body>
*1125984969*[技術メモ][Perl]POEでDBI
ん・・・どれがいいんだろ・・・

-POE::Component::DBIAgent 
--POE Component for running asynchronous DBI calls. 
--POE-Component-DBIAgent-0.21 - 02 Dec 2003 - Rob Bloodgood 

-POE::Component::EasyDBI 
--Perl extension for asynchronous non-blocking DBI calls in POE 
--POE-Component-EasyDBI-1.04 - 13 Aug 2005 - David Davis 

-POE::Component::LaDBI 
--POE Component that spawns a perl subprocess to handle non-blocking access to the DBI API. 
--POE-Component-LaDBI-1.2.1 - 18 Jul 2004 - Sean Egan 

-POE::Component::SimpleDBI 
--Asynchronous non-blocking DBI calls in POE made simple 
--POE-Component-SimpleDBI-1.12 - 20 May 2005 - Apocalypse 

んんん・・・更新日が新しいのから選ぶか。
POE::Component::EasyDBIは星４つ。
POE::Component::SimpleDBIは星５つ。
この２つ、ちゃんと評価するか・・・

*1126010072*[技術メモ][Perl]結局POE::Component::EasyDBIに
POE::Component::EasyDBIを採用することにした。
SimpleDBIからforkしたもののようです。

とりあえず、非同期でクエリーばんばん投げて
知らん振りできそうな様子。

で、僕はPOEの理解が超いいかげんなので、
変数のスコープとか同期とかがよく分かっていないのです。

他のPOEを用いたモジュールから呼び出すときに、
並列でspawnしてPOE::Kernel-&gt;run()しておけばよいのかしら。
まずはPOEのオベンキョせんとな。
Perl始めてまだ３週間目だし～

*1126010073*[技術メモ][Perl]POEの日本語での解説はPerlクックブックにある、が
以前頼んでおいたPerl本9冊が届いた。うち8冊はオライリー。
オライリー岡田。ギルガ～メッシュ★

で、POEの日本語での解説はPerlクックブック第２版 Volume2 p.878にある。
が、３ページほどしかない。

http://poe.perl.org/を見るか、
perldocを読むかしないといけないようだ。めんど～い。
&lt;A href=&quot;http://fleur.hio.jp/perldoc/mix/lib/POE/Kernel.html&quot;&gt;POE::Kernel - Perlによるイベント駆動スレッドアプリケーション&lt;/A&gt;でも読むかね。

*1126016279*[技術メモ][Perl]DBD::Perl、SUSEのパッケージでハマる？
&gt;&gt;
DBD::mysql::st execute failed: Illegal mix of collations (ujis_bin,IMPLICIT) and (latin1_swedish_ci,COERCIBLE) for operation '=' at /usr/lib/perl5/site_perl/5.8.6/POE/Component/EasyDBI/SubProcess.pm line 593.
&lt;&lt;
こんなん出る。
my.cnfにdefault-charsetみたいなのを入れてもダメみたいなので、
YaSTで入れたDBD::mysqlを抜いてCPANのを入れようとする。
もエラー。

解決方法は
&lt;A href=&quot;http://y-kit.jp/saba/xp/cpan.htm&quot;&gt;自宅サーバで行こう&lt;/A&gt;
の
&gt;&gt;
よくあるエラー、
　Can't exec &quot;mysql_config&quot;: No such file or directory at Makefile.PL line 174.
　readline() on closed filehandle PIPE at Makefile.PL line 176.
これは、この辺 を参考に、mysql_config にシンボリックリンクを張って解決できます。
　ln -s /usr/local/mysql/bin/mysql_config /usr/local/bin/mysql_config
という感じです。
そして次に出てきたエラーは、
　Note (probably harmless): No library found for -lmysqlclient
これは解決に手間取りました。この辺 が参考になります。
まず、先ほどの「mysql_config」を使い、
　/usr/local/mysql/bin/mysql_config --libs
で、吐き出されたデータをメモ。次に、
　/usr/local/mysql/bin/mysql_config --cflags
で、吐き出されたデータをメモします。
CPANでインストール途中だったソースのあるディレクトリに移動します。
　cd /root/.cpan/build/DBD-mysql-2.9003/
メモしたパスをつなげて、
　perl Makefile.PL --cflags=-I/usr/local/mysql/include/mysql &quot;--libs=-L/usr/local/mysql/lib/mysql -lmysqlclient -lz -lcrypt -lnsl -lm&quot;
とタイプします。（一行で。）
「Makefile」ファイルが正常に生成されたらOKです。後は、
　make
　make test
　make install
で、残りのインストールを完了します。（2004年03月19日）
&lt;&lt;
で。
root@localhostにパスワードつけてるとmake testを通らない。
でも、パスワード取っても(update mysql.user set password='')、
何個かテスト通らなかった。

結局force install。
で、ちゃんと上記のエラー（ujisとswedishでウシシ）はでなくなったとさ。

*1126018791*[技術メモ][検索]MySQL 5系に上げたくなる
スキーマをきちんと正規化して、かつ、非同期でいろいろ投げていると
VIEWとストアドが欲しくなる今日このごろ。
でもSenna先生が…
MySQL 5系にパッチ当てるか・・・

でも、5系ってデータベースエンジンから派生してごにゃごにゃできる、
ってsennaのMLに書いてあったような。

で、とりあえずpatchコマンドやってみた。
&gt;&gt;
patching file configure.in
Hunk #1 succeeded at 744 with fuzz 2 (offset -29 lines).
patching file include/myisam.h
Hunk #1 succeeded at 33 with fuzz 1.
Hunk #2 succeeded at 213 (offset 70 lines).
patching file libmysqld/sql_db.cc
Hunk #1 succeeded at 802 with fuzz 2 (offset 61 lines).
patching file myisam/ft_boolean_search.c
Hunk #2 succeeded at 161 (offset 2 lines).
Hunk #3 succeeded at 323 (offset 13 lines).
Hunk #4 succeeded at 398 (offset 13 lines).
Hunk #5 succeeded at 652 (offset 29 lines).
Hunk #6 succeeded at 686 (offset 29 lines).
Hunk #7 succeeded at 736 (offset 29 lines).
Hunk #8 succeeded at 809 (offset 29 lines).
patching file myisam/ft_nlq_search.c
patching file myisam/ft_update.c
Hunk #1 succeeded at 115 (offset -2 lines).
Hunk #2 succeeded at 181 (offset -2 lines).
Hunk #3 succeeded at 246 (offset -2 lines).
Hunk #4 succeeded at 291 (offset -2 lines).
Hunk #5 succeeded at 300 (offset -2 lines).
Hunk #6 succeeded at 323 (offset -2 lines).
patching file myisam/ftdefs.h
patching file myisam/mi_check.c
Hunk #1 succeeded at 1892 (offset 2 lines).
Hunk #2 succeeded at 2691 (offset 2 lines).
patching file myisam/mi_close.c
patching file myisam/mi_delete_table.c
patching file myisam/mi_open.c
Hunk #1 succeeded at 346 (offset 9 lines).
patching file myisam/mi_rename.c
patching file sql/mysqld.cc
Hunk #1 succeeded at 2612 (offset 117 lines).
patching file sql/sql_db.cc
Hunk #1 succeeded at 802 with fuzz 2 (offset 61 lines).
&lt;&lt;
んんん・・・まあ当たってるなあ。
明日でdiffとってみよう。今日はもう疲れた！
</body>
</day>
<day date="2005-09-07" title="すんなりいきすぎ">
<body>
*1126058954*[技術メモ][検索]MySQL 5.0.12-beta + senna(20050906) on SUSE Linux 9.3 Pro.
試しにコンパイルしてみたらあっさり通った。
起動も検索もうまくいっているようだ。
こっちに乗り換えよっと。
僕はチャレンジャーなのです！
チャレンジャーで難易度を最低にすると、実は難しくなるのです！
</body>
<comments>
<comment>
<username>hsiomaneki</username>
<body>mysql+sennaパッチはすんなり当たりましたか？&lt;br&gt;もしよろしければパッチをsenna-dev ML辺りで公開して頂けると嬉しいです。&lt;br&gt;MySQL5系はストレージエンジンを動的に登録できる仕組みがあるので、&lt;br&gt;MySQL自身のソースコードに手を入れなくて済むようになるのではないかと期待しています。</body>
<timestamp>1126755919</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>&gt;hsiomanekiさん&lt;br&gt;fuzzはつきましたが、4.11用のをpatchするだけで動いています。&lt;br&gt;patchしたものと元のdiffをとって公開してみますね。&lt;br&gt;（そろそろ利用するだけでなく、&lt;br&gt;　フィードバックもしないといけないと考えていたので）&lt;br&gt;&lt;br&gt;MyISAM_Sennaなんていう名前のエンジンを組み込むという話ですよね。&lt;br&gt;個人的にはMyISAMとMyISAM_Sennaはどちらか使えればいいので、&lt;br&gt;現状でも満足はしています。</body>
<timestamp>1126763580</timestamp>
</comment>
<comment>
<username>hsiomaneki</username>
<body>ありがとうございますー。</body>
<timestamp>1126766673</timestamp>
</comment>
</comments>
</day>
<day date="2005-09-08" title="グラフじゃなくてチャートだよ。">
<body>
*1126164527*[技術メモ][Perl]チャート作成コンポーネント
サーバ側で利用可能で、
Perl/PHPで使えるChart作成コンポーネントについて、
ライセンス料も含めて調査。
情報間違ってたらごめん。日本語通らなかったらごめん。
超えろGD::Graph。PHPだとJpGraphとかもあるんだっけ・・・

●ChartDirector(Perl/PHP)
　出力形式：画像ファイル,それを変換してPDF
 http://www.advsofteng.com/gallery.html

□ライセンス
　\ 68,985 (税込)   1 Redistribute License  

●FusionCharts(Perl/PHP)
　出力形式：FLASH
　http://www.infosoftglobal.com/FusionCharts/Gallery.asp?gMenuItemId=3

□ライセンス
 \ 65,700 1 Enterprise License 
  (Allows Unlimited Developers at a Single Physical Address)  

●FusionCharts Instrumentation Suite(Perl/PHP)
　出力形式：FLASH
　http://www.infosoftglobal.com/FusionCharts/IS/Gallery.asp?gMenuItemId=4
　コックピットみたいなものなどがある。

□ライセンス
　\ 52,500   1 Site License
　(Unlimited Developers for ONE Website (ONE domain name))  
　または
　\ 105,200   Enterprice License with Source Code
　(Unlimited Developers, Unlimited Websites at ONE physical location)  

●Swiff Chart Generator
　出力形式：FLASH
　http://www.globfx.com/products/swfchartgen/demo.php

□ライセンス
　US $899/server 

●PopChart
　出力形式：FLASH
　ライセンスが高いので省略。
　\ 1,104,915 (税込)   1 Production Server License  

★発注はココらへんから。
　http://componentsource.co.jp/catalog.asp?fl=&amp;gf=+BUSFUNCGRAPHP&amp;bc=&amp;sc=CSJ&amp;ul=ja

しっかしこういう調査ってめんどくさいよなあ。

*1126198289*[技術メモ][検索]Senna Unicode 正規化サポート
エラく容量増えてるな、と思ってSubversionの履歴見たら、
SennaでUnicode正規化@utf8サポートだそうで。
うーむ。DBをujisからutf8に変えておくか。

ところで、ネットワークドライブの割り当てをしたドライブで
TortoiseSVNのオーバーレイアイコンが出ないんだけど、
これって仕様かしら。

*1126198290*[技術メモ][Subversion]Windows+Apache2+WebDAV+LDAP+Subversion
記憶だけで書いているが、
WindowsなApache2でmod_authz_svn経由でLDAP認証でWindows2000ServerなDCで…
って環境で認証かけようとすると即Apacheが落ちる。

しょうがないからDigest認証だけをかけた。
遅いけど認証データはテキストに。
パスワードの変更やユーザ追加用にPerlでCGI書きました。

なぜWindowsなApache2かっていうと、
NASのOSがWindowsだったから。
NAS自体はNFSでマウントできるらしいけどね。
</body>
</day>
<day date="2005-09-09" title="あぶなかった。">
<body>
*1126247259*[技術メモ][MySQL5]
MySQL5でmysqlhotcopyをしてrestoreするとき、
ストアドは復元されなかった。
何かミスったかな。
</body>
</day>
<day date="2005-09-12" title="やる気は大事だね">
<body>
*1126487297*[技術メモ][Subversion][Apache]Windows+Apache2+WebDAV+Kerberos認証+Subversion
http://d.hatena.ne.jp/tasukuchan/20050908/1126198290
で書いたように、
Windows+Apache2+WebDAV+LDAP+Subversion
をやろうとしたらApache2が落ちてしまうという現象。

で、LDAPで認証しなくても、Kerberos認証を直にやりゃあええやん、
ってことで
Windows+Apache2+WebDAV+Kerberos認証+Subversion
を狙う。

ということで、mod_auth_kerbのWin32バイナリを入手・・・
入手・・・
ねえ。

コンパイルしよう。
MITからKerberos5 for Windowsのソースと
SourceForgeのサイトからmod_auth_kerbのソースを取ってきて、と。
…

XtOffsetOfで通らない。
&gt;&gt;
#define XtOffsetOf(s_type, field) ((size_t) &amp;((s_type *)0)-&gt;field) 
&lt;&lt;
で逃げる。

KRB5_DLLIMPが定義されていない…
configureスクリプトでも見るか。
と思ったらSourceForgeが激重。
よってやる気が収束。
</body>
</day>
<day date="2005-09-13" title="コンパイル王">
<body>
*1126599304*[技術メモ][Perl]Perl自前コンパイル
Perlをコンパイルして入れてみる。初めて。
デバッグ情報が欲しかったので。

http://www.perl.com/download.csp
ここからダウンロードして、
&gt;&gt;
rm -f config.sh Policy.sh
sh Configure -Dusethreads -Dprefix=/usr -Duseshrplib -DDEBUGGING -Doptimize='-g'
LD_LIBRARY_PATH=`pwd`:$LD_LIBRARY_PATH; export LD_LIBRARY_PATH
make test
make install
&lt;&lt;
で。

いろいろ聞かれるので適当にEnterで答えた。

*1126604845*[技術メモ][Perl]で、デバッグオプションつけたら
SEGV出さないでやんの。
まあ、ありがちな話だな。

デバッグオプションなしで自前ビルドだとどうなるんだろう。

</body>
</day>
<day date="2005-09-14" title="Tidy自身の根性を叩きなおしたい">
<body>
*1126702015*[技術メモ][Perl][HTML]TidyでHTMLの根性を叩き直す。
世の中に溢れる、だらけたHTML。
こいつらの腐りきった根性を叩き直してやる！

で、Tidyクンなわけです。
http://tidy.sourceforge.net/
からダウンロードできる、んですが、
正式ダウンロード版は古い。
cvsから自動でアーカイブされたものは必要なファイル群が足りておらず、
makeに失敗する。

というわけで、以下のようにちゃんとcvsから取るべし。
&gt;&gt;
cvs -z3 -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/tidy co -P tidy
&lt;&lt;

で、buildディレクトリにでも移ってmake installでも。

こいつをPerlで使うためには
HTML::Tidyを使うのですが、
HTML::Tidyというpackage名を持つモジュールが２つ出回っています。
http://search.cpan.org/~petdance/HTML-Tidy-1.06/
http://users.rcn.com/creitzel/tidy.html#tidyperl
前者は設定ファイルを読み込む方式、
後者はメソッド経由でいろいろオプション設定できます。
が、前者を採用。オプション多いし。

前者、Test通りません。いつもどおり（？）force installで逃げる。

*1126709079*[技術メモ][Perl]HTML::RSSAutodiscoveryクンも
HTML::RSSAutodiscovery、
入れようとしたらwww.syndic8.comにつながらないでエラー。
で、またforce install。
</body>
</day>
<day date="2005-09-15" title="森田検索">
<body>
*1126777638*[雑談][検索]RastとかSennaとか
わが社内ではpg_rastも動いているし、MySQL+Sennaも動いている。
両者のプロジェクトはほぼ関係ないんだけど。
やっぱり全文検索は大事だよね～
他にもLucene先生も、独自のtrigram検索エンジンも動いています。
検索マニア。

*1126777639*[技術メモ][だめ]謎diff
MySQL 5.0.12-beta + sennna rev.49のpatchをsenna-devに投稿しようと思って
diffを取った。diff -Nurで取ったんだけど、
ディレクトリを指定したらdiffの容量がおかしいほど大きくなる。
中身見るとほぼ全文+になっていたり。
でも、個々のファイルでdiffを同じオプションで取ったら小さい。
なんだろう。謎だ。

ちなみに、KDiffとかいうKDEについてるGUI経由でやったら
やっぱり誤検出なし。
</body>
</day>
<day date="2005-09-16" title="なんとかchaとかなんとかsenとか">
<body>
*1126835300*[技術メモ][検索]ChaSen利用部をMeCab利用に変更
今、とあるプログラミングのパフォーマンス向上を目指している。
というわけで、ChaSen使っている部分をMeCab利用に変えてみよう。
 -Ochasenで適当に変更。
*1126866767*[技術メモ][Perl]utf8::SWASHGETが重い
なんか動かしてるプログラムのとある関数がやたら重い。
DProfセンセ～イ！！
&gt;&gt;
%Time ExclSec CumulS #Calls sec/call Csec/c  Name
 59.3   36.62 38.237      1   36.621 38.236  Omokute::Tamaran::Function
 19.6   12.10 15.161  15223   0.0008 0.0010  utf8::SWASHGET
&lt;&lt;
ぎゃあ。激重いがな！utf8::SWASHGET。
で、正規表現を使う際に内部的に呼ばれているらしいけど、
ちょっと重すぎ。

http://www.nntp.perl.org/group/perl.unicode/2807
によると、
&gt;&gt;
Unicode含まない正規表現使うときは、
そこだけスコープ切って、その中でuse bytesを指定してあげな！
&lt;&lt;
だそうです。

めんどい。

しかも日本語での情報が激少ない。

*1126870365*[技術メモ][Perl]utf8::SWASHGET問題解決
&gt;&gt;
s/^.*?$val.*?$//o
&lt;&lt;
って式が重いらしく。
確かに重そうだ。これを全行やるっていうのは。

$valが存在したら行全体消しまっせ、いひひ、
ってことでしょ。

*1126872100*[技術メモ][Perl]utf8::SWASHGET問題やっぱ未解決
DProfやりなおしたらCALL回数もあんまり変わってないでやんの。
use encoding 'utf8'を指定していると。
ソースコード自体を読むときに呼ばれるのかしら？
謎。

*1126873159*[技術メモ][Perl]utf8::SWASHGET問題ふたたび解決？
ホッツエンポロッツふたたびあらわる。
まあ、それはどうでもいいとして、
dprofpp -Sした結果をみたところ、
&gt;&gt;
  Omoi::Logic::Omosugiru x 1  	18.36s = (0.41 + 17.95)s
    XML::Clean::clean x 1  	5.29s = (4.28 + 1.01)s
      Encode::utf8::decode_xs x 2152  	0.11s = (0.07 + 0.04)s
        Encode::Encoding::renewed x 2152  	0.04s
      XML::Clean::handle_end x 1183  	0.23s = (0.14 + 0.09)s
        Encode::utf8::decode_xs x 4541  	0.09s = (0.04 + 0.05)s
          Encode::Encoding::renewed x 4541  	0.05s
      XML::Clean::handle_start x 1681  	0.45s = (0.11 + 0.34)s
        Encode::utf8::decode_xs x 4079  	0.09s = (0.04 + 0.04)s
          Encode::Encoding::renewed x 4079  	0.04s
        XML::Clean::clean_attr x 1681  	0.26s = (0.16 + 0.09)s
          Encode::utf8::decode_xs x 6429  	0.09s = (0.04 + 0.05)s
            Encode::Encoding::renewed x 6429  	0.05s
          utf8::SWASHGET x 6  	0.00s
          utf8::SWASHNEW x 2  	0.00s
      XML::Clean::handle_text x 2865  	0.22s = (0.21 + 0.01)s
        Encode::utf8::decode_xs x 243  	0.01s = (0.00 + 0.01)s
          Encode::Encoding::renewed x 243  	0.01s
    utf8::SWASHGET x 970  	12.48s = (9.53 + 2.95)s
      Encode::utf8::decode_xs x 177535  	2.73s = (1.59 + 1.14)s
        Encode::Encoding::renewed x 177535  	1.14s
      utf8::SWASHGET x 347  	0.22s = (0.19 + 0.03)s
        Encode::utf8::decode_xs x 4120  	0.03s = (0.01 + 0.01)s
          Encode::Encoding::renewed x 4120  	0.01s
&lt;&lt;
だって。うひょー。調べがいがある。
重い関数の中の正規表現。
&gt;&gt;
    $html =~ s/&lt;[\/]?form[^&gt;]*?&gt;//isg;
    $html =~ s/&lt;[ ]*?([^ ])/&lt;$1/g;
    $html =~ s/$comment_tag_regex//isgo;
    $html =~ s/&lt;script.*?&lt;\/script&gt;//isg;
    $html =~ s/&lt;style.*?&lt;\/style&gt;//isg;
    $html =~ s/&lt;map.*?&lt;\/map&gt;//isg;
    $html =~ s/&lt;area.*?\/&gt;//isg;

    ...

    $html =~ s/　/ /g;
    
    $html =~ s/\t/ /g;
    $html =~ s/\n/ /g;
    $html =~ s/\r/ /g;
    $html =~ s/&gt;/&gt;\n/g;
    $html =~ s/&lt;/\n&lt;/g;
    $html =~ s/^\n//mg;
    $html =~ s/^[\s]+//mg;
    $html =~ s/[\s]+$//mg;
    $html =~ s/^&lt;[\s]+/&lt;/mg;
    $html =~ s/&lt;\?.*?\?&gt;\n//g;
    $html =~ s/([^\s])\/&gt;/$1 \/&gt;/g;

    $html =~ s/[ ]+/ /g;

    $html =~ s/\&amp;amp;/\&amp;/g;
    $html =~ s/\&amp;nbsp;/ /g;

    $html =~ /(&lt;body.*?&lt;\/body&gt;)/is;
&lt;&lt;
確かにこりゃ重そうだ。
</body>
</day>
<day date="2005-09-17" title="はい　すなっく　ぱる　ですが">
<body>
*1127043127*[技術メモ][Perl]なんだろうなにかしら。
use diagnostics;を入れたらエラー無しで終了。
use diagnostics;を入れなかったら「不正な命令」といわれて異常終了。
なぜだー！

</body>
</day>
<day date="2005-09-18" title="">
<body>
*1127047311*[技術メモ][Perl]不可思議なSEGVを解決するために
Active Perl、Linux版なんて誰が使ってるんだろう、
と思っていたけど、
Perlで不可思議なSEGVが出る問題の回避のためにインストール。

で、いろんなモジュールをppmやらperl -MCPANで突っ込んでいったわけだけど、
なんかコンパイルエラーが出る。
&gt;&gt;
Scalar found where operator expected at ... line xxx, near &quot;xxx&quot;
Global symbol &quot;$xxxx&quot; requires explicit packge name at xxx line xxx.
&lt;&lt;
ActiveStateセンセ～イ！！！

http://bugs.activestate.com/show_bug.cgi?id=15715

ズギャッッッッ！なんじゃそりゃ。やる気がなくなっていくわー。
use strictを外せ、だって。やってみるか…

でもこういう違いが出るってことは、実装もかなり違うってことで、
つまりSEGV問題が解決することを期待。

*1127047688*[技術メモ][Perl]Inactive Perl...
Active Perlは実装が違いすぎて、
use encoding 'utf8';
の挙動がいろいろおかしいようです。むにょ～！！！

よってActive Perlの採用はやめ！
gdb上でPerl動かしてやるぜ！へへへ…
覚悟決めましたよ。

*1127048529*[技術メモ][Perl]Perl_sv_2cv
gdb上でperl動かすと、Perl_sv_2cvって関数で止まった。
sv.cっていうソース名からしても、おそらくSEGVをcatchするようなところなんだろう。
backtraceは
&gt;&gt;
#0 0xffffffff in Perl_sv_2cv at sv.c:7273
#1 0xffffffff in Perl_pp_entersub at pp_hot.c:2651
#2 0xffffffff in Perl_runops_debug at dump.c:1449
#3 0xffffffff in Perl_run at perl.c:1934
#4 0xffffffff in main at perlmain.c:98
&lt;&lt;
って感じ。別マシンだから手写しでカンベン。

…さてどうするか。pp_entersubってなんか汎用的な感じがするなあ。
ああ、Perlのソース見たくない見たくないぞ…

*1127049148*[技術メモ][Perl]うーん、svはsegvのコトじゃないらしいぞ
&gt;&gt;
#0  0x080df04b in Perl_sv_2cv (my_perl=0x816c008, sv=0x88c1174, st=0xbfffee90,
    gvp=0xbfffee94, lref=0) at sv.c:7273
#1  0x080c817e in Perl_pp_entersub (my_perl=0x816c008) at pp_hot.c:2651
#2  0x080ae789 in Perl_runops_debug (my_perl=0x816c008) at dump.c:1449
#3  0x08064d79 in perl_run (my_perl=0x816c008) at perl.c:1934
#4  0x0805fdd1 in main (argc=11, argv=0xb, env=0xbffff0a0) at perlmain.c:98

7232        switch (SvTYPE(sv)) {
7233        case SVt_PVCV:
7234            *st = CvSTASH(sv);
7235            *gvp = Nullgv;
7236            return (CV*)sv;
7237        case SVt_PVHV:
7238        case SVt_PVAV:
7239            *gvp = Nullgv;
7240            return Nullcv;
7241        case SVt_PVGV:
7242            gv = (GV*)sv;
7243            *gvp = gv;
7244            *st = GvESTASH(gv);
7245            goto fix_gv;
7246
7247        default:
7248            if (SvGMAGICAL(sv))
7249                mg_get(sv);
7250            if (SvROK(sv)) {
7251                SV **sp = &amp;sv;              /* Used in tryAMAGICunDEREF macro. */
7252                tryAMAGICunDEREF(to_cv);
7253
7254                sv = SvRV(sv);
7255                if (SvTYPE(sv) == SVt_PVCV) {
7256                    cv = (CV*)sv;
7257                    *gvp = Nullgv;
7258                    *st = CvSTASH(cv);
7259                    return cv;
7260                }
7261                else if(isGV(sv))
7262                    gv = (GV*)sv;
7263                else
7264                    Perl_croak(aTHX_ &quot;Not a subroutine reference&quot;);
7265            }
7266            else if (isGV(sv))
7267                gv = (GV*)sv;
7268            else
7269                gv = gv_fetchpv(SvPV(sv, n_a), lref, SVt_PVCV);
7270            *gvp = gv;
7271            if (!gv)
7272                return Nullcv;
 *ERROR*:7273            *st = GvESTASH(gv);
&lt;&lt;
で、7273で落ちている、と。
…実用Perlプログラミングの20章が参考になりそうなので今から読みます。グスン。
svはScalar Valueだったのね。
</body>
</day>
<day date="2005-09-21" title="カツカツ">
<body>
*1127273887*[技術メモ][Perl][だめ]TinySVMのperlバインディングがうまくいかない件
TinySVM 0.09、perlバインディングがうまくいきましぇん。

http://www.nesugi.net/diary/20050612.html
から。
&gt;&gt;
-TinySVMのVer. 0.09を解凍 
-TinySVMのVer. 0.04を解凍
-0.09の方のperlディレクトリを削除して、 
そこに0.04のperlディレクトリをコピーして持ってくる 
-新しく持ってきたperl/Makefile.PLのLIBSに-lstdc++を追加
'LIBS'              =&gt; '-L/usr/local/lib -ltinysvm'これを
'LIBS'              =&gt; '-L/usr/local/lib -ltinysvm -lstdc++'こんな感じ。 
-後は普通に./configure; make installして、TinySVMの本体をinstall 
-Perl moduleを入れる場合は、cd perlした上で、perl Makefile.PL; make install 
でできる、とメモには書かれてた。
&lt;&lt;
だそうです。

*1127288644*[技術メモ][某ヲチ]おそい・・・
新しいモジュールの移植に取り組む。

使っているモジュールを洗い出すために、
モジュール群をuseしてみただけのスクリプトを動かす。
で、適宜CPANからインストールとか、
ファイルパスの依存性修正とか。

で、なんとかコンパイルとおるようになったんだけど・・・
遅い。
DProfセンセイ～
&gt;&gt;
 35.0   37.91 120.52     11   3.4471 10.956  main::BEGIN
 31.8   34.37 34.379 133680   0.0000 0.0000  DB_File::FETCH
 15.4   16.69 16.697 691047   0.0000 0.0000  Atarashii::Module::xxx
 13.6   14.71 31.583     11   1.3379 2.8711  Atarashii::Module::yyy::BEGIN
 12.3   13.35 13.359 133680   0.0000 0.0000  DB_File::NEXTKEY
 1.04   1.121  1.813      2   0.5604 0.9065  zzzz::BEGIN
 0.55   0.597  0.885  67221   0.0000 0.0000  Encode::utf8::decode_xs
 0.51   0.550  0.550     12   0.0458 0.0458  DB_File::FIRSTKEY
 0.33   0.354  2.553     26   0.0136 0.0982  Atarashii::Module::zzz::BEGIN
 0.27   0.288  0.288  67221   0.0000 0.0000  Encode::Encoding::renewed
 0.13   0.140  0.140      5   0.0280 0.0280  qqqq::read
 0.08   0.090  0.090     15   0.0060 0.0060  DB_File::DoTie_
 0.06   0.066  0.066   1209   0.0001 0.0001  Encode::utf8::__ANON__
 0.05   0.050  0.000     13   0.0038 0.0000  utf8::SWASHNEW
 0.04   0.040  0.010      1   0.0400 0.0099  utf8::AUTOLOAD
&lt;&lt;
漏らす。
まあ、BEGINブロック中のDB_Fileででっかいファイル読んでいるから
仕方ないといえば仕方ない。しかしクソ遅い。
毎回この時間待たされるとなるとデバッグしたくないぞ・・・

さてどうすっか。

*1127294638*[技術メモ][自然言語][だめ]Cabocha
CabochaではUTF-8扱えないのかしら…
ちゃんと追ってないけど、マニュアル見る限りUTF-8については言及してないな。

あとは、-I1の入力、ChaSen方式じゃないとダメなのかしら？
Mecab対応って、Mecabを-Ochasenで呼び出してるってことかしら？

せっかくEUCからUTF-8化したのに…ぐすん。

集めたblogテキストにバイトでラベル付けして学習させてみようかしら。
えらく大変そうだけど。

*1127294949*[技術メモ][Perl]UTF-8フラグと戦いまくっていますよ
このblogのeditページを見てみると、
１位がやねうらおさん、２位がnaoyaさんと漏らす布陣に。

で、naoyaさんのblogを見てみると、
&gt;&gt;
UTF-8 フラグと戦う人へ
http://blog.livedoor.jp/nipotan/archives/50228106.html
&lt;&lt;
が紹介されていた。これまた漏らす。

CPAN CPAN 小さくたって 一人前～

*1127301832*[技術メモ][某ヲチ]522,779
DB_Fileで読んでいるハッシュの件数をカウントしてみた。
それぞれ、
&gt;&gt;
522779,158563,12848,1250,315603,27
&lt;&lt;
そりゃ遅いわ。しかもキーも長め（日本語で２０文字くらい）だし。
うーん、なんかいい方法ないのかしら…
</body>
</day>
<day date="2005-09-22" title="use utf8 と use encoding ’utf8’">
<body>
*1127377268*[技術メモ][Perl]遅い主原因判明
http://www.pure.ne.jp/~learner/program/Perl_unicode.html
ここを早めに読むべきだった。

use utf8とuse encoding 'utf8'、どっち使えばええねん！
ってわけでuse encoding 'utf8'をしていたわけですが、
それのせいでuseしただけでdecode_xsがいっぱい呼ばれて遅くなっていたようです。

しかし、DProf見てもどこから呼ばれているかわからんので、
かなり追うのに苦労した感が。むにゅー。

*1127381852*[技術メモ][Perl]ひらがな、カタカナ、漢字以外を落とす正規表現
&gt;&gt;
s/[^\p{Hiragana}\p{Katakana}\p{Han}]//sg;
&lt;&lt;
これでうまくいくかと思いきやうまくいかず。

http://homepage1.nifty.com/ton_b/intro/regex03/
によると、
&gt;&gt;
否定はpを大文字にして\P{Property}とするか、\p{^Property}と否定のメタ文字を入れます。 
&lt;&lt;
ということなので、
&gt;&gt;
s/[\P{Hiragana}\P{Katakana}\P{Han}]//sg;
&lt;&lt;
で解決、かと思いきや解決せず。
&gt;&gt;
s/[\p{^Hiragana}\p{^Katakana}\p{^Han}]//sg;
&lt;&lt;
でもダメ。
&gt;&gt;
s/[^\x{3040}-\x{30FF}\x{4E00}-\x{A000}]//sg;
&lt;&lt;
にしてみた。おそらく大丈夫。
</body>
</day>
<day date="2005-09-24" title="学校のプールの脱衣所ってサポーターがよく忘れられてたよね">
<body>
*1127529717*[技術メモ][SVM]SVMライブラリの調査
知能システム科学専攻というものの博士課程まで行っておきながら、
ずーっと触ってなかったSVM。
まあ、使われているから調べないと。アルゴリズム本も買うかな。

http://www.kernel-machines.org/index.html
でちょこちょこ。

*1127535122*[技術メモ][正規表現]パフォーマンスアップ！
Perlソース中の正規表現の最適化をしています。
後方一致をsubstr使ってやったり、とか。

詳説 正規表現を読んでいないのでアレですが、
すくなくとも文を前から読んでいく仮定のもとで
決定性オートマトンが容易に思いつかない正規表現は遅いような気がする。

逆に、決定性オートマトンが容易に思いつくやつはかなり速い。
substrとかsplitとかeqとか&amp;&amp;とか||の組み合わせをして
読みにくいけど最適化したつもりのソースにすると、
逆に遅くなってしまう。

意気揚揚と書き直したのに、
Benchmarkで計ったら２倍近く時間かかってるんだもん…

ここらへんはPerl優秀だ。
や、substrとかsplitが遅いだけなのかもしらんけど。
drk7.jpにsplitのxsバージョンがあったな。
いつか試してみるか。

*1127536019*[技術メモ][正規表現][パフォーマンス]Perl様には負けます
&gt;&gt;
#!/usr/bin/perl

use utf8;
binmode STDIN =&gt; &quot;:raw&quot;;
binmode STDOUT =&gt; &quot;:raw&quot;;
binmode STDERR =&gt; &quot;:raw&quot;;

use Benchmark;

Benchmark::timethese(150000, {
	's_regex' =&gt;\&amp;s_regex,
	's_substr' =&gt; \&amp;s_substr,
});

sub s_regex{
	my $a = 'オレオレ詐欺';
	if($a =~ /詐欺$/){
		return 1;
	}
	return 0;
}
sub s_substr{
	my $a = 'オレオレ詐欺';
	if(substr($a,-2) eq '詐欺'){
		return 1;
	}
	return 0;
}
&lt;&lt;
で、s_regex先生の勝ち！なのです。やるな・・・
substrが遅いんじゃないかと思ってきた。
ちなみに、'詐欺' eq substr($a,-2)にしたらちょっとだけ遅くなった。

*1127539351*[技術メモ][Perl][パフォーマンス]Perlで定数
Perlで定数を使いたい。
変更を不可にするんじゃなくて、パフォーマンスをアップするために。
で、
http://eureka.prits.jp/resources/developer/perl_memo.html
によると、定数関数というのを用いるとインライン展開してくれるらしい。
で、それを自動でやってくれるconstant.pmってあったのね。
知らなかった。
さっそく導入じゃ。

*1127552207*[技術メモ][Perl][パフォーマンス]sprintfは速い
&gt;&gt;
#!/usr/bin/perl

use utf8;
binmode STDIN =&gt; &quot;:raw&quot;;
binmode STDOUT =&gt; &quot;:raw&quot;;
binmode STDERR =&gt; &quot;:raw&quot;;

use Benchmark;

Benchmark::timethese(300000, {
	's_original' =&gt;\&amp;s_original,
	's_new' =&gt; \&amp;s_new,
});

sub s_original{

	my $a = 'あれ';
	my $b = '声が';
	my $c = '遅れて';
	my $d = '聞こえるよ';
	my $e = 'という';
	my $f = 'モノマネを';
	my $g = 'やってみる。';

    $result .= sprintf(
        &quot;%s\t%s\t%s\t%s\t%s\t%s\t%s\n&quot;,$a,$b,$c,$d,$e,$f,$g);
}

sub s_new{

	my $a = 'あれ';
	my $b = '声が';
	my $c = '遅れて';
	my $d = '聞こえるよ';
	my $e = 'という';
	my $f = 'モノマネを';
	my $g = 'やってみる。';

    $result .= &quot;$a\t$b\t$c\t$d\t$e\t$f\t$g\n&quot;;
}
&lt;&lt;
s_originalの勝ち。
</body>
</day>
<day date="2005-09-26" title="デュアルDB構成">
<body>
*1127697486*[技術メモ][MySQL5][PostgreSQL]ハイブリッドするする
いまさらながら、
MySQL5.0.12-betaとPostgreSQL 8.1betaを組み合わせて使いたくなってきた。
だが、用意されているDBサーバは1つ。
同じマシンに乗せてパフォーマンス上大丈夫なのかしら。

で、検索かけてみても、
お互いの宗教論争っぽいのが多くて、
実際やってみた事例が少ない。
管理コストの面かしら？
僕としては、
両者を組み合わせて使うことに効果あると判断したんだけどなあ。
ま、やってみっか。

ちなみに、今回の仕事は３台サーバを使う予定。
WebサーバがFreeBSD 5。
AppサーバがDebian (sarge)。
DBサーバがSUSE 9.3 Pro FTP。
でいこうかしら、と。
sargeのAMD64対応版正式リリースが出たらSUSEは外すかもね。

ありとあらゆる状況で最適な製品を選択するのは難しく、
結局は使う人間の習熟度で製品を選びがちだよね。
それが狂信的になってくると、
パレート最適から大きく離れた選択肢を選んでしまったりするのかな。

選択肢は広く持つべきだと思ったのでした。ぽこぺん。

*1127698591*[雑談]技術系MLほにゃほにゃ
で、PostgreSQLのMLに入ってみた。
どこのほにゃほにゃusers MLも初心者の扱いに困ってるみたいね。

でも、僕がイライラするのは初心者の質問ではない。
あまり知識がなかったり、
実行環境がないような状況でコードを書いて送ったりして、
的外れなアドバイスをする投稿者の投稿、
コレを見るとイライラする。

初心者の失礼な質問だと思ったらスルーする。
答えられなかったらスルーする。
流量の多そうなMLではこういう作法で行動して欲しい、
と個人的には思う。

あと、真・技術系メーリングリストFAQを真顔で引用するのも
そろそろやめたほうがいいんじゃないかと思う。
あれは冗談だから面白いのだ。
FAQとしては一覧性にかけ、冗長なのでオススメできないと思う。

で、PostgreSQLのMLの説明文なんだけど、
&gt;&gt;
PostgreSQLメーリングリストへようこそ 
--------------------------------------------------------------------
(中略)
-投稿する際の文字コードはJISにしてください．SJIS,EUC,UTF-8 などで 投稿しないで下さい． 
-1バイトカタカナ(いわゆる「半角カナ」)と機種依存文字(丸囲み数字や ローマ数字など)は使わないでください． 
-問題が起きたら，まず質問を投げる前にまず PostgreSQL のソースの中 の doc/TODO を読みましょう．既知の問題はここに書かれています．内容が 理解できない，あるいはTODOに書かれていないなどの場合は，MLのログを調 べてみましょう．それでも良い解決方法がみつからない場合は，MLに質問し てみましょう．その際，自分の使っているPostgreSQLのバージョン,OSのバージョン，問題の再現方法を具体的に書いてください．また，サブジェクトに は問題が何か分かるように書いてください．「質問」，「help」，「教えてください」などの内容が推定できないようなサブジェクトは使わないで下さい．
-新しい話題に関するメールは，新しいメールとして投稿してください．無関係のメールにたいするフォロー(リプライ)として投稿しないでください． 
&lt;&lt;
ここらへん、技術的に解決すべき（解決できる）問題が多いと思った。

-まず、「質問・help・教えてください」だけのタイトルははじく。
-質問の新規投稿用のWeb上のフォームを設け(ML会員専用)、
そこでPostgreSQLのバージョンをリスト内から選択させ、
OSもメジャーなものは選択させる。
で、そのフォームから投稿する前に、
そのフォームに入れた情報からdoc/TODOやMLの過去ログを検索して、
似たような事例がないか探してあげる。
その事例集を全て読んだあとで、本投稿ボタンを押して投稿させる。
-フォローの場合は件名でマッチングをかけて、Re:などを除いた部分が一致しない場合はハジく。

などなどいろいろできそうな気もする。
や、気がするだけ…

*1127747415*[技術メモ]Tidyが遅い・・・
あ～ん、Tidyクン遅いよ～
どうにかならんかしら…
</body>
</day>
<day date="2005-09-28" title="X!!! 叫んでみろ X!!!">
<body>
*1127877152*[技術メモ][Perl]さようならTidy
世の中にある小汚いHTMLを、
戸塚ヨットスクールばりに更生させてくれるTidyくんですが、
ちょっと複雑なHTMLを食わせただけでかなり時間がかかります。
それだけマトモな処理をしているということなんだろうけれども。

で、僕の用途としては、
XML高校に編入できるくらいまで更生してもらえれればいいわけです。
というわけで、htmlをxhtmlに変換するツールで十分なのではないかしら？
これもちょっと余計なことをするが、tidyほど処理はしないだろうと予想。
調査。

-html2xhtml
--http://suiten.wig.nu/soft/index.html
--リンク系の閉じタグ作ってくれないのでout

-xhtmlの書き方と留意点
--http://www.kanzaki.com/docs/html/xhtml1.html
--いちおう参考スクリプトあり。でも自動変換じゃ無理なとこもあるとちゃんと指摘してある。しょぼーん。

-WWW::Webrobot::Html2XHtml
--http://search.cpan.org/~strcek/webrobot-0.70/lib/WWW/Webrobot/Html2XHtml.pm
--いけるかしら…　これから調査しまーす。

*1127887154*[技術メモ][Debian-amd64]入れてみる
やっぱSUSE Pro 9.3 for AMD64やめ。Linux側はDebianで統一しちゃおう。
で、Debian-amd64(sarge)。

初心者なので
http://debian.fam.cx/index.php?install#content_1_10
ここを見てインストールしようと思うが、
いきなりlinux26が通らない。
で、調べてみると、Debian-amd64はkernel 2.4には対応しないぜイエーイ、
ということらしいので、何も指定せずとも2.6になるようだ。

こことか
http://kmuto.jp/open.cgi?debian-amd64&amp;l=en
こことか
http://wiki.debian.net/index.cgi?debian-amd64-faq
こことか
https://alioth.debian.org/docman/view.php/30192/21/debian-amd64-howto.html
見ながら設定するかね。

*1127895271*[技術メモ][MySQL5][Senna]MySQL 5.0.13-rc with senna(rev.50) compiled with gcc-3.4 On Debian-amd64(sarge)
うひひ。僕はチャレンジャーかもしれない。
今日届いたDual Core Opteron x 2（つまり論理CPUは4）のサーバにDebianを突っ込んだ。

で、出たばっかのMySQL 5.0.13-rcにMySQL 5.0.12-beta用のsennaのパッチを当てる。
Hunk出たけど問題なさそう。
でビルドする。
&gt;&gt;
 # autoconf
 # CFLAGS=&quot;-O3 -march=opteron&quot; CXX=gcc CXXFLAGS=&quot;-O3 -march=opteron \
 -felide-constructors -fno-exceptions -fno-rtti&quot; ./configure \
 --prefix=/usr/local --localstatedir=/var/mysql/data --enable-assembler \
 --with-named-curses-libs=/lib/libncurses.so.5.4 \
 --with-charset=utf8 \
 --with-client-ldflags=-all-static --with-mysqld-ldflags=-all-static
&lt;&lt;
怒られた。-march=opteronはgcc 3.4以降で対応らしい。
じゃあgcc-3.4とg++-3.4入れちゃおうじゃないの！！！（馬鹿）
mecabもsennaもgcc-3.4で作り直して。
&gt;&gt;
 # CC=gcc-3.4 CFLAGS=&quot;-O3 -march=opteron&quot; CXX=gcc-3.4 CXXFLAGS=&quot;-O3 -march=opteron \
 -felide-constructors -fno-exceptions -fno-rtti&quot; ./configure \
 --prefix=/usr/local --localstatedir=/var/mysql/data --enable-assembler \
 --with-named-curses-libs=/lib/libncurses.so.5.4 \
 --with-charset=utf8 \
 --with-client-ldflags=-all-static --with-mysqld-ldflags=-all-static
&lt;&lt;
うひょひょ～。いま絶賛コンパイル中。どこで死ぬやら…
</body>
<comments>
<comment>
<username>hsiomaneki</username>
<body>どきどき。。</body>
<timestamp>1127917848</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>ドキがムネムネでした。&lt;br&gt;&lt;br&gt;で、mecab_new3の中で呼びだされている&lt;br&gt;std::stringが見つからないというエラーがいっぱい出ていました。&lt;br&gt;標準C++ライブラリ関連のリンク問題でしょうか。&lt;br&gt;おそらく-all-static関係を外せば通りそうですが、&lt;br&gt;実運用する予定なのでstatic linkしたいですね。&lt;br&gt;&lt;br&gt;BOOLEAN MODEでの大改造、楽しみに待っております。</body>
<timestamp>1127921905</timestamp>
</comment>
<comment>
<username>hsiomaneki</username>
<body>mteパッチなしだと大丈夫なのかなぁ。&lt;br&gt;現在mecab-0.82pre2で動くように画策中です。</body>
<timestamp>1128043114</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>staticリンクやめて、ia32-libsを入れたらOKでした。&lt;br&gt;/lib/ld-linux.so.2を求めているようだったので。&lt;br&gt;現在はきちんと動いております。&lt;br&gt;&lt;br&gt;mecab、0.90はよ出さんかい、というところですね。</body>
<timestamp>1128070137</timestamp>
</comment>
</comments>
</day>
<day date="2005-09-29" title="">
<body>
*1127999144*[メモ]AppServer設定
Perl 5.8.7
&gt;&gt;
 rm -f config.sh Policy.sh
 sh Configure -Dcc=gcc-3.4 -Dusethreads -Dprefix=/usr -Duseshrplib -Doptimize='-O3 -march=pentium4'
 LD_LIBRARY_PATH=`pwd`:$LD_LIBRARY_PATH; export LD_LIBRARY_PATH
 make test
 make install
&lt;&lt;

libexpat1-devとlibssl-devとlibtidy-devを入れる。

MySQL 5.0.13-rc。クライアントだけ必要なので、--without-server。
&gt;&gt;
CC=gcc-3.4 CFLAGS=&quot;-O3 -march=pentium4&quot; CXX=gcc-3.4 CXXFLAGS=&quot;-O3 -march=pentium4 \
 -felide-constructors -fno-exceptions -fno-rtti&quot; ./configure \
 --prefix=/usr/local --localstatedir=/var/mysql/data --enable-assembler \
 --with-named-curses-libs=/lib/libncurses.so.5.4 \
 --with-charset=utf8 \
 --with-client-ldflags=-all-static --with-mysqld-ldflags=-all-static \
 --without-server
&lt;&lt;
でもエラー。
&gt;&gt;
`my_thread_var' undeclared 
&lt;&lt;
とかゴチャゴチャぬかす。
 --without-serverを外してコンパイル。通る。
よって、コンパイル通したあとにもっかいwithout-serverでconfigureして
makeして止まったらmake -kして。でmake installでもだめ。

で、MySQLページ見に行ったら…
http://bugs.mysql.com/bug.php?id=11680
ぎゃー！！！！なにが5.0.13にはまだ問題あるぜ！いひひ！だよ！！！
もういい。サーバ付きでビルドしてインストールするも
サーバ動かさない方向で。

mecabは
&gt;&gt;
CC=gcc-3.4 CFLAGS=&quot;-O3 -march=pentium4&quot; CXX=gcc-3.4 CXXFLAGS=&quot;-O3 -march=pentium4&quot; \
./configure --with-charset=utf8 --disable-shared
make
make check
make install
&lt;&lt;
mecab-perlは
&gt;&gt;
CC=gcc-3.4 CFLAGS=&quot;-O3 -march=pentium4&quot; CXX=gcc-3.4 CXXFLAGS=&quot;-O3 -march=pentium4&quot; \
perl Makefile.PL
make
make check
make install
&lt;&lt;

Xangoのインストール時に
Log::Dispatchが必要だけれども、
こいつは自動で取ってこない。注意。

そして、エプソンダイレクトの「Endeavor NT340」欲しい！
</body>
</day>
<day date="2005-10-05" title="ひさびさに書く">
<body>
*1128478137*[技術メモ][Perl]DProf
新しい環境では、POEとDProfの相性が悪いらしく、
Segmentation Faultを起こしてしまう。
Devel::SmallProfも動かない。
さてどうしたものか。

*1128481034*[一般][PostgreSQL]PostgreSQL JP MLで
森田将棋の人が連続投稿されていた。
最近将棋の開発はあんまやってないっぽい。
最終作がPS2の2000年発売のやつみたいで。
あ、調べたら携帯版を最近出してるのね。にゃるほど。
</body>
</day>
<day date="2005-10-06" title="榎本大輔さんに貰ったマジコンを売っぱらって">
<body>
*1128592221*[技術メモ][Senna]まとめ読みモードは危険！
SennaのMLで質問に返答した。
しかし、すでに解答が出ていたのだ。
まとめ読みモードなのを忘れていた…
恥ずかしい。

しかも、まとめ読みモードだとスレッドもつながらず…

ぐすん。
まとめ読みモードを解除したのは言うまでもなく。

*1128608294*[技術メモ][Senna]sen_index_selとsen_index_select
MySQL bindingの中でも、sen_index_selectを使って
細かく制御したい欲が出てきた。ウズウズ。
いや、ここはガマンのしどころだガマンのしどころだ
リリースまで時間がないことを忘れるな
でもでも
ああ
あ
</body>
<comments>
<comment>
<username>hsiomaneki</username>
<body>boolean modeの中からsen_index_selectの機能を使えるように画策してますー。そちらを待って頂いた方が良いかも。。</body>
<timestamp>1128610905</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>おお、素晴らしいですね。&lt;br&gt;and,or,butだけでなく、&lt;br&gt;exact,partial,unsplit,near,similarも扱えるような&lt;br&gt;拡張boolean mode文法を用意される予定だと妄想し、&lt;br&gt;勝手に期待します。&lt;br&gt;というわけで、ガマンガマン。</body>
<timestamp>1128651146</timestamp>
</comment>
</comments>
</day>
<day date="2005-10-07" title="">
<body>
*1128708742*[技術メモ][検索]robots.txt
Xangoでいろいろやろうとするときには
robots.txtを自前で処理しなきゃいけません。
POE::Component::Client::HTTPを派生していろいろやるのが一番かと思うけど、
Xangoから呼ばれるイベントの中で、
WWW::RobotUAを参考に（ほぼコピぺ）、
RobotRules::Any_DBMFileを使ってごにょごにょやっていた。
が、ロジックミスで、ロックするようになっていた。危ない。
つか、内容読まずにコピペしたのがいけなかった。反省。

ロジックリライトしたら、うまくいってそうだ。
つか、早めにこういうのはやれ、というハナシで。
</body>
</day>
<day date="2005-10-08" title="VAIO type-Tが届いた。通常バッテリにしとけばよかった。">
<body>
*1128741871*[技術メモ][Tidy]spaces.msn.com...
http://spaces.msn.comのblog解析に難儀中。
tidyがSEGVしてまーす。
設定ファイルを指定しなければtidyクンは死なないようです。
（warningもerrorも出るけど）

xmlns:spaces、xmlns:msnなんてインポートしてる、
DTDもないのに。

tidyのデバッグなんてしたくねえなあ…

*1128741872*[技術メモ][MySQL5][Debian-amd64]あぶないあぶない
油断していたら、
MySQLのあるMyISAMテーブルの容量が4G超えてた！

…でもあっさり超えて正常稼動中。
SHOW TABLE STATUS LIKE 'html_data';
ってやってみると、
Max_data_length : 281474976710655
だそうで…(0xffffffffffff)
これが64bitパワーでしょうか。
といいつつ、よくよくfの数を数えると、48bitぶんなのね。

*1128758437*[技術メモ][Tidy]結局gdbセンセイにご足労願ったよ
実行ファイル版でも同じ設定ファイルを食わせると落ちる。
で、gdbセンセイの登場ってわけでさ。
&gt;&gt;
#0  0x40056c7e in tmbstrncmp () from /usr/lib/libtidy-0.99.so.0
#1  0x4004c623 in DropSections () from /usr/lib/libtidy-0.99.so.0
#2  0x4004ca61 in CleanWord2000 () from /usr/lib/libtidy-0.99.so.0
#3  0x4004ca50 in CleanWord2000 () from /usr/lib/libtidy-0.99.so.0
#4  0x4004ca50 in CleanWord2000 () from /usr/lib/libtidy-0.99.so.0
#5  0x4004ca50 in CleanWord2000 () from /usr/lib/libtidy-0.99.so.0
#6  0x4004ca50 in CleanWord2000 () from /usr/lib/libtidy-0.99.so.0
#7  0x4004ca50 in CleanWord2000 () from /usr/lib/libtidy-0.99.so.0
#8  0x4004ca50 in CleanWord2000 () from /usr/lib/libtidy-0.99.so.0
#9  0x4004ca50 in CleanWord2000 () from /usr/lib/libtidy-0.99.so.0
#10 0x4004ca50 in CleanWord2000 () from /usr/lib/libtidy-0.99.so.0
#11 0x4004ca50 in CleanWord2000 () from /usr/lib/libtidy-0.99.so.0
#12 0x4004ca50 in CleanWord2000 () from /usr/lib/libtidy-0.99.so.0
#13 0x4004ca50 in CleanWord2000 () from /usr/lib/libtidy-0.99.so.0
#14 0x4004ca50 in CleanWord2000 () from /usr/lib/libtidy-0.99.so.0
#15 0x4004ca50 in CleanWord2000 () from /usr/lib/libtidy-0.99.so.0
#16 0x400595bb in tidyDocCleanAndRepair () from /usr/lib/libtidy-0.99.so.0
#17 0x400590b8 in tidyCleanAndRepair () from /usr/lib/libtidy-0.99.so.0
#18 0x0804a8ab in ?? ()
#19 0x0804e008 in ?? ()
#20 0xbffffc16 in ?? ()
#21 0x40017cf0 in ?? ()
#22 0x401a3194 in timezone () from /lib/tls/libc.so.6
#23 0x00000000 in ?? ()
#24 0x0804d0f4 in ?? ()
#25 0xbfffed48 in ?? ()
#26 0x0804e008 in ?? ()
#27 0xbffffc16 in ?? ()
#28 0x00000000 in ?? ()
#29 0x00000000 in ?? ()
#30 0x00000000 in ?? ()
#31 0xbffffbee in ?? ()
#32 0x401a1e80 in ?? () from /lib/tls/libc.so.6
#33 0x00000000 in ?? ()
#34 0x401a1e80 in ?? () from /lib/tls/libc.so.6
#35 0x00000004 in ?? ()
#36 0xbfffee08 in ?? ()
#37 0xbfffedc8 in ?? ()
#38 0x40085974 in __libc_start_main () from /lib/tls/libc.so.6
#39 0x40085974 in __libc_start_main () from /lib/tls/libc.so.6
#40 0x080492e1 in ?? ()
&lt;&lt;
にゃる。Microsoft OfficeのHTML出力のいらんタグを落とす設定にしてるんだけど、
CleanWord2000ってそれっぽいね。
その設定を変えてみるか…
word-2000っていう名前のまんまなプロパティ。
falseにしたら落ちなくなりました。
ま、blogを探すのにこの設定はいらんわな。

*1128758535*[技術メモ][だめ]でも…
blog判定ではじかれてしまった。Date Filterだな。
あとで見ておこう。
</body>
</day>
<day date="2005-10-09" title="SQLウォーズ（スクールウォーズ）">
<body>
*1128857893*[技術メモ][MySQL5]ビュービュー風が吹き荒れる。
例えば、
uid,date,textという３フィールドあるテーブルと、
uid,titleという２フィールドあるテーブルを、
uidで結合したビューを作るとしよう。
textにはfulltext indexがついている。

ビューを使ってfulltext searchをするクエリに、
order by date descをつける。
そうすると、なんとソートされていないのだ！！！！
これはバグだな。

よって、ビュー作成時にorder by date descをつけてみる。
すると、fulltext indexは使えなくなってしまうのだ。

まあ、納得といえば納得だし、納得いかんといえば納得いかんぞ。
どう回避しようかな・・・

そいえば、MySQLではEXISTSよりINの使用を推奨するらしい。
なぜなら、相関サブクエリが推奨されないから、だって。
むにょ～なんだそれ。
こんなに早く暗黒面にぶち当たるとは…
</body>
</day>
<day date="2005-10-10" title="Dartsのコンパイルが止まっちゃう">
<body>
*1128925803*[技術メモ]Dartsクン
Dartsのコンパイルが止まっちゃう件について。
http://pcweb.mycom.co.jp/column/yetanother/045/
ふみゅ。

*1128933464*[技術メモ]CabochaのPerl bindingでSEGV
でます。
&gt;&gt;
Starting program: /usr/bin/perl test.pl
[Thread debugging using libthread_db enabled]
[New Thread 1076875392 (LWP 31414)]

Program received signal SIGSEGV, Segmentation fault.
[Switching to Thread 1076875392 (LWP 31414)]
0x4033ce16 in std::_Rb_tree&lt;std::string, std::pair&lt;std::string const, std::string&gt;, std::_Select1st&lt;std::pair&lt;std::string const, std::string&gt; &gt;, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, std::string&gt; &gt; &gt;::lower_bound () from /usr/local/lib/libyamcha.so.1

#1  0x40021672 in YamCha::Param::setProfile () from /usr/local/lib/libyamcha.so.1
#2  0x4001fc6f in YamCha::Param::open () from /usr/local/lib/libyamcha.so.1
#3  0x4002c94c in YamCha::Chunker::Impl::open () from /usr/local/lib/libyamcha.so.1
#4  0x40033eaf in YamCha::Chunker::open () from /usr/local/lib/libyamcha.so.1
#5  0x40023ab4 in yamcha_new () from /usr/local/lib/libyamcha.so.1
#6  0x0805bf27 in CaboCha::NE::open ()
#7  0x080558e8 in CaboCha::newAnalyzer&lt;CaboCha::NE&gt; ()
#8  0x08056ff7 in CaboCha::Parser::open ()
#9  0x08057acc in CaboCha::Parser::parse ()
#10 0x0804bf82 in cabocha_do ()
#11 0x0804bf19 in main ()
&lt;&lt;
というわけで、YamCha先生が悪いってことか。

さらに、YamChaのPerlバインディングもテストとおらない。
Chunker::open(): unknown action modeって出る。うーむ。

-解決- YamChaのconfigure時に--disable-sharedしちゃってました。そこ直してＯＫ。
</body>
</day>
<day date="2005-10-11" title="すげー体調悪い。">
<body>
*1129024563*[技術メモ]MecabはChasenにとって変われるか
まあ、-jオプションが一番の問題なわけで。
http://www.namazu.org/pipermail/namazu-devel-ja/2005-September/000608.html

chasenのマニュアルによると、
&gt;&gt;
 -j オプションについて
 茶筌では通常，改行をもって一つの入力文字列の終了とする．そのため，文の途中で改行が挿入されているファイルを解析した場合，正しい結果が得られなくなることが多い．
 そのようなときは-j オプションをつけると，句読点など(デフォルトでは「．。！？」の4 文字) あるいは空行を文の区切りとして解析を行うようになる．
 また，chasenrc ファイルの「区切り文字」の項目を指定することにより，-j オプションをつけた時の文の区切り文字を設定することができる．
&lt;&lt;
だそうで。
で、実際-jオプションつけて一番変わるところは、
読み込みをcha_fget_lineを呼ぶか、cha_jfgetsを呼ぶか、というところである。
どちらもlib/jfgets.cに入っているので一読を。

今日は体調悪くて解析する気が起きない。
とりあえず、Namazuのプレフィルタでも見てみますかね。
</body>
</day>
<day date="2005-10-16" title="んも～！！！">
<body>
*1129485105*[技術メモ][PostgreSQL][Perl]DBD::Pgめ！！！
カーソル使えないってどういうことやねん！！！！

*1129507207*[技術メモ][Perl]DBIx::Cursor
DBIx::Cursorっていう汎用カーソル君が存在するみたい。
やほーい！！！
さっそく試してみっか。
…
全部レコードとってきとるやないかい！
カーソル風アクセスを実現するだけ、ってことやな。
結局Pgを入れた。

*1129515167*[技術メモ][全文検索]Hyper Estraier
Hyper Estraier、評価しなくちゃ・・・

</body>
</day>
<day date="2005-10-18" title="FusionChartsセンセーイ">
<body>
*1129653569*[技術メモ]FusionChartsを日本語と共に使うときに気をつけるべきこと
FusionCharts
http://www.infosoftglobal.com/FusionCharts/
は日本語通ります。

ただし！！！
-食わせるXMLはUTF-8で、BOM付き(UTF8BOMでも使う)
-パラメータとしてdataURLを与えるとき、
マニュアルどおりの&amp;と?の変換だけでは、
一部のマルチバイト文字で化ける。
勝手に%xxの形式を解釈するため。
%-&gt;%25に変換してもだめ。
RACEエンコーディングなどして乗り切れ！！！

*1129655112*[技術メモ][Perl]PerlでRACEエンコーディング
いるもの
-Unicode::String
-Convert::RACE
-Convert::Base32
&gt;&gt;
エンコード
$encoded_output = to_race(utf8($output)-&gt;utf16);
デコード
$decoded_input = utf16(from_race($input))-&gt;utf8;
&lt;&lt;
UTF-8フラグは適宜処理すること。

</body>
</day>
<day date="2005-10-19" title="Xangoの新バージョン">
<body>
*1129708843*[技術メモ][Perl][検索エンジン]Xangoの新バージョン
早速新バージョン(rev.94)に入れ替えてみた。

旧バージョンとの入れ替えのポイントは…
-Xango::BrokerをXango::Broker::Pullに
-retrieve_jobsで返すやつを、uriが入ったhashrefのarrayじゃなくて、
 Xango::Job-&gt;new( uri =&gt; xxx, ...)で返ってきたののarrayにする。
 さらに、uriに入れるものはURIの文字列じゃだめで、
 URI-&gt;new($url)で作ったものを入れる。
-apply_policyで、
 $kernel-&gt;post('broker', 'send_fetcher', $job);
 はreturn 1;に、
 $kernel-&gt;post('broker', 'finalize_job', $job);
 はreturn 0;に変更。
-$job-&gt;{'honya'}は$job-&gt;notes('honya')に。
 ただし、$job-&gt;{'uri'}なんかはそのままとれるので、
 Data::Dumperなどで適宜見るべし。

こんな感じで動いていそうな予感。
あくまで予感だけど。

*1129710932*[技術メモ][Perl]CDB_Fileなんですが
CDB_Fileを使ってPgでカーソルでfreezeでbzip2のcompressで…
というのをやっていたら、3.5GくらいでOut Of Memoryした。
オンメモリでやってるのかいな!!!

で、CPAN先生に泣きついたところ、
CDB_File::Generatorっつーものがあるらしくてですね、ダンナ。
&gt;&gt;
This is a class which makes generating sorted large (much bigger than memory, but the speed will depend on the efficiency of your sort command. If you haven't got one, for example, it won't work at all.) CDB files on the fly very easy
&lt;&lt;
だそうです。いひひ。
や、こういうのを使ってまでCDBにこだわる必要性はまったくなくて、
シーケンシャルにファイルアクセスできればいいんだけどね…
</body>
</day>
<day date="2005-10-21" title="鋸山で～">
<body>
*1129912854*[技術メモ][Perl]Perlでの数値の最大値
Perlの数値の最大値がよくわからん。
整数はintegerもしくは文字列形式でいくらでも、
浮動小数点数はどうなんだろう。

use bignumをしたらスカラー値じゃない！っていっぱい怒られるしなあ。
かといって、bignumで使っているモジュール群をいちいち指定するのもめんどくさい。

や、infを使いたいだけなんですが、
use POSIXでMAX_DBLだっけ？の定数を持ってくるというのもあるな。

Math::BigFloatの中身を見てみたけれど、
infとNaNはやっぱり別扱いなのね。
どうしよう。移植モノだからなるべくいじりたくないなあ。
</body>
</day>
<day date="2005-10-23" title="[日記]クローラー落ちない">
<body>
クローラーと各種デーモンがかなり安定してきた。
３日回しても大丈夫。
POEのDBIがちょっと不安定だったので普通に同期にしたら安定している。
ポエの内部動作を見極めんといけんな。
</body>
</day>
<day date="2005-10-28" title="もうすぐリリース！でも…もにょもにょ">
<body>
*1130506000*[技術メモ][MySQL][検索]いやなバグ
http://bugs.mysql.com/bug.php?id=14037
(IN BOOLEAN MODEじゃなくても再現します)

IN BOOLEAN MODEを使わずに、
MATCH() AGAINST()を組み合わせて使うような
設計にしていたらハマった。

すなおにIN BOOLEAN MODEを使うべきかしらね。

</body>
<comments>
<comment>
<username>hsiomaneki</username>
<body>うーん、、orだけが必要ならマルチカラムインデックスにしておくのではダメすか？</body>
<timestamp>1130573094</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>えっと、投稿されているバグは&lt;br&gt;・違うフィールドにMATCH&lt;br&gt;・IN BOOLEAN MODE&lt;br&gt;という場合ですが、&lt;br&gt;以下のような場合でもダメなんです。&lt;br&gt;&lt;br&gt;EXPLAIN SELECT * FROM entry_search&lt;br&gt;WHERE MATCH (text) AGAINST (’小泉’)&lt;br&gt;OR &lt;br&gt;MATCH (text) AGAINST (’コイズミ’)&lt;br&gt;&lt;br&gt;入力した検索クエリを、&lt;br&gt;上記のような単一フィールドのMATCHを&lt;br&gt;連結した形式に変換して検索しています。&lt;br&gt;&lt;br&gt;IN BOOLEAN MODEだと思ったとおりの挙動にできなくて…</body>
<timestamp>1130581916</timestamp>
</comment>
</comments>
</day>
<day date="2005-10-29" title="ハングリータイガーいきたいな">
<body>
*1130570894*[技術メモ][検索]クローラー落ちていた
またTidy先生のおかげで落ちていた。
とりあえず、forkやめてフォアグランド動作に戻して、
daemontools配下に全てのクローラ関係のデーモンを移動。

あとデータ移行しておかなきゃ。
</body>
</day>
<day date="2005-11-01" title="ひと段落">
<body>
*1130840933*[一般]おつかれちゃん
なんとかリリース。
当日の朝に、外部からなぜか見られなくなっていたのを除けば。
さっそくフィードバックも返ってきている。
あとはデータ移行の残りを。
</body>
</day>
<day date="2005-11-08" title="書かなくなると書かなくなる">
<body>
*1131427478*[技術メモ][全文検索]Rast.pm
Rast 0.3.1ではDATE型とDATETIME型の両方があります。
Rast.pmでは過去のバージョンのRastを前提としており、
DATE型にDATETIME型の値(ex.2005-11-05T12:31:12)をいれようとします。
よって、Rast.pmとRast.xsを適当に修正すべし。

…ひさびさに書くと感覚が分からなくなる。

あと、大戸屋はなぜあんなに料理が出るのが遅いのだろう。

my $rast_db = Rast-&gt;open($dbpath, RAST_DB_RDWR, {sync_threshold_chars =&gt; 1000000});
こんな感じにしてもやっぱり数多くなってくると遅いなあ。
数千万件のドキュメントをインデックス化したいのに、
数十万で重い。検索はまあまあ軽いけど。

*1131447260*[技術メモ][全文検索]PLucene
Perl版Lucene。
http://search.cpan.org/~tmtm/Plucene-1.24/lib/Plucene.pm
C++版LuceneのCLuceneのPerlバインディングを使うという手もあり。

で、PLucene、ドキュメントを追加しようとすると激烈にエラーを吐きます。
Bitwise-String-Operatorsを普通のXORとインタプリタが解釈しちゃって、
数値じゃねえぞコラ！と怒っているようです。
対処法はこんな感じ。
つ http://www.kasei.com/pipermail/plucene/2005-September/000618.html

つか、Bitwise-String-Operatorsなんてものを知らんかった。
そろそろPerlをちゃんと勉強しないと…（最近コレばっか言ってる気がする
http://perldoc.perl.org/perlop.html#Bitwise-String-Operators

PLuceneのTokenizerの例。
http://blog.bulknews.net/mt/archives/000771.html
CJKとNutchに対応するものでも書こうかしら。
もしくはRastばりに、ひらがなカタカナはTri-gram、
漢字と文字種変更の場合はBi-gramとか。

おしりかゆい。

*1131453663*[技術メモ][全文検索]PLucene つ ポイッ 
インデックス中に持っている属性でのソートができないっぽい。
いや、普通にPerlのコードでできるんですが、
インデックスを使ったソートが出来ないということで。

*1131463569*[技術メモ][全文検索]CLucene
CLucene。
debian-amd64だとビルドに失敗する。
i386だと大丈夫だけど、
附属のperl wrapperがビルドに失敗する。
CPANにあるCLuceneモジュールは、
rpmの中にあるclucene_dllp.hがないと
ビルドに失敗する。tar.gzの中にはない。

とりあえず、rpmの中身を/usr/libと/usr/includeにぶちまけて
CPANのCLuceneモジュールをビルドしたところうまくいった。
が、なぜか疲労感が。

*1131522147*[技術メモ][全文検索]CLucene つ ポイッ
インデックス中に持っている属性でのソートはできますが、
Perl wrapperにそのためのインターフェースがない…

*1131467605*[技術メモ][全文検索]Hyper Estraier
Hyper Estraier。
amd64でも問題なく。
perlバインディングも問題なく。
index作成もそれなりに早く。
つか、indexがかなり小さい気がする。zlib効きまくり？

さて、そろそろスヤリしないと。
</body>
</day>
<day date="2005-11-09" title="東京デザインセンター閉まるの早すぎ">
<body>
*1131523269*[技術メモ][全文検索]昨日のお祭りを振り返って
というわけで、
昨日は一人全文検索祭り(Perlで簡単に使えてN-gramイケるやつ)をしていたわけですが、
大規模な文書をインデックスするにはSennaかHyper Estraierしか実用的じゃない印象。
Lucene系は、
Javaで本家Luceneを使う場合を除くと余計な心配事が多すぎる。

転置インデックス用のデータストレージエンジンを自分で書かないと
スケーラビリティーは確保できない、ということかしらね。

属性でのソート、属性での絞込みを高速にしたい用途は多いと思うので、
Senna on MySQLのFULLTEXT+別のindexパッチの登場を改めて大期待。

*1131532296*[技術メモ][全文検索]おおおおHyper Estraierクンめ
Perlバインディング、
est_db_search（実際はest_mtdb_search）の第４引数がNULL固定！！！
つまりest_cond_set_maxしていると全体ヒット件数が取れないのだ。
maxを抜いて取るべし。ひい。

あと、ESTCONDUSUALの場合にも、
ひっかかったレコードをちゃんとスキャンしてゴミを取り除いて、
しかも取得開始のoffsetを指定できるような関数あればいいな。
1.3倍のレコードとってゴミを除くっていうのはちょっと…むにょむにょ

</body>
<comments>
<comment>
<username>hsiomaneki</username>
<body>うすうす。</body>
<timestamp>1131591277</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>ごくあつ。</body>
<timestamp>1131596259</timestamp>
</comment>
</comments>
</day>
<day date="2005-11-11" title="ランチ食べ損ねた！">
<body>
*1131684471*[技術メモ][全文検索]Hyper Estraier 1.0.5が落ちる
Hyper Estraier 1.0.5が出てました。パチパチ。
で、使ってみようとしたら落ちる。

文書に@dateという属性をつけている。
&gt;&gt;
$cond-&gt;set_phrase($parsed_query);
$cond-&gt;add_attr(&quot;\@date NUMGE $from&quot;);
$cond-&gt;add_attr(&quot;\@date NUMLE $to&quot;);
$cond-&gt;set_order('@date NUMD');
&lt;&lt;
みたいにして使っているのだが、
set_orderを抜くと落ちる。入れるとOK。
落ちる場所は特定してましぇ～ん。

でも、estcmdで
estcmd search -attr '@date NUMGE 1995-01-01' -attr '@date NUMLE 2005-11-11' /var/hyper_estraier.idx/ test
こんな風にやるとちゃんとうまくいくんだな。

*1131685522*[技術メモ]rsync
rsyncのファイル転送全体をatomicにしたい。
で、atomic-rsyncというPerlスクリプトがあるのですが、
デスティネーションがローカルじゃないとダメなのよ。
むにゅ。
まあ、いろいろと方法はあるけど…
</body>
<comments>
<comment>
<username>otsune</username>
<body>私のところではcronで呼ばれるrsyncでlockfしたりしています。</body>
<timestamp>1132613962</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>ふむふむ。正統派ですね。参考になります。&lt;br&gt;今は転送するファイル自身が壊れててんやわんやしていたりします。</body>
<timestamp>1132824379</timestamp>
</comment>
</comments>
</day>
<day date="2005-11-21" title="るびじうむ">
<body>
*1132540284*[Ruby]入門しました！
今まで手をつけていなかったRubyをはじめました！
あとはPythonかしら…

というわけで、とりあえずRuby レシピブック268の技を購入。
とりあえずこれを一通り読んでみよう。
</body>
</day>
<day date="2005-11-22" title="やべー楽しくなってきた">
<body>
*1132642633*[Ruby]Win32でほにゃ
LWLなものでWin32プログラムしたことなかったんですが、
VisualuRubyを入れてほにゃほにゃしてみた。
やべー楽しー。そして楽チン。

C言語も嫌いじゃないんですけど、
Cで書きたくなるのはカリカリにチューンしたアルゴリズムなんかで、
普通に何か書くのはやっぱらいとうぇいとですよ。ふふ。
</body>
<comments>
<comment>
<username>hsiomaneki</username>
<body>計算通りじゃ、、うひひ</body>
<timestamp>1132669765</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>ぎゃー！やっぱり罠でしたか。。。&lt;br&gt;しかし、ホント楽です。ありがたい。</body>
<timestamp>1132744338</timestamp>
</comment>
</comments>
</day>
<day date="2005-11-24" title="Hyper Estraierストーカー">
<body>
*1132833912*[技術メモ][全文検索][Hyper Estraier]Hyper Estraier 1.06で
Hyper Estraier 1.06+perl binding 0.0.15で
どうもDatabase Problemが起きたりすることがある。
qdbmは1.8.33だが、1.8.34でバグが取れたらしいMinGW環境でもないし。

1.04+perl binding 0.0.14に戻したらとりあえず壊れなくなった、ように見える。
とりあえず1.04でのインデックス再作成を待ってみるか。

 -追記-
やっぱり1.04ではインデックスが壊れない。
optimizeが悪さしてるのかしら…？
（また原因究明はせず）

 -追加2-
1.04でも壊れました。
むむう。こうなると僕のプログラムの問題ですかね。

*1132841418*[技術メモ][全文検索]snippet作成なんか
snippet作成のときに必要となる、文字列検索アルゴリズム。
BM法くらいしか覚えていなかったんですが（しかも名前だけ）、
ちょちょいと検索すると面白いページ発見。
http://www-igm.univ-mlv.fr/~lecroq/string/index.html

1997って書いてあるのが気になるけど、
この分野はそうそう大きな進歩がなさそうな気がするので、
とりあえず載ってるやつらからサーベイだな。
</body>
</day>
<day date="2005-11-29" title="はいぱーはいぱー">
<body>
*1133231485*[技術メモ][Hyper Estraier]ふふふ
DBが壊れる原因がわかった。
Perlでの利用だけかもしらんが、
1つのプロセスで複数のDBを開いて更新をしているとおかしくなる。
(not ひとつのDBを複数のプロセスで開く)
同時に１個しか開かないようにしたら壊れなくなった。
まあ、ありがちといえばありがちだけど。
</body>
</day>
<day date="2005-12-03" title="Web2.0コトノハで">
<body>
*1133634900*[日記]Web2.0コトノハで
Web2.0コトノハで
http://web20.kotonoha.cc/
「Web2.0でガンが治る！」というコトを投稿したら、
速攻削除されてしまった（笑

僕の中のWeb2.0感をよく出せたと思ったのになあ。
とりあえず、普通のコトノハに再度出してみよう。

（自分を荒らしと思っていない荒らしが一番厄介という例）

*1133635684*[技術メモ][coLinux]mallocでSEGV
malloc、しかも数十バイトのやつを呼んだだけで落ちるってどういうことよ～。
んが～。coLinuxだからか？

 [追記]
普通にヒープぶっ壊してました。
やーひさびさのCはきっついのー。
ccmallocでリークチェックはしてたけど、
範囲外アクセスのチェックなんかも入れるか。
</body>
<comments>
<comment>
<username>nanisus</username>
<body>ぜひここで披露してほしい</body>
<timestamp>1134842055</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>包茎矯正グッズにダマされる、とか、&lt;br&gt;高校時代、60超えた男性国語教師を見てなぜか激しく勃起、&lt;br&gt;とかですね。かわいいもんだと思うんだけど…</body>
<timestamp>1134981638</timestamp>
</comment>
<comment>
<username>nanisus</username>
<body>それは削除されるのも無理はないわ^^;</body>
<timestamp>1134992121</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>ありゃ。やっぱそですか。ははは（はははじゃねぇ！&lt;br&gt;いやあ、コトノハの中の人には申し訳ないことをしたものです。</body>
<timestamp>1135058512</timestamp>
</comment>
</comments>
</day>
<day date="2006-01-11" title="そろそろここも更新し出すか">
<body>
*1136952469*[一般]あけましておめでとう
はてなのほうをずっと放置していましたが、
そろそろ再始動、っと。
でも特に技術メモっぽいのは最近溜まってないんだよなあ…
</body>
</day>
<day date="2006-01-12" title="">
<body>
*1137045276*[senna]rev.73でWindows対応？
全文検索エンジンSennaですが、
rev.73でWindowsに対応したとのこと。
Windowsバカとしては早速開発環境もVisual Studio上に移してしまおう。

早速無料ビルド環境でも設定してみますか。
１．Visual C++ 8 Express EditionとPlatform SDKをインストールして設定
以下のURLを参照
http://www.microsoft.com/japan/msdn/vstudio/express/visualc/usingpsdk/

２．mecabの0.81のバイナリ版をダウンロード、インストール。

３．mecab.hとmecab.libをsennaのvcc/mecabにコピー。

４．vccのプロジェクトファイルを開いてコンバート、
　　普通にビルド -&gt; OK

ただし、test以下はビルドされないし、
windows対応していないと思われる。
</body>
</day>
<day date="2006-01-13" title="睡眠は大事だ">
<body>
*1137143327*[開発]自分デッドロック
すっごくつまらないバグで４時間ほど悩んでしまった…
やっぱ眠いとダメなのかしら。

で、RealForceのキーボードがやってきたのですが、
むちゃくちゃ打ちやすいです。これ。
作業効率が確実に上がっている。

さすがにVAIOのキーボードはダメか…
</body>
</day>
<day date="2006-01-16" title="せいきか">
<body>
*1137379986*[技術メモ]Unicode正規化まわりを追え！
文字が変わる正規化はいいけど、
コードしたバイト数が変わる正規化は勘弁！

*1137381964*[雑談]やっぱモニタが広いと作業効率が違うわ
頼んでおいた21inchモニタがやってきた。
アナログ接続だからちょっとボヤけているけど、
やっぱこれくらいのサイズだと作業効率がむちゃ上がる。

</body>
</day>
<day date="2006-01-25" title="P H P !">
<body>
*1138189557*[技術メモ]健忘症
ひさびさにPHPを書いたらすっかり忘れている。
ちょうどよい機会なので、現代的なPHPの書き方を学習。
時代はPDOなのね。ADOを思い出すな。
PEAR::DBより速いとか。

適当にportsでPDOをブチ込むと、
適当に動いているご様子。おー。

PerlでまずxmlをDBに突っ込んで、
次に、
PHP（CLI）でMediaWiki由来のコードをだましだまし動かして
フォーマット済テキストを生テキストにしつつIndex化。

フロントエンドは・・・PHPにしよっかな。
テンプレートエンジンはHTML_Template_Flexyで。

まあ、今日で基礎固めはできたので、
あとはやるべき作業をやるだけー。

*1138189558*[技術メモ]あ！野良ports作成！
忘れていた。rtに入れておこう。。。
</body>
</day>
<day date="2006-01-26" title="移植はきっついなー">
<body>
*1138245506*[技術メモ]MediaWikiの中抜き挫折
手でパーサ書くわ！手で！
</body>
</day>
<day date="2006-02-10" title="Boofy">
<body>
昨日車の中で、
Boofyとかいっぱい書いてあるコードを見ていたら
車酔いしてしまった。

</body>
</day>
<day date="2006-02-13" title="ブログ読んでいます、と生まれて初めて言われる">
<body>
*1139852708*[ブラジル]ブラジル入りたい！を作っておく
ブラジル入りたい！ってみんなじゃんじゃん書きましょうね！！
</body>
<comments>
<comment>
<username>lestrrat</username>
<body>放置だろ、そりゃ・・・w</body>
<timestamp>1140710321</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>あはは。そうなんですかねえ、やっぱり。</body>
<timestamp>1141192917</timestamp>
</comment>
</comments>
</day>
<day date="2006-02-15" title="CSSが中途半端">
<body>
*1139983887*[はてな]CSS
CSSをデフォルトに戻す方法がわからん。
というわけで適当なデザインのまま。

*1139983888*[ブラジル]ブラジル入りたい
「ブラジル入りたい！」は全く反応がない。
放置かあ。
</body>
</day>
<day date="2006-02-22" title="富豪的富豪的">
<body>
*1140577805*[技術メモ]メモリデータベース
いいにゃー。
http://kairos.science-arts.com/index.html
</body>
</day>
<day date="2006-02-24" title="睡眠学習">
<body>
*1140761267*[技術メモ]コーディングに大切なもの
昨日オフィスの会議室で、
ひとり紙の上で設計したちょっと複雑な仕様設計。
実装し終わって、ちょっとしたバグを取っていたら、
より簡単かつ高速な設計に気づいてしまった。ぎゃー。

コーディングの質には、
睡眠が一番寄与するような気がする今日このごろ。
</body>
</day>
<day date="2006-03-01" title="ぎゃーーー">
<body>
*1141193124*[偽プログラマ列伝]
自分の偽プログラマっぷりを書いていこうと思う。

かっこ悪いバグ。
誤 : str = (char *)malloc(sizeof(char *) * length);
正 : str = (char *)malloc(sizeof(char) * length);
ううう。。。

この修正を行って、
今まで顕在化していなかった
バッファオーバーランが出たらどうしようと思ったけれども大丈夫だった。

lengthを文字数+1じゃなくて文字数とかしてたりしたら自殺してますよ。
</body>
</day>
<day date="2006-03-09" title="">
<body>
*1141884002*[Senna]Sennaのページがかっこよくなりました。
全文検索エンジンSennaのページ
http://qwik.jp/senna/
がかっこよくなりました。

で、昨日あったセミナーのレポートはこちらー。
http://labs.gree.jp/index.php?Top%2FStudy%2F20060308%2FReport

あとはオープンソースマガジンに記事が載ったようなので、
全文検索エンジンに興味のある方はぜひ一読を。

って宣伝ばっかじゃーーーー
</body>
</day>
<day date="2006-03-13" title="メモメモ">
<body>
*1142240542*[技術メモ][備忘録]めもめもめも
いつもGoogleして見つけるのがめんどいリスト。
そろそろ、ブラウザのブックマークという機能を活用してみようかしら。
flogにでも登録するかね。。。

MySQLモニタリング
http://mmeasure.sourceforge.jp/
Webアプリテスト
http://www.openqa.org/selenium-ide/

*1142240963*[技術メモ][MySQL]UDFについて
MySQLのUDF(User Defined Function)は死にゆく運命なわけですが、
一応メモを残しておこう。
間違ってたらごみん。

・テーブルからわたってくる文字列は、
　NULL Terminatedされてない場合がある。
　適宜memcpy+NULL付加する。
・error=1としてしまうと、全ての結果がNULLになってしまう。
　エラーメッセージを返してあげたほうが親切。
・initでエラーと返した場合、deinitは呼ばれない。
</body>
</day>
<day date="2006-03-14" title="楽天。。。">
<body>
*1142320199*[RPM]RPM作成
いまさらRPM作成のお勉強。
CPANでRPM::Makeというものを見つけた。
また、checkinstallというmakeの挙動を見てパッケージ作成してくれるものが
あるらしい。

*1142303063*[通販]楽天的に待たねばなるまい
携帯電話の機種変更を楽天のお店で申し込んだ。
neonの黒に機種変更じゃい！

お店はココ↓
http://www.rakuten.co.jp/melvic/
メルビック電工という会社がやっている、
mobile shop Melvic!というところです。


予約購入ということで連絡を待っているんだけど、
「忙しいから連絡はあとで」というメールがきて１週間連絡がない。


しかも、
&gt;&gt;
※在庫整理をしていたら…ひとつだけありました（-_☆）
&lt;&lt;
と称して入荷待ち商品の1円オークションを始める始末。
http://www.rakuten.co.jp/melvic/732684/733711/


つかはよ出荷するか状況を連絡せんかい、と。
クレームあった人に優先して出荷とかしてそう、
とか穿った見方をついしてしまうわん。


本業は電気設備の会社なのかー。
http://www.melvic.co.jp/home.html
</body>
</day>
<day date="2006-03-15" title="DQMent">
<body>
*1142418679*[分散]分散ファイルシステム
http://d.hatena.ne.jp/pekeq/20060222
ここを見つつ。

冗長化によるデータ保護はあんまいらん。
どちらかというとI/Oの高速化に興味あり。

*1142407322*[Senna]qwik.jp/sennaをいろいろ書き換えた
コードがひと段落したので、
Sennaのドキュメントのメンテナンスを行った。

-概要を高橋メソッドで紹介
-snippet UDF
-N-gram
-AIO/DIO
-NKFCコンパイル抑制
-インストールの細部変更

って感じで。

残りは
-low level APIでsnippetのところ追記
-他のバインディングについても記載
かにゃ。

*1142411921*[Senna]今ダウンロードできません
そいえば、dev.razil.jp移転中によりSennaのダウンロードができません。
svnサーバはsvn.razil.jpに移転したので、
そこ経由からsvnなら取得できまーす。
</body>
</day>
<day date="2006-03-16" title="なんか書こうと思っていたが">
<body>
*1142491977*[クローラ]blogクローラ
blogは更新情報が取りやすいんだけど、
そのせいで重複したページ取りに行ったりして地味にクロールが大変な気が。


そして、Blog-Crawlerっていう単語でGoogle検索すると、
xango-blogが上位に出ている罠。

*1142491472*[技術メモ]そいえば、まだ読んでない
読もう読もうと思っているのに読めてないシリーズ。
スタンフォードの講義。
http://www.stanford.edu/class/cs276/
http://www.stanford.edu/class/cs276b/

cs276のシラバスはためになるなる。


こっからたどれるところにも面白げなネタが。
むむう。。。

*1142491473*書こうと思っていたネタを忘れる
健忘症。。。

</body>
</day>
<day date="2006-03-17" title="">
<body>
*1142554978*[全文検索]IFilterってあるのね。
Microsoft Indexing Service用の文書フィルタみたい。
これ使えばデスクトップ全文検索もできるのね。
http://www.hitachi.co.jp/Prod/comp/soft1/textsearch/faq/yougo/eiji.html
ただ、デスクトップの場合はインターフェースとか、
インデキシングの負荷分散とか、
そういう細かいところこそが重要だったりするからなあ。

*1142555226*[偽プログラマ列伝]メモメモ
http://www.thefreecountry.com/programming/debuggers.shtml
から
Splint(旧Lclint)
http://www.splint.org/
コードチェックツール。
コンピュータに出来ることはやらせてしまえ。
</body>
</day>
<day date="2006-03-20" title="東京タワーが見える家なのにＴＶの映りが悪い">
<body>
*1142837770* ドキュメント書くことがおおいので
最近ドキュメントを書くことが多い。
この記事を参考に、Sennaドキュメントに表を導入してみたりした。
http://jibun.atmarkit.co.jp/lskill01/rensai/kokugo07/kokugo01.html

*1142839337* [MySQL]mMeasureなんだけど
新しいバージョンがあるみたい。
http://mysql.timedia.co.jp/mmeasure/
早く公開されないかにゃー。。。
こっちのほうが見やすい。

[訂正]
こっちのほうがバージョン古いのね。。。

*1142846236*[MySQL]続mMeasure
&gt;&gt;
width below 10 pixels
&lt;&lt;
っていうエラーがいっぱい出てグラフが出ず。
むうう。ちゃんと追うのめんどい。
</body>
</day>
<day date="2006-03-22" title="さらに磨きがかかる偽プログラマっぷり">
<body>
*1143022117*[偽プログラマ列伝]off_tめ。。。
つい先日、やっちゃいました。配列の境界１個オーバー。
いやあああああああ。


というのはいいとして（よくねー）、
今日はincludeの順番によるバグに１時間ほど悩まされる。
無駄なテストプログラム群。ああああ。


ま、何をしたかったかといいますと、
2GB以上のファイル扱いたい場合、
LFSサポートをONにしたかったわけです。


configure.acにAC_SYS_LARGEFILEを書いたりするわけですが、
（とか必要に応じてAC_FUNC_FSEEKOやAC_CHECK_SIZEOF( off_t )をまぜてね）
その結果できていたconfig.hのincludeが、
stdio.hのincludeより遅かったという超ダメな感じ。


で、途中でググる先生にお伺いをかけたときに見つけたページ。
http://charm.cs.uiuc.edu/users/olawlor/ref/examples/unix/index.html
じ、地味なプログラム群。。。

*1143024466*[技術メモ]でっかいファイルを高速に圧縮せねばならんとき
意外と知らない人が多いので書いてみる。

でっかいファイルを高速に圧縮したいならLZO。
http://www.oberhumer.com/opensource/lzo/
ページにセンスがないのがアレなんですが。。。
早くて圧縮率もまあそこそこです。


MySQLでただ読み込むだけのフィールドがある場合に、
bzip2とかで圧縮して入れたり、
MySQLのcompress関数（だっけ？zlib使うやつ）
でパックしたデータをblobで入れたりすることがあります。
lzoだと早いのでこういう用途にもお勧め。


手軽にやるには、UDFを使うといいよ！
http://empyrean.lib.ndsu.nodak.edu/~nem/mysql/udf/
のmysql_udf_lzoをドゾー。
</body>
</day>
<day date="2006-03-23" title="さーばおもり">
<body>
*1143083788*[FreeBSD]バイナリバイナリ
学部のときCORBAの研究（といえるのかアレは・・・）をしたのだが、
そのときは複数マシンを個々にFreeBSDを新規インストールして、
担当教官の鈴木正人様に「dumpしてrestoreすりゃいいじゃん！！」
といわれたものだ。という思い出話も含めて。


Single System, Multiple Machines 
http://uyota.asablo.jp/blog/2006/03/19/294745

*1143085833*[Perl]懇親会で懇親できない
懇親会で懇親できない
http://kotonoha.cc/no/15025


で、申し込みをするかどうかを悩んでおるのだよ。
餃子は食べたいけどな！
http://tokyo.yapcasia.org/blog/ja/2006/03/post_4.html

*1143103051*[FreeBSD]名前を忘れる
そういえば、いつも名前を忘れてしまうportsnap。
http://wiki.fdiary.net/BSDmad/?portsnap


名前を忘れると検索も難しいんよね。。。
FreeBSD 6から標準になったというのに、
みんなCVSupを使い続けているというお話。
</body>
</day>
<day date="2006-03-24" title="ソケット。">
<body>
*1143181186*[Debian][MySQL]DebianパッケージのMySQLのsocket
DebianのパッケージのMySQLライブラリに依存するやつ、
デフォルトのsocketが/var/run/mysqld/mysqld.sockになっている。


というわけで、MySQL 4.0.26を自前ビルドする場合には、
 --with-unix-socket-path=/var/run/mysqld/mysqld.sock
をconfigure時に指定してあげると、
既存のパッケージが使えて便利。
（もちろん既存のパッケージでも、
　ソケットを指定してあげれば使えます）


普通だと/tmp/mysql.sockになっちゃう。

*1143188619*[Perl]本当のワタシ　デビュー！
とか適当なことをいってみるが、


[Perl] 作成したモジュールをCPANで公開する手順
http://www.kawa.net/works/perl/tips/cpan.html


perlnewmod - 新しいモジュールを配布するには
http://perldoc.jp/docs/perl/5.8.0/perlnewmod.pod


というデビューを予定してるだけ。
や、YAPCのためなんかじゃないんだからね！！！

*1143212163*[Senna]難しいよなあ。
嘘を嘘と見抜けない人には(Sennaをビルドするのは)難しい、
と弊社取締役の声マネをしてみる。
慣れていても、autoconfを忘れたりしちゃうし、
結構環境依存のところが多いな。。。


つか、早くバイナリパッケージを作るべきだな。
s・t・a・t・i・c！s・t・a・t・i・c！（字余りぎみ

</body>
<comments>
<comment>
<username>vkgtaro</username>
<body>はじめまして！先ほどはコメントありがとうございました。&lt;br&gt;&lt;br&gt;実は自分もデビューを予定していたり。PAUSE アカウントも取得済。&lt;br&gt;http://search.cpan.org/~taro/</body>
<timestamp>1143548928</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>こちらでは、はじめましてー。&lt;br&gt;&lt;br&gt;おおお、同期ですね（！？）&lt;br&gt;PAUSEは先ほど承認がおりましたー。&lt;br&gt;http://search.cpan.org/~gunya/の予定。</body>
<timestamp>1143586836</timestamp>
</comment>
</comments>
</day>
<day date="2006-03-25" title="">
<body>
*1143266830*[ドメイン]autogen.sh
今日も１つドメインをとってしまった。。。
サービス書く暇あるかなあ。


で、autogen.shってドメインは開いているらしいですよ！
いらねーーーー
</body>
</day>
<day date="2006-03-28" title="また食べすぎ。。。">
<body>
*1143525293*[雑談]はてなブックマークでコレクション
はてなブックマークの人気エントリー、
確かに面白い記事が多いなあ。


でも、こういう人気エントリを
ブックマークシステムに整理していれると、
それだけで自分が賢くなってしまったような感じがして、
ちょっとコワいな。


言説や情報をコレクションしている、
みたいな感覚になっちゃいそうで。
本棚に読みもしない百貨事典を飾っちゃうのに近いかも。

*1143536636*[雑談][検索エンジン]そういえば
DRAGONなんてあったなあ。。。


日本のサーチエンジンの歴史
http://shikariki.com/history/se_history.html

*1143540509*[検索]タグの検索
Tagの検索にMySQLの全文検索を使う
http://blog.nomadscafe.jp/archives/000643.html


SEN_INDEX_SPLIT_SPACEを早く実装せよという指令が来ているようです！！！
</body>
</day>
<day date="2006-03-30" title="">
<body>
*1143695705*[Perl]YAPCの感想
-外国人組と日本人組の温度差があるような気が
-やっぱプレゼンに使うフォントは大事。みかちゃんはちょっとキツいよ。。。
-Haskell、ひさびさにさわってみようかな

*1143695706*[Senna]Tagの検索にMySQLの全文検索とSennaを使う
revision 105で対応。
MySQLパッチのsen_index_create関数の第３引数に
SEN_INDEX_DELIMITED
を入れると吉かも。テストはしてないですが。。。
</body>
</day>
<day date="2006-03-31" title="">
<body>
*1143782584*[Perl]昨日書いたYAPCの感想
マイナスな感想ばかり書いてしまった。。。
折角参加させてもらったのに、
今読むとちょっとヒドいよなぁ。反省。

*1143783600*[Lucene][全文検索]こういうツール必要だよねえ。
Luke - Luceneインデックスブラウザ
http://lucene.jugem.jp/?eid=69


動作を解析したりするときに便利だにゃー。
Sennaいじめてくんを、
いじめるだけじゃなくて管理が出来るようにもしよう。

*1143784625*[技術メモ]FireBugやるなあ。
FireBug の新しいバージョンが便利すぎる件について
http://d.hatena.ne.jp/amachang/20060331/1143774045


素敵素敵。
でも、これを見てふと気づいたんだが、
最近Webアプリケーション書いてないよ。。。


昔からデバッガというものが好きな性格。
割り込みベクタを書き換えてフックしたり、
ちょこちょこ変数変えたり、
こういう遊びは今でも楽しいと思えるなあ。


特に美しい（？）インストラクションの並びを見ると
わくわくするわい。

*1143802029*[Ruby]Rubyで半角文字を全角文字に変換 without NKF
&lt;del datetime=&quot;2006-04-02T01:54:29+09:00&quot;&gt;NKFでやるとなんだか挙動がおかしいので、
($KCODEもちゃんと指定してるのににゃー）&lt;/del&gt;
（最終的に動作しましたー。）


半角文字を全角に変換するRuby関数　
http://www.yohasebe.com/diary/diary_search.php?id=137
を参考に。


そうそう、日本語のKWICって地味に大変なんですよー。
</body>
<comments>
<comment>
<username>nurse</username>
<body>こんにちは、Ruby/NKFのメンテナをやっている成瀬と申します。で、具体的にどこがおかしいです？</body>
<timestamp>1143827665</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>コメントありがとうございます！&lt;br&gt;はじめは化けていたのですが、&lt;br&gt;いろいろといじっていたらちゃんと通るようになりました。&lt;br&gt;というわけで、僕の使い方が何かマズかったのだと思います。&lt;br&gt;訂正しておきました。&lt;br&gt;&lt;br&gt;ところで、第１オプションはハイフンがあるべきなんでしょうか。&lt;br&gt;Rubyページのドキュメントを見ると入れるべきのように見えますが、&lt;br&gt;ネット上に転がっている用例やRuby MLの投稿を見ると&lt;br&gt;ないやつがあったりとちょっと混乱ぎみです。</body>
<timestamp>1143910796</timestamp>
</comment>
<comment>
<username>nurse</username>
<body>第一オプションはハイフン必須ですね。入れないと無視されてしまいます。</body>
<timestamp>1143916106</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>なるほど。情報ありがとうございます。&lt;br&gt;&lt;br&gt;用例を書いた方は、無視されても自動判別が効いてうまくいっていたので気づかないパターンだったのかもしれませんね。</body>
<timestamp>1143921571</timestamp>
</comment>
<comment>
<username>nurse</username>
<body>うーん、読み込みはともかく、出力文字コードは指定しないとJISコードになってしまうので、たぶん書いた方はそのコードをテストなさっていないのだと思います。</body>
<timestamp>1144053391</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>フォローありがとうございます。&lt;br&gt;僕のほうでもまとめてみました。&lt;br&gt;&lt;br&gt;nkf正しい用例&lt;br&gt;http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-list/25839&lt;br&gt;http://amaken-boo.com/cgi-bin/wiki/wiki.cgi?Ruby%A4%CE%A5%E1%A5%E2#i10&lt;br&gt;http://www.tdiary.org/20021113.html&lt;br&gt;http://homepage1.nifty.com/~tetsu/ruby/tips/kanji.html&lt;br&gt;&lt;br&gt;nkf間違った用例&lt;br&gt;http://www.moriq.com/ruby/kana/index.html&lt;br&gt;（間違った用例はこれだけでした）&lt;br&gt;&lt;br&gt;他の実装例&lt;br&gt;http://www.moodindigo.org/blog/archives/000278.html&lt;br&gt;&lt;br&gt;ほかにも&lt;br&gt;KAKASIを使ったりする方法もあり。</body>
<timestamp>1144084786</timestamp>
</comment>
<comment>
<username>moriq</username>
<body>nkf間違った用例を直しました。ご指摘感謝。</body>
<timestamp>1223464293</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>&gt;&gt;moriqさん&lt;br&gt;補足＆修正ありがとうございます！！</body>
<timestamp>1223469431</timestamp>
</comment>
</comments>
</day>
<day date="2006-04-05" title="">
<body>
*1144241506*[偽プログラマ列伝]今日のかっこ悪いバグ
&gt;&gt;
if (!(cond = SEN_MALLOC(sizeof(_snip_cond)))) {
　return sen_memory_exhausted;
}
memset(cond, 0, sizeof(cond));
&lt;&lt;
のmemsetは
&gt;&gt;
memset(cond, 0, sizeof(_snip_cond));
&lt;&lt;
だよね。


ひどい。これはひどい。
</body>
</day>
<day date="2006-04-10" title="">
<body>
*1144652763*[雑談]歯医者
日曜に歯が痛みだした。ずきずきずき。
というわけで渋谷に出て病院を探すも、
日曜にやっている歯医者、なかなかない。


やっとのこと、
日曜もやっている歯医者を探し当てるも、
「今から治療はできない」と言われてしまう。


そのかわり、
[http://www.city.shibuya.tokyo.jp/est/higashi_plaza.html:title=ひがし健康プラザ]
というのを紹介してもらって行ってきた。


前の番のお兄ちゃんがやたら医者にかみついているのが印象的だった。
まあ、そのおかげでかなり待たされたのだが。


レントゲン撮って、薬を塗っただけで終了ー。
抗生物質と頓服薬もらった。。


で、今日もいたたたたたた。


というわけで今日も歯医者行きます。
自己管理大事だー。。。


その、ひがし健康プラザにあった情報。
[http://www.himawari.metro.tokyo.jp/qq/qq13tomnlt.asp:title=東京都医療機関案内サービス”ひまわり”]
日曜やってる歯科を探すのに便利。

*1144680828*[雑談]歯医者２
歯が痛くて痛くて、偽プログラマとしても業務が遂行できなさそうなので
歯医者に行ったわけですが、
昨日&lt;del datetime=&quot;2006-04-11T00:00:45+09:00&quot;&gt;受信&lt;/del&gt;受診した歯医者の説明が間違っていることが判明いたしました。


昨日の歯医者さんは、一番奥の歯の近辺のレントゲンだけを撮って、
「奥歯の側面にある溝に食料が溜まっているから歯茎が腫れたのだ」
という説明でした。


今回、すべての歯のレントゲンを撮ったところ、
「一番奥歯の一個前の歯の、金歯の下で虫歯が進行して、神経が死んでいる」
ということだそうな。
で、膿の行き場がなくて歯茎のほうに出てきて腫れているとのこと。


で、まあ、正しい原因が分かったのはよかったのですが、
上記の説明のあと、麻酔もかけずに、
いきなりガリガリグリグリやられてびっくり。
しかも、どうやら神経は１本くらい死んでいなかったらしく、
激痛。ぎゃーーーーー。


でも、なんとか原因が分かってよかった。
ちなみに、帰りに寄った調剤薬局には、
昨日、ひがし健康プラザで担当薬剤師だった人がいました。
彼は僕のこと覚えていなかったけど。運命かしらね。

*1144680829*[偽プログラマ列伝]Cのお勉強 Cのお勉強
&gt;&gt;
if (bmres[j].end_offset &gt; bmres[i].start_offset + snip-&gt;width) {
  break;
}
&lt;&lt;
は、
&gt;&gt;
if (bmres[j].end_offset &gt; bmres[i].start_offset + snip-&gt;width) {
  continue;
}
&lt;&lt;
でした。


そ、そろそろ、ここのブログから社名隠そうかしら。。。
かっこ悪いバグを量産して恥ずかしい。
</body>
</day>
<day date="2006-04-11" title="">
<body>
*1144728006*[技術メモ]Apache 2.2
Apache 2.2のWindows版の公式バイナリってまだないのかにゃ？
とりあえずココで見つけたけれども。。。
http://www.apachelounge.com/download/

</body>
</day>
<day date="2006-04-17" title="">
<body>
*1145267141*[技術メモ]ほのぼの
サラ金業者の取り立てが問題になっている中で。
ほのぼのレイクのサイトがちょっと面白いと思った。
http://www.want-to.jp/
</body>
</day>
<day date="2006-04-20" title="">
<body>
*1145545193*[MySQL]ふうむ。
MySQLでCHAR(1)型のフィールド、例えばflagがあったとしよう。


SELECT * FROM tekito WHERE flag = 0
というクエリを実行すると、
全レコードがひっかかる。
つまり、flag = 0は常にTRUEと評価されるようだ。


どこかにドキュメントあるのかしら。
</body>
</day>
<day date="2006-05-01" title="">
<body>
*1146484607*[技術メモ]メールサーバって大変よね
自宅サーバで自ドメインのメールをホストしている。
転送先は、[https://www.iijmio.jp/guide/outline/mm/:title=IIJmioのセーフティメール]と、GMail。


IIJmioのメールは、容量無制限なのはいい。
しかし、添付ファイルの容量がMax 10MB。
GMailもMax 10MB。
いまどき大きな添付ファイルを送るというケースはそんなにはないが、
今回Windows版のSennaのソースコードを送ってもらった際に
エラーメールが返ってきていた模様。


というわけで、
-POP/SMTP over SSLに対応していること
-qmailのアドレス拡張を使いまくっているので、同等のことができること
-できれば、DNSのMXで指定してあげるだけで、メールを受け取ってくれること


VPSのサービスを探したりしたんだけど、
結局[http://fastmail.fm/:title=fastmail.fm]にした。
添付ファイル容量は50MBまで。


IIJmioの添付ファイル容量が50MBまでなって欲しかったなあ。

*1146484608*[雑談]楽天プラチナ会員になるらしい。
メールチェックしていたら判明。
買いすぎという話やな。
</body>
</day>
<day date="2006-05-10" title="そっかそっか">
<body>
*1147233831*[MySQL]U・D・F!U・D・F!
MySQLのUDFを使うとクエリキャッシュに乗らなくなるのね。
ああ。。。呼び出しごとに結果変わる可能性あるもんな。
結果変わらないのでキャッシュしていいよフラグを立てたいな。
UDFじゃなくてMySQL本体に関数として組み込むのがいいのかしら。。

</body>
</day>
<day date="2006-05-11" title="">
<body>
*1147324785*[雑談]Amazonのシステムは巨大で複雑
Amazonのシステムってむちゃくちゃ複雑そう。
Webのシステムだけでも複雑なのに、
バックの物流システムなんて、考えただけで、ひゃー、ってなもんだ。


Amazonで5/3に行った注文で、
5/5に発送予定となっている注文があった。
在庫はあるみたいなのにまだ発送が開始されないので、
ためしにメールで聞いてみた。


するとお返事が。
&gt;&gt;
Amazon.co.jpにお問い合わせいただき、ありがとうございます。
 
このたびは、ご注文の商品の発送が遅れており、ご迷惑をおかけしておりますことを
お詫び申し上げます。

お客様のご注文について調査いたしましたところ、こちらの商品につきましては、当
初の予定よりも商品の発送が遅れていたことが判明いたしました。この件につきまし
て担当部署にて確認いたしましたところ、発送開始の情報が認識されておらず、発送
手続きが正常に開始されておりませんでした。

こちらのご注文番号(#order-order-order-order)に関しましては、通常であれば、発
送開始の情報が認識されていないため早急にキャンセルさせていただくところではご
ざいますが、システムの都合上、キャンセルに大変お時間がかかってしまう恐れがあ
るため、こちらのご注文に適用されておりますギフト券を、キャンセル処理が完了す
るまでお客さまのアカウント上にご返却申し上げることができません。

また、ご注文のキャンセル以外の方法といたしまして、担当部署にて、商品の発送を
促すよう作業を行うことも可能でございますが、商品がいつ発送されるかのご案内が
現在のところ大変難しくなっております。また、ご案内申し上げるのが大変心苦しい
のですが、こちらが実際に発送されるかどうかも現時点においては判断ができません。

上記の理由により、お客様には大変ご不便をおかけしておりますが、まずはお客さま
のご意向をお伺いいたしたく、商品のキャンセルをご希望されるか、もしくは発送を
お待ちいただくか、どちらの方法をお取りいただくかのご連絡を頂戴いたしますよう
お願い申し上げます。

このたびはご注文商品の発送に際し、多大なご迷惑とご不便をおかけしておりますこ
とを重ねてお詫び申し上げます。大変お手数ではございますが、ご案内申し上げまし
た事項に関し、ご返答をいただけますようお願い申し上げます。
 
お客様よりのご連絡をお待ち申し上げております。
Amazon.co.jpのまたのご利用を、心よりお待ち申し上げております。

恐れ入りますが、必要情報を以下のリンクにあるフォームにご記入の上、送信してく
ださい。

http://www.amazon.co.jp/rsvp-mi?query=parameter

誠に申し訳ございませんが、こちらのＥメールは配信専用のアドレスとなっておりま
すため、お問い合わせ等のメッセージを受け付けることができません。恐れ入ります
が、上記のリンクから必要情報をお送りください。なお、新規のお問い合わせの場合
は、下記のURLからカスタマーサービスにＥメールでお問い合わせください。

http://www.amazon.co.jp/contact-us/

Amazon.co.jp
カスタマーサービス
担当者名
&lt;&lt;


な、なんか大変そう。


この注文の場合、
注文履歴画面がおかしくて、
Amazonへの注文なのに、
マーケットプレイスの注文に出るボタンが出たりしているのだ。
たぶんシステムのバグじゃないのかなあ。
担当者レベルでどうにかするのは難しそう。


特に、
&gt;&gt;
ご案内申し上げるのが大変心苦しいのですが、
こちらが実際に発送されるかどうかも現時点においては判断ができません。
&lt;&lt;
は正直すぎ。システムから外れるととたんに大変になるのね。
とりあえず待ってみまーす！来るのかなあ。。
</body>
<comments>
<comment>
<username>ayabooooooo</username>
<body>うーん、たぶんしばらくしてまた「お待たせして申し訳ありません。出荷のめどがたっておりません」なんてメールがきてキャンセルするか、発送を待つのかを問われそう。。。</body>
<timestamp>1147456770</timestamp>
</comment>
</comments>
</day>
<day date="2006-05-24" title="">
<body>
*1148495231*[Debian]パッケージパッケージ
debパッケージ作らないとなあ、
あとはDebianのaptで依存関係で困るケースが何度があったので、
以下の書籍を購入。
http://www.amazon.co.jp/exec/obidos/ASIN/477412768X/ref=ase_titechbbs-22/


最近checkinstallでrpmを作りまくっているのですが、
ちゃんとしたrpmの作り方も学ばねば。


Alien package converter
http://kitenet.net/programs/alien/
でdebから変換できるみたいだけど。。。どうなんだろ。

*1148495232*[雑談]Amazonは
まだ発送されない。じっと待つ。

*1148495233*[開発メモ]mmapの仮想化
mmapをWindowsのMapViewOfFileを使ってやろう、
と思って参考にしようと思ったら、
sufaryやH.E.(厳密にはqdbmだが)の例が出てくる出てくる。


そして、ひさびさに触るWin32 APIは前より複雑怪奇になっている、気がする。
それより、vcprojに1文字も現れてないのに追加されているリンカオプション、
出所はどこじゃーーー
</body>
</day>
<day date="2006-05-26" title="">
<body>
*1148646586*[開発メモ]mmapをWindowsで
WindowsのMapViewOfFile(Ex)を使って
mmap同等の機能を実現しようとしたときに、
mappingしてままファイルサイズの変更はできない。


というわけで、大きめにmmapしておいて、
随時追記していくような使い方をすると、
最初にmappingしたサイズぶんだけのファイルができてしまう。


実際、
Pythonのmmapmodule.c中では、
mapのresizeを行う際にいったんmappingを閉じて、
ファイルサイズを大きくして、
また開いている。


素敵じゃない。


cygwinのmmap.ccを見たところ、
Windowsでも結構簡単に実現できるんじゃね？
と思ったけどそれは早計。


ソース中のコメントをそのままはってみる。
&gt;&gt;
      /* If the requested length is bigger than the file size, the
	 remainder is created as anonymous mapping.  Actually two
	 mappings are created, first the reminder from the file end to
	 the next 64K boundary as accessible pages with the same
	 protection as the file's pages, then as much pages as necessary
	 to accomodate the requested length, but as reserved pages which
	 raise a SIGBUS when trying to access them.  AT_ROUND_TO_PAGE
	 and page protection on shared pages is only supported by 32 bit NT,
	 so don't even try on 9x and in WOW64.  This is accomplished by not
	 setting orig_len on 9x and in WOW64 above. */
&lt;&lt;
WinNT以降すべて動くならがんばろうという気になるが、
WOW64で動かないのはちと微妙。
うーん。。。
まあ、MySQLはnative 64bit対応だし、
Sennaも（がんばれば）native 64bit対応にできるちゃあできる。

</body>
</day>
<day date="2006-05-30" title="">
<body>
*1148993897*[開発メモ][Windows]リークをチェック
ずっと前使ったDevPartnerProの中のBoundsCheckerは便利だった。
ま、当時はVC6のSTLでリークでもないものをリークと報告して
ウザかったりもしたのだが。

で、メモリリーク対策を探していたんだけど、
http://piza.2ch.net/tech/kako/978/978705727.html
の16,17
http://piza.2ch.net/log/prog/kako/946/946364904.html
の11
のような方法があるのね。知らんかった。

&gt;&gt;
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options
にプログラム名(DLL名)でキーを作る。
GlobalFlag(REG_SZ) &quot;0x02000000&quot;
でヒープチェック有効。
PageHeapFlags(REG_SZ) &quot;1&quot;
でさらに厳密なヒープチェック有効。ただしこれはメモリ食う。
&lt;&lt;

この本に詳細が載っているらしい。英語読むのめんどいずら。
ISBN:020170238X:detail

</body>
</day>
<day date="2006-06-03" title="">
<body>
*1149303201*[開発メモ][Windows]Visual Studioでのビットフィールド
gccには-mwindowsの場合-mms-bitfieldsが指定できるらしいけど、
ターゲットがWindowsでない場合はダメっぽい。

&gt;&gt;
`-mms-bitfields'
     If set, RECORD_TYPE bit-fields are laid out following the rules of
     Microsoft Visual C/C++, namely: (i) a bit-field won't share the
     same storage unit with the previous bit-field if their underlying
     types have different sizes, and the bit-field will be aligned to
     the highest alignment of the underlying types of itself and of the
     previous bit-field; (ii) a zero-sized bit-field will affect the
     alignment of the whole enclosing structure, even if it is unnamed;
     except that (iii) a zero-sized bit-field will be disregarded
     unless it follows another bit-field of non-zero size. Currently,
     this option is supported on `cygwin' and `mingw32'.
&lt;&lt;

*1149303392*[開発メモ][RPM]買ってはみたけど
RPMを（checkinstallとかalienとか使わずにちゃんと）作りたいので、
以下の書籍を購入。
でも読み進めるのが大変そう。。

ISBN:4797324937:detail

*1149356842*[開発メモ]日本語での文字列検索
・日本語で（アルファベットが多い）
・実用上（重要！）高速な
文字列検索アルゴリズムねえかなあ。
…ちゃんと計測してみっか。。

ISBN:0954300645:detail
</body>
</day>
<day date="2006-06-05" title="">
<body>
*1149493964*[開発メモ]プロファイラ
gprofで、ライブラリ・実行ファイルともにCFLAGS,LDFLAGSに-pgをつけたにもかかわらず、
ライブラリのほうまで追ってくれない。
ちゃんと調べれば方法があるんだろうけど、
めんどくさいのでqprof入れてみる。
</body>
</day>
<day date="2006-06-08" title="">
<body>
*1149737058*[開発メモ]開発環境をUbuntuに移す
oprofile + prospectを試そうと思ったけど、
今までのDebianじゃカーネルが古すぎるし、
かといってカーネル再構築はめんどいので
UbuntuのVMWareイメージを落としてそれを開発環境に。
gccが4.0なのね。ワオワオ。


んで、いろんなプロファイラが紹介されてます。
http://d.hatena.ne.jp/shinichiro_h/20060304#1141411168


sysprofも試してみるかねえ。

追記：
vmlinuzからvmlinuxを取り出すのはどうすりゃええんじゃー。
prospectはkernel 2.6に対応してないみたい。。

*1149737611*[開発メモ]gcc-4.0のwarning
厳しくなってる。具体的にはsigned引数にunsignedを渡すとwarning。
Visual C++のコンパイラみたいや。
そして、Sennaのnfkc.cのコンパイルに失敗。。。

&gt;&gt;
gcc: Internal error: Killed (program cc1)
Please submit a full bug report.
See &lt;URL:http://gcc.gnu.org/bugs.html&gt; for instructions.
For Debian GNU/Linux specific bug reporting instructions, see
&lt;URL:file:///usr/share/doc/gcc-4.0/README.Bugs&gt;.
&lt;&lt;
がびーん。。。
</body>
</day>
<day date="2006-06-09" title="">
<body>
*1149844694*[開発メモ]jgrepが異様に早い件について。
Debianにgrep-jaというパッケージがあり、
これを入れると/usr/bin/jgrepができる。
これが異常に早い。なんだろう。。。
というわけで調査中でございますよ。


http://http.debian.or.jp/debian-jp/dists/stable-jp/main/source/base/grep-ja_2.3.orig.tar.gz
http://http.debian.or.jp/debian-jp/dists/stable-jp/main/source/base/grep-ja_2.3-4.diff.gz
をとってきて、がっちゃんこという感じで。

*1149874982*[開発メモ][Linux]
OProfile、ちゃんと入っているはずなのに動いてない。。。
おかしいなー、とずっと思っていて、
ふとピーン、と。


http://www.daionet.gr.jp/~knok/diary/?200603c&amp;amp;to=200603281#200603281
おおおお。やっぱりそうか。。。。
悲しいぜ。かなり悲しいぜ。

*1149882941*[開発メモ]つーわけで
CFLAGS='-pg' ./configureしましたよ。
（実機サーバで）
grepは2.5.1aと2.3、jgrepは2.3ベースのやつ。


んで、153個のファイル（バイナリあり、日本語テキストばかり）を対象に検索。
fgrepとjgrep(普通のgrepだと、1単語でもDFA作っちゃう)をgprofで比較するとこちら。


fgrep 2.3
&gt;|
 time   seconds   seconds    calls  Ts/call  Ts/call  name
  0.00      0.00     0.00      317     0.00     0.00  fillbuf
  0.00      0.00     0.00      204     0.00     0.00  Fexecute
  0.00      0.00     0.00      204     0.00     0.00  bmexec
  0.00      0.00     0.00      204     0.00     0.00  grepbuf
  0.00      0.00     0.00      204     0.00     0.00  kwsexec
  0.00      0.00     0.00      154     0.00     0.00  grep
  0.00      0.00     0.00      154     0.00     0.00  grepfile
  0.00      0.00     0.00      154     0.00     0.00  reset
  0.00      0.00     0.00        3     0.00     0.00  page_alloc
  0.00      0.00     0.00        1     0.00     0.00  Fcompile
  0.00      0.00     0.00        1     0.00     0.00  kwsalloc
  0.00      0.00     0.00        1     0.00     0.00  kwsincr
  0.00      0.00     0.00        1     0.00     0.00  kwsinit
  0.00      0.00     0.00        1     0.00     0.00  kwsprep
  0.00      0.00     0.00        1     0.00     0.00  setmatcher
  0.00      0.00     0.00        1     0.00     0.00  xmalloc
|&lt;

fgrep 2.5.1a
&gt;|
 time   seconds   seconds    calls  us/call  us/call  name
 75.00      0.03     0.03      221   135.75   135.75  check_multibyte_string
 25.00      0.04     0.01      221    45.25    45.25  bmexec
  0.00      0.04     0.00      335     0.00     0.00  fillbuf
  0.00      0.04     0.00      221     0.00   181.01  Fexecute
  0.00      0.04     0.00      221     0.00   181.01  grepbuf
  0.00      0.04     0.00      221     0.00    45.25  kwsexec
  0.00      0.04     0.00      153     0.00   261.45  grep
  0.00      0.04     0.00      153     0.00   261.45  grepfile
  0.00      0.04     0.00      153     0.00     0.00  reset
  0.00      0.04     0.00        5     0.00     0.00  xmalloc
  0.00      0.04     0.00        1     0.00     0.00  Fcompile
  0.00      0.04     0.00        1     0.00     0.00  close_stdout_status
  0.00      0.04     0.00        1     0.00     0.00  get_nondigit_option
  0.00      0.04     0.00        1     0.00     0.00  install_matcher
  0.00      0.04     0.00        1     0.00     0.00  kwsalloc
  0.00      0.04     0.00        1     0.00     0.00  kwsincr
  0.00      0.04     0.00        1     0.00     0.00  kwsinit
  0.00      0.04     0.00        1     0.00     0.00  kwsprep
  0.00      0.04     0.00        1     0.00     0.00  prepend_default_options
  0.00      0.04     0.00        1     0.00     0.00  setmatcher
|&lt;


jgrep
&gt;|
 time   seconds   seconds    calls  Ts/call  Ts/call  name
  0.00      0.00     0.00      315     0.00     0.00  fillbuf
  0.00      0.00     0.00      203     0.00     0.00  EGexecute
  0.00      0.00     0.00      203     0.00     0.00  bmexec
  0.00      0.00     0.00      203     0.00     0.00  grepbuf
  0.00      0.00     0.00      203     0.00     0.00  kwsexec
  0.00      0.00     0.00      153     0.00     0.00  grep
  0.00      0.00     0.00      153     0.00     0.00  grepfile
  0.00      0.00     0.00      153     0.00     0.00  reset
  0.00      0.00     0.00       40     0.00     0.00  ifree
  0.00      0.00     0.00       25     0.00     0.00  icatalloc
  0.00      0.00     0.00       22     0.00     0.00  xmalloc
  0.00      0.00     0.00       18     0.00     0.00  istrstr
  0.00      0.00     0.00       15     0.00     0.00  copy
  0.00      0.00     0.00       14     0.00     0.00  freelist
  0.00      0.00     0.00       13     0.00     0.00  icpyalloc
  0.00      0.00     0.00       10     0.00     0.00  enlist
  0.00      0.00     0.00        9     0.00     0.00  addtok
  0.00      0.00     0.00        6     0.00     0.00  epsclosure
  0.00      0.00     0.00        5     0.00     0.00  lex
  0.00      0.00     0.00        4     0.00     0.00  atom
  0.00      0.00     0.00        4     0.00     0.00  closure
  0.00      0.00     0.00        4     0.00     0.00  merge
  0.00      0.00     0.00        4     0.00     0.00  resetmust
  0.00      0.00     0.00        4     0.00     0.00  xrealloc
  0.00      0.00     0.00        3     0.00     0.00  addlists
  0.00      0.00     0.00        3     0.00     0.00  page_alloc
  0.00      0.00     0.00        1     0.00     0.00  Gcompile
  0.00      0.00     0.00        1     0.00     0.00  branch
  0.00      0.00     0.00        1     0.00     0.00  dfaanalyze
  0.00      0.00     0.00        1     0.00     0.00  dfacomp
  0.00      0.00     0.00        1     0.00     0.00  dfainit
  0.00      0.00     0.00        1     0.00     0.00  dfamust
  0.00      0.00     0.00        1     0.00     0.00  dfaparse
  0.00      0.00     0.00        1     0.00     0.00  dfasyntax
  0.00      0.00     0.00        1     0.00     0.00  insert
  0.00      0.00     0.00        1     0.00     0.00  kwsalloc
  0.00      0.00     0.00        1     0.00     0.00  kwsincr
  0.00      0.00     0.00        1     0.00     0.00  kwsinit
  0.00      0.00     0.00        1     0.00     0.00  kwsmusts
  0.00      0.00     0.00        1     0.00     0.00  kwsprep
  0.00      0.00     0.00        1     0.00     0.00  regexp
  0.00      0.00     0.00        1     0.00     0.00  setmatcher
  0.00      0.00     0.00        1     0.00     0.00  state_index
  0.00      0.00     0.00        1     0.00     0.00  xcalloc
  0.00      0.00     0.00        1     0.00     0.00  xmalloc
|&lt;

というわけで、
grepがバージョンあがってマルチバイト対応が
しっかりして足を引っ張っている模様。


しかし、bmexecの速度もえらく違います。
bmexecの中身はそんなに変わっていないのに。。。
</body>
</day>
<day date="2006-06-10" title="">
<body>
*1149941264*[開発メモ]Delphi 2005 Personal

Delphiでもやってみるかね、
と思いPersonal版をダウンロードしようと思った


ネット上にはver.6まで無料で7以降はそうではない、
という情報が飛び交っているけど、
ver.7, ver.2005も無料。
http://www.borland.com/downloads/download_delphi.html


ただし！！！


&lt;span style=&quot;font-weight:bold;&quot;&gt;ライセンスキーは取得できるけど、
バイナリがどこにも落ちてない。。。&lt;/span&gt;


http://perfectfool.jugem.jp/?eid=38
フランス語版のバイナリなら手に入るらしいが。。。やだーそんなんやだー。
英語版をーーー。

*1149956587*[開発メモ]gprofコンパチなプロファイリングを動的に

一応メモ。実機でoprofile使うのがいいと思う今日このごろ。
http://moss.csc.ncsu.edu/~mueller/codeopt/codeopt05/projects/www4.ncsu.edu/~jsvarma/csc791a/index.htm
</body>
</day>
<day date="2006-06-14" title="寝違えた">
<body>
*1150263852*[検索エンジン]がんばれー
http://headlines.yahoo.co.jp/hl?a=20060614-00000033-mai-bus_all
応援しとります。
で、どの方式にするのかしら。やっぱり転置インデックス？

*1150286140*[開発メモ]実用的なrpmメモ
rpmのコマンドラインわからんち。--verbose --helpは長いし。
つーわけで、普通これだけあったら大丈夫メモ。
- installはrpm -Uvh、--testでテストのみ、-Uhvvでさらに詳細、--forceで強制
- 削除はrpm -e
- インストール済みパッケージの検索は rpm -q gccとかrpm -qa &quot;lib*&quot;とかrpm -qa | grep gccとか
- あるファイルがどのパッケージ起源か調べるのはrpm -qf。rpm -qf $(which perl)とか
- パッケージファイル開けるのはrpm2cpio package | cpio -i。cpio -tでファイル一覧が一応見れる。
- 最近インストールしたパッケージ一覧を見るには rpm -qa --last | head
以下、インストール済みパッケージに対して。
パッケージファイル自体に適用する場合には、-pをつける。
- パッケージの情報ゲットは  rpm -qi
- パッケージのファイル一覧はrpm -ql、-qlvでより詳しく
- パッケージ中の設定ファイル一覧は、rpm -qc、-qcvでより詳しく
- パッケージ中のドキュメント一覧は、rpm -qd、-qdvでより詳しく
- パッケージ中のファイルがパッケージから入った状態から変わっているかチェックはrpm -qs
- パッケージの検証はrpm -V、-Vaで全部チェック
- パッケージ導入中に実行されるスクリプトを見るのはrpm -q --scripts
- パッケージが提供する機能一覧はrpm -q --provides package
- パッケージが必要とする機能一覧はrpm -q --requires package
- パッケージの競合はrpm -q --conflicts package
以下、ある機能について。
- 特定の機能を必要とするパッケージ一覧はrpm -q --whatrequires function
- 特定の機能を提供するパッケージはrpm -q --whatprovides function

*1150287202*[開発メモ]冷や汗かいた。。。
職場-データセンター間の通信帯域をMaxまで使い切っていたらしい。。。
（mysqldumpをリモートで実行して）
ううう。最近ポカミスが多いなあ。


で、しょげていてもしょうがないので、
以下のソフトを探し出したよ！
http://www.vector.co.jp/soft/win95/net/se297041.html


100M契約らしいのだが、MRTGによると98Mくらいまできっかり出たらしい。やるな。
</body>
</day>
<day date="2006-06-17" title="">
<body>
*1150547390*[検索エンジン]
詳細判明。なるほど。
http://japan.cnet.com/news/media/story/0,2000056023,20143827,00.htm


動画からメタデータなどへの情報の縮約部分が公開されるのであったら、
Sennaでも使えるかも。わくわく。
現在のMeCabの部分を入れ替えるイメージで。


で、それよかこのニュースのほうが気になる木。
http://japan.cnet.com/news/media/story/0,2000056023,20117367,00.htm

*1150558623*[MySQL]MySQLのインストーラー for Windows
今はBitKeeper上に乗っていないようだ。
sfioball bk://mysql.bkbits.net/mysql-server-setup mysql-server-setup


適当に探したら出てきた。メモメモ。
勝手に使っていいのかどうかという問題もあるが。
http://svn.mysql.com/svnpublic/mysql-server-setup/


[追記]wix 2.0の最新版ではmsiファイルがちゃんと生成されない。
どうやらwixに入れるxmlのスキーマが変わったっぽい。
適当に古いバージョンのwix 2.0を入れたら動いた。
ただし、zipがないとせっかく作成したファイルを消してしまうので、
適宜バッチファイルを修正すること。
</body>
<comments>
<comment>
<username>mir</username>
<body>konnichiwa! :)</body>
<timestamp>1153270222</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>こんにちはこんにちは！（気づくの遅すぎですね。。</body>
<timestamp>1153453004</timestamp>
</comment>
</comments>
</day>
<day date="2006-06-21" title="">
<body>
*1150872044*[開発メモ]
gcc-4.0から、
&gt;&gt;
 warning: pointer targets in assignment differ in signedness
&lt;&lt;
といった類のwarningがたくさん出ると思います。


これは、ポインタ型の代入などにおいて、
その指し示す値の型の符号が違う場合に出てきます。


要は、
&gt;&gt;
  unsigned char *a;
  char *b;
  ...
  a = b
&lt;&lt;
なんてやると警告されます。


地道に直し中。
</body>
</day>
<day date="2006-06-27" title="">
<body>
*1151390396*[Perl]ひさびさにPerl
ひさびさに書いております。
DBIx::Class使っております。
解説ページチラ見して使っていたら詰まった。。


many_to_manyとかbelongs_toとかでコンパイルエラー。
DEBUG=&gt;1にしてなんとか追ってみるも、
どの行が悪いんじゃーーーーい


DB設計はDBIx::Classを使うことを想定してない名前づけルールになっているので、
結構めんどくさげ。
</body>
</day>
<day date="2006-06-29" title="">
<body>
*1151574582*[Mac]PowerBookをいただいた
PowerBookをいただいた。
-cキーを押しながら電源入れる
-Tiger入れる
-ADCに登録する
-DeveloperTools入れる
-落ちてたsubversionクライアントのパッケージ入れる
-fink入れる


で、finkとDarwinPorts、どっちがいいのかしら。

*1151576673*[Mac]英語キーボードでのことえりショートカット
確かに押すキーが多い。
http://q.hatena.ne.jp/1129236873


そして、command+spaceだと切り替わらないんだけど、なんでだろ。


結局、Windows風のキー操作にチェックを入れて、
caps lockキーを押したとき「ひらがな入力」にして解決。
</body>
</day>
<day date="2006-06-30" title="">
<body>
*1151637685*[検索エンジン]インターネット登記情報提供サービス
インターネット登記情報提供サービス
http://www.touki.or.jp


ってのがある。まあベンリ。
ちょっと料金は高いけど。


しかし、検索のところの仕様がすごい。
検索に関するヘルプの引用をしちゃうよ！
&gt;&gt;
     　　　　　　　　　　　　キーワード検索機能について
　　　　　　　[キーワードの入力方法/会社法人種別の選択方法]

　キーワード検索は、商号のヨミカナを検索条件として、特定の市区町村内に登記された会社・法人を特定するものです。
　「キーワード検索画面」において、キーワードとなる商号のヨミカナの入力方法及び会社・法人種別の選択方法については、次のとおりです。 


【キーワード入力方法】 １ 　入力するキーワードは、検索したい商号について意味のある最小の単語のヨミカナを１つのキーワードとして入力してください（下記の入力例参照）。※１キーワードは１５文字以内
　キーワードとして使用できる文字は、カタカナ、長音（ー）及び英文字で、全角文字に限られます。漢字、ひらがな、アラビヤ数字等や半角文字は使用できません。
　なお、商号中の「株式会社」、「有限会社」などの法人種別を表す語句のヨミは、検索対象とはなりません。

２ 　キーワードの各入力欄は、１つの欄に最大５つのキーワードを、スペースで区切って入力することができます。この場合、同一欄内に入力された複数のキーワード間の検索条件は、ＯＲ条件となります。
　また、キーワード１～３の欄同士の関係は、ＡＮＤ条件となります。 
（例） キーワード１　：ニッポン　ニホン 
 キーワード２　：ケンセツ　ケンチク　ケンザイ 
 と入力した場合は、商号のヨミカナに「（ニッポン　又は　ニホン）かつ（ケンセツ　又は　ケンチク　又は　ケンザイ）」を含む商号を検索します。 

 ３　キーワード入力例 
　（１）　商号が「東京アート商会」という会社を検索する場合

　キーワード１ 　：トウキョウ 
　キーワード２ 　：アート 
　キーワード３ 　：ショウカイ 
※ 商号のヨミの意味のある最小単位を考えて、「トウキョウ」、「アート」、「ショウカイ」に分割して、ＡＮＤ条件で入力します。
なお、「トウキョウアート」と「ショウカイ」に分割した場合は検索ができません。 
※ これらの条件の入力順序は問わないため、検索結果としては、例えば「アート東京商会」という商号も表示されます。 


　（２）　英文字で単語の「Ｇｒｅｅｎ」または「Ｅｃｏｌｏｇｙ」を含む商号を検索する場合

　キーワード１　：Ｇｒｅ　Ｅｃｏ 
 ※ 単語の先頭３文字を入力します（４文字以降は無視されます。）。
大文字か小文字かの区別はせず、先頭が「ＧＲＥ」または「ＥＣＯ」で始まる単語を含む商号も表示されます。 
 
このような単語としてのヨミが明らかな英文字については、以下のようにそのヨミをカタカナで入力しても検索できますが、この場合には、商号に「グリーン」、「エコロジー」を含むものも、あわせて表示されます。 
　キーワード1　：グリーン　エコロジー 


　（３）　英文字・記号で「Ａ」、「＆」、「Ｂ」を含む商号を検索する場合

　キーワード１　：エイ 
　キーワード２　：アンド 
　キーワード３　：ビー 
 ※ 単語を構成しない英文字は、原則として、１文字ごとのヨミをキーワードとして入力します。英文字のヨミは、Ａ（エイ）、Ｂ（ビー）、Ｃ（シー）、Ｄ（ディー）、Ｅ（イー）、Ｆ（エフ）、Ｇ（ジー）、Ｈ（エイチ）、Ｉ（アイ）、Ｊ（ジェイ）、Ｋ（ケイ）、Ｌ（エル）、Ｍ（エム）、Ｎ（エヌ）、Ｏ（オー）、Ｐ（ピー）、Ｑ（キュー）、Ｒ（アール）、Ｓ（エス）、Ｔ（ティー）、Ｕ（ユー）、Ｖ（ブイ）、Ｗ（ダブリュー）、Ｘ（エクス）、Ｙ（ワイ）、Ｚ（ゼット）となります。 
※ 商号中の「＆」は「アンド」とヨミ方を入力します。その他の商号中に用いられる記号「’」（アポストロフィー）、「，」（コンマ）、「‐」（ハイフン）、「．」（ピリオド）、「・」（中点）は、ヨミ方を入力しません。 
 
なお、商号に「ＶＷＸＹ」のように、単語を構成しない英文字が２文字以上連続する場合には、その先頭の３字（字数が２字のときはその文字）を入力しても検索できます。 
（例）　「ＡＤＳＬ」と「通信」を含む商号の検索キーワード 
　キーワード１ 　：ＡＤＳ 
　キーワード２ 　：ツウシン 

　（４）　アラビヤ数字で「１２３」または「１・２・３」を含む商号を検索する場合 
　キーワード１ 　：イチ 
　キーワード２ 　：ニ 
　キーワード３ 　：サン 
 ※ 各数字ごとに、そのヨミをキーワードとして指定します。連続した数字のヨミを「イチニサン」などと指定しても検索できません。また、漢数字の「一二三」を検索する場合も同様の検索方法となるため、アラビヤ数字を含む商号も表示されます。 
※ キーワード１～３への入力の順序によって検索結果は変わりません。上記の例では、「３２１」を含む商号も表示されます。 
※ 「７７７」のように連続したアラビヤ数字を検索することはできない（キーワード１～３に同じキーワードを入力することができない）ため、キーワード１のみに「ナナ」を入力します。この場合、「７」又は「七」を含むすべての商号が表示されます。 
※ アラビヤ数字のヨミは、０（レイ）、１（イチ）、２（ニ）、３（サン）、４（ヨン）、５（ゴ）、６（ロク）、７（ナナ）、８（ハチ）、９（キュー）となります。 
 
「２１世紀」という文字を含む商号を検索する場合の、「２１」のヨミも、次のように「二」、「イチ」となりますので、注意してください。 
キーワード１　：ニ 
キーワード２　：イチ 
キーワード３　：セイキ 

【会社・法人種別の選択方法】
　「会社」または「法人」のいずれかを選択してください。
　「法人」を選択した場合には、「法人種別」から検索したい法人の種別を選んでください。
　なお、選択種別にない法人（独立行政法人、学校法人、医療法人、宗教法人、社会福祉法人、社団法人、財団法人、農業・漁業協同組合など）については、キーワード検索はご利用できません。  
&lt;&lt;


&gt;&gt;
商号のヨミの意味のある最小単位を考えて
&lt;&lt;
って、脳内形態素解析をせんとあかんのね。


かなり使い勝手が悪いと思う。
改善の余地あり。

</body>
</day>
<day date="2006-07-11" title="">
<body>
*1152611587*[開発メモ]SQL
SQLと同程度の記述能力を持って、
さらに「手続き的に」書けるような言語（のアイデア）を探し中。


一応ひとつ見つけました。
http://www.c2.com/cgi/wiki?TqlRoadmap

*1152618801*[検索エンジン]MySQL組み込みの全文検索エンジン
こんなんがあった。
http://sphinxsearch.com


独自ストレージエンジンとして実装しているようだ。
</body>
</day>
<day date="2006-07-12" title="">
<body>
*1152725663*[開発メモ]下請法
下請法なんてのがあるのね。
正式名称、下請代金支払遅延等防止法。
結構面白いなあ。
http://www.jftc.go.jp/sitauke/


で、条文読んだわけなんだけど、
&gt;&gt;
６　この法律で「情報成果物」とは，次に掲げるものをいう。

　一　プログラム（電子計算機に対する指令であつて，一の結果を得ることができるように組み合わされたものをいう。）
&lt;&lt;
やべー、僕が書くとバグ入れちゃって一の結果が得られないっての！


ちなみにこの「一の結果」という文言は、
コンテンツの創造、保護及び活用の促進に関する法律なんかにも出ているみたいです。
</body>
</day>
<day date="2006-07-13" title="">
<body>
*1152772708*[検索エンジン]だらり
第1回『技術系サービスができるまで”日本発の検索エンジン”』
(PDF注意！)
http://www.insprout.com/company/news_release/2006/20060710_release.pdf
&gt;&gt;
第２回WAZA CTOセミナーでは、「技術系サービスができるまで」を実際に中心となって開発をされた方をお
呼びして明らかにしていきます。
今回は特に“情報大航海プロジェクト・コンソーシアム”の後援で「日本発の検索エンジン」にテーマを当て、
パネラーの方にお越し頂き、各検索エンジンサービスのできるまでの経緯をお聞きすると共に、今後の検索
エンジンの行方を明らかにしていきます。
&lt;&lt;
土曜日じゃなければなあ。
</body>
<comments>
<comment>
<username>mir</username>
<body>こんにちは。先ほどは1ヶ月前のエントリに間違えてコメントしてしまい済みません。(^^; sfioballで分からないことがあってとりあえず”sfioball”でぐぐったのですが結果がうちのBlog/WikiとこのBlogのみだったのに驚きました・・・。そこでグニャラくんがhatenaユーザだったの今気づきました(^^; またお邪魔させていただきます。でわ～。</body>
<timestamp>1153270564</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>こんにちは。&lt;br&gt;BitKeeperを、しかもWindowsで、しかも非商用クライアントで使っている人って少なそうですからね。&lt;br&gt;またまた是非是非お越しください！！</body>
<timestamp>1153453135</timestamp>
</comment>
</comments>
</day>
<day date="2006-07-22" title="">
<body>
*1153570266*[開発メモ]automakeであるオブジェクトだけフラグを変える方法
例えばSennaでは、nfkc.cというソースの最適化にかなりの時間がかかる。
そこだけ-O0などにするとコンパイル時間が早くなる。

んで、そういうやり方を見つけたのでメモ。
http://sources.redhat.com/automake/automake.html#Per_002dObject-Flags

</body>
</day>
<day date="2006-07-26" title="">
<body>
*1153902944*[MySQL]た、たしかに。。
とれない、昔のバージョンのMySQLをbitkeeperで。
んがーーーー！！！！
&gt;&gt;
sfioball -r1.2092.13.3 bk://mysql.bkbits.net/mysql-5.0 mysql-5.0.22
&lt;&lt;

とりあえず、Windowsからビルドするときのメモ。
MySQLバインディングを大きく変わったので、
Windows環境でのビルドも大きく変わってきてる。。
http://dev.mysql.com/doc/refman/5.0/en/windows-source-build.html
http://dev.mysql.com/doc/refman/5.0/en/windows-bitkeeper-build.html

*1153907813*[MySQL][Senna]というわけで
MySQL with SennaのWindowsでのコンパイル方法の文書を書き直した。
パッチなどは全てLinux上で当ててもらうことにする。
うーん、こっちのほうが楽チン、かな。。。
</body>
<comments>
<comment>
<username>mir</username>
<body>こんにちは。&lt;br&gt;＞MySQLバインディングを大きく変わったので、&lt;br&gt;か、変わったんですか！！　僕の知ってる範囲内かな？(^^;　ちょい不安・・・。</body>
<timestamp>1153958398</timestamp>
</comment>
<comment>
<username>mir</username>
<body>ドキドキ（＞＿＜；&lt;br&gt;svnから落として試してみればいいのかな？　やってみます（＞＜</body>
<timestamp>1153958475</timestamp>
</comment>
<comment>
<username>mir</username>
<body>そうそう某所からの話によると、過去の任意のリリースバージョンのMySQLに対してデフォルト以外の構成(configure)でWindows上でビルドする方法は、そのバージョンのWinソース配布版を落としてきてmy_config.h（./configure後のmake_win_src_distributionはこれを生成するとか）を直接弄れ～とのことでした。。ほんとか～というか、それしか方法ないの～というか、微妙なんですが(^^;</body>
<timestamp>1153959203</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>ドキドキ。svnからどうぞー！</body>
<timestamp>1153976767</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>GREEによるパッチが取り込まれて、senna.confで設定できることの多くがCREATE TABLE時に指定できるようになりました。&lt;br&gt;その影響でSQLの文法解析部分に手が入っているので、&lt;br&gt;yacc/bisonを通さなければならなくなっています。&lt;br&gt;ということで、Linux側でmakeしてやろうかと。。&lt;br&gt;&lt;br&gt;make_win_src_distributionは&lt;br&gt;bkのVC++Filesをコピーしてくれたり、&lt;br&gt;ccをcppにしてくれたりするみたいですが、&lt;br&gt;とりあえずSennaページのMySQL with Senna on Windowsに書いた&lt;br&gt;導入方法でbuildできています。&lt;br&gt;taocryptプロジェクトでエラーが出ましたが、&lt;br&gt;手で直してしまいました。。&lt;br&gt;&lt;br&gt;某所。。確かにちょっと微妙です。5.1でのソース統合に大期待！</body>
<timestamp>1153976994</timestamp>
</comment>
</comments>
</day>
<day date="2006-07-28" title="">
<body>
*1154082368*[全文検索]multilingual stemmer
多言語対応のstemmer。
http://snowball.tartarus.org/

</body>
</day>
<day date="2006-07-30" title="">
<body>
*1154253175*[MySQL]ストレージエンジン
MySQLはストレージエンジンが切り替えられるのが一応ウリ。
んでMySQLパッケージには入っていないストレージエンジンを調べてみた。
分散対応ですごくいいのが落ちているかもしれないからね（妄想）

-PBXT
http://www.primebase.com/xt/
トランザクション対応らしい。
えー、もうソースに取り込まれてるの！？
ぜんぜん知らなかったよ。。。

-SolidDB
ACIDに完全対応らしい。
http://dev.soliddb.com/
Solid社の日本語ページもある。
http://www.solidtech.com/jp/carrier-grade/index.asp

-DDEngine
http://ddengine.org/
論理的な裏づけはあって、学生に実装やらせているらしい。むむむ。。。
まだ実装は出てない。

-RitmarkFS
http://www.ritmark.com/
ファイルシステムをMySQLのストレージ経由で扱える。

-mdbtools
http://sourceforge.net/projects/mdbtools 
MS AccessのMDBファイルを扱える(read only)ストレージエンジン。

やはり妄想は妄想のままで。
</body>
</day>
<day date="2006-07-31" title="">
<body>
*1154337643*[MySQL]5.0.23
MySQL 5.0.23がいったん出たが引っ込められたらしい。
というわけで、
http://mysql.bkbits.net:8080/mysql-5.0/tags?nav=index.html
を見てみると、
5.0.23はキャンセルで5.0.24がリリースされるのかしら。


いずれにしても、早く出して欲しい。ビルドしなおすのが面倒なんです。。

*1154343984*[MySQL]MySQL with Senna on Windows
どうやらSennaページに載せている方法だとダメになったようだ。
id:mirさん推奨のWindowsソースパッケージ法にしよう。。
</body>
</day>
<day date="2006-08-01" title="">
<body>
*1154417662*[MySQL]ちょ、ちょまっ！！！
MySQLのBitkeeperリポジトリの中のscriptsに大改革が行われているようです。
あーん。
make_win_src_distributionも通らなくなっている。


というわけで、
+MySQLのwindows用ソースディストリビューションをダウンロード
+MySQLにLinux上でsennaパッチを当てる
+Senna パッチがあたったソースだけをwindows用ソースにコピー
+include/my_config.h編集
という方法で行こう。


5.1系までの我慢だ。。。

*1154427515*[MySQL][Senna]というわけでこうなった。
mysql-5.0.22-sennaでSennaのコンパイルを一度通す。
mysql-5.0.22-winにWindows用ソースディストリを展開。
以下のコマンドを実行。
&gt;&gt;
cp mysql-5.0.22-senna/include/my_pthread.h mysql-5.0.22-win/include/my_pthread.h
cp mysql-5.0.22-senna/include/myisam.h mysql-5.0.22-win/include/myisam.h
cp mysql-5.0.22-senna/myisam/fulltext.h mysql-5.0.22-win/myisam/fulltext.h
cp mysql-5.0.22-senna/sql/handler.h mysql-5.0.22-win/sql/handler.h
cp mysql-5.0.22-senna/sql/item.h mysql-5.0.22-win/sql/item.h
cp mysql-5.0.22-senna/sql/item_cmpfunc.h mysql-5.0.22-win/sql/item_cmpfunc.h
cp mysql-5.0.22-senna/sql/item_func.h mysql-5.0.22-win/sql/item_func.h
cp mysql-5.0.22-senna/sql/lex.h mysql-5.0.22-win/sql/lex.h
cp mysql-5.0.22-senna/sql/lex_hash.h mysql-5.0.22-win/sql/lex_hash.h
cp mysql-5.0.22-senna/sql/sql_class.h mysql-5.0.22-win/sql/sql_class.h
cp mysql-5.0.22-senna/sql/sql_lex.h mysql-5.0.22-win/sql/sql_lex.h
cp mysql-5.0.22-senna/sql/sql_yacc.h mysql-5.0.22-win/sql/sql_yacc.h
cp mysql-5.0.22-senna/sql/structs.h mysql-5.0.22-win/sql/structs.h
cp mysql-5.0.22-senna/libmysqld/filesort.cc mysql-5.0.22-win/libmysqld/filesort.cpp
cp mysql-5.0.22-senna/libmysqld/ha_myisam.cc mysql-5.0.22-win/libmysqld/ha_myisam.cpp
cp mysql-5.0.22-senna/libmysqld/item_cmpfunc.cc mysql-5.0.22-win/libmysqld/item_cmpfunc.cpp
cp mysql-5.0.22-senna/libmysqld/item_func.cc mysql-5.0.22-win/libmysqld/item_func.cpp
cp mysql-5.0.22-senna/libmysqld/item_sum.cc mysql-5.0.22-win/libmysqld/item_sum.cpp
cp mysql-5.0.22-senna/libmysqld/records.cc mysql-5.0.22-win/libmysqld/records.cpp
cp mysql-5.0.22-senna/libmysqld/sql_db.cc mysql-5.0.22-win/libmysqld/sql_db.cpp
cp mysql-5.0.22-senna/libmysqld/sql_delete.cc mysql-5.0.22-win/libmysqld/sql_delete.cpp
cp mysql-5.0.22-senna/libmysqld/sql_select.cc mysql-5.0.22-win/libmysqld/sql_select.cpp
cp mysql-5.0.22-senna/libmysqld/sql_show.cc mysql-5.0.22-win/libmysqld/sql_show.cpp
cp mysql-5.0.22-senna/libmysqld/sql_table.cc mysql-5.0.22-win/libmysqld/sql_table.cpp
cp mysql-5.0.22-senna/myisam/ft_boolean_search.c mysql-5.0.22-win/myisam/ft_boolean_search.c
cp mysql-5.0.22-senna/myisam/ft_nlq_search.c mysql-5.0.22-win/myisam/ft_nlq_search.c
cp mysql-5.0.22-senna/myisam/ft_update.c mysql-5.0.22-win/myisam/ft_update.c
cp mysql-5.0.22-senna/myisam/mi_check.c mysql-5.0.22-win/myisam/mi_check.c
cp mysql-5.0.22-senna/myisam/mi_close.c mysql-5.0.22-win/myisam/mi_close.c
cp mysql-5.0.22-senna/myisam/mi_create.c mysql-5.0.22-win/myisam/mi_create.c
cp mysql-5.0.22-senna/myisam/mi_delete_table.c mysql-5.0.22-win/myisam/mi_delete_table.c
cp mysql-5.0.22-senna/myisam/mi_info.c mysql-5.0.22-win/myisam/mi_info.c
cp mysql-5.0.22-senna/myisam/mi_open.c mysql-5.0.22-win/myisam/mi_open.c
cp mysql-5.0.22-senna/myisam/mi_rename.c mysql-5.0.22-win/myisam/mi_rename.c
cp mysql-5.0.22-senna/myisam/myisamchk.c mysql-5.0.22-win/myisam/myisamchk.c
cp mysql-5.0.22-senna/sql/filesort.cc mysql-5.0.22-win/sql/filesort.cpp
cp mysql-5.0.22-senna/sql/ha_myisam.cc mysql-5.0.22-win/sql/ha_myisam.cpp
cp mysql-5.0.22-senna/sql/item_cmpfunc.cc mysql-5.0.22-win/sql/item_cmpfunc.cpp
cp mysql-5.0.22-senna/sql/item_func.cc mysql-5.0.22-win/sql/item_func.cpp
cp mysql-5.0.22-senna/sql/item_sum.cc mysql-5.0.22-win/sql/item_sum.cpp
cp mysql-5.0.22-senna/sql/mysqld.cc mysql-5.0.22-win/sql/mysqld.cpp
cp mysql-5.0.22-senna/sql/records.cc mysql-5.0.22-win/sql/records.cpp
cp mysql-5.0.22-senna/sql/sql_db.cc mysql-5.0.22-win/sql/sql_db.cpp
cp mysql-5.0.22-senna/sql/sql_delete.cc mysql-5.0.22-win/sql/sql_delete.cpp
cp mysql-5.0.22-senna/sql/sql_select.cc mysql-5.0.22-win/sql/sql_select.cpp
cp mysql-5.0.22-senna/sql/sql_show.cc mysql-5.0.22-win/sql/sql_show.cpp
cp mysql-5.0.22-senna/sql/sql_table.cc mysql-5.0.22-win/sql/sql_table.cpp
cp mysql-5.0.22-senna/sql/sql_yacc.cc mysql-5.0.22-win/sql/sql_yacc.cpp
&lt;&lt;

mi_delete_table.cとmi_rename.cのsnprintfをmy_snprintfに変える。


config-win.hに
#define ENABLE_SENNA 1
を入れる。


mysqld,myisamchk,myisamlog,myisam_ftdump,myisampackプロジェクトで追加の依存関係にlibsenna.libを入れる。


mysqld,myisamchk,myisamlog,myisam_ftdump,myisampackをreleaseでコンパイル。
mysqldをDebug,Max,Max nt,nt,Releaseでコンパイル。

*1154428495*[MySQL]Innobaseのうそつきー！！
どうやら運が悪かったようだ。
http://forums.mysql.com/read.php?22,12604,12664#msg-12664

*1154433721*[MySQL]debianのmysqlビルドもコケている
mysql-dfsg-5.0。くそう。my_memmemがないらしいぞ。
</body>
</day>
<day date="2006-08-02" title="">
<body>
*1154498540*[MySQL][Senna][Debian]MySQL with Sennaのビルドがコケる件
-mysql-dfsg-5.0(5.0.22-4)には、Makefile.inを修正するパッチが入っている
 NULL文字入れたら、その後がクエリログが残らないバグの修正のための
 my_memmem関数の導入・テスト用のパッチ
 http://bugs.mysql.com/bug.php?id=17667&amp;error=no
-Sennaの導入のためにはautotoolsの実行が必要
-上のMakefile.inの修正が取り消されておじゃん
うーん。どしよ。
SennaのパッチをMakefile.inレベルまで落とそうかな。

[追記]
先頭にパッチを追加したところ、他のパッチがあたらなくなってエラー。
むむむ。。。
結局Windows版と同じような手順になりそうな予感だぞ。
</body>
<comments>
<comment>
<username>mir</username>
<body>どきどきです（＞＜</body>
<timestamp>1154509497</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>うふふ。がんばっております。安定した構築手順の確立は大事ですから。。</body>
<timestamp>1154515772</timestamp>
</comment>
</comments>
</day>
<day date="2006-08-03" title="">
<body>
*1154598387*[MySQL][Senna]
Sennaのパッチを当てたMySQLのdebianパッケージを作る話の続き。


http://qwik.jp/senna/debian_package.html
に記載した方法で、おそらくパッケージングはOK。


ただし、SennaのMySQLパッチにちょっとだけ修正が必要のようだ。
というのも、configureを--with-embedded-server付きで実行すると、
libmysqldのmakeでコケる。


原因は
+libmysqld/Makefile.amのINCLUDESにsennaのヘッダが指定されていない
+libmysqld.aにsenna・mecabのライブラリがリンクされていない


前者の問題はMakefile.amに追記するだけでOKなんだけど、
後者の問題がちょっと悩む。

&gt;&gt;
for arc in ./libmysqld_int.a ../regex/libregex.a ../myisam/libmyisam.a ../myisammrg/libmyisammrg.a ../heap/libheap.a ../innobase/usr/libusr.a ../innobase/srv/libsrv.a ../innobase/dict/libdict.a ../innobase/que/libque.a ../innobase/srv/libsrv.a ../innobase/ibuf/libibuf.a ../innobase/row/librow.a ../innobase/pars/libpars.a ../innobase/btr/libbtr.a ../innobase/trx/libtrx.a ../innobase/read/libread.a ../innobase/usr/libusr.a ../innobase/buf/libbuf.a ../innobase/ibuf/libibuf.a ../innobase/eval/libeval.a ../innobase/log/liblog.a ../innobase/fsp/libfsp.a ../innobase/fut/libfut.a ../innobase/fil/libfil.a ../innobase/lock/liblock.a ../innobase/mtr/libmtr.a ../innobase/page/libpage.a ../innobase/rem/librem.a ../innobase/thr/libthr.a ../innobase/sync/libsync.a ../innobase/data/libdata.a ../innobase/mach/libmach.a ../innobase/ha/libha.a ../innobase/dyn/libdyn.a ../innobase/mem/libmem.a ../innobase/sync/libsync.a ../innobase/ut/libut.a ../innobase/os/libos.a ../innobase/ut/libut.a ../mysys/libmysys.a ../strings/libmystrings.a ../dbug/libdbug.a ../vio/libvio.a /usr/lib/libsenna.a /usr/lib/libmecab.a; do \
  arpath=`echo $arc|sed 's|[^/]*$||'`; \
  ar t $arc|sed &quot;s|^|$arpath|&quot;; \
done | sort -u | xargs ar cq libmysqld.a ; \
ranlib libmysqld.a    ; 
&lt;&lt;
これがMakefileのリンク部分なんだけど、
+libmysqld.aの構築に必要なライブラリを１つずつar tして含まれるオブジェクト名を調べる
+ライブラリと同じパスにある先ほど調べた名前のオブジェクトを全てarで固める
+固めたものをranlibしてlibmysqld.aを作る
という手順になっている。


つまり、ライブラリとオブジェクトが同じパスにないといけないわけだが、
/usr/lib以下にあるsennaとmecabについてはそんなところにオブジェクトはない。
というわけで、こいつらについてはarでオブジェクトそのものを取り出してあげると
なんとか回避できそうだ。


もう１つ解決策として、
- debian/rulesで--with-embedded-serverの指定をやめる
というのがあるのですが、
dh_movefilesのあたりでエラーが出ている様子。
こちらを直すほうがいいのかなあ。。。

[追記]
できました。
http://qwik.jp/senna/debian_package.html

*1154598979*[はてな]なんかデザイン崩れてる
IEだとデザインが崩れているみたい。
横に長いからだな。
</body>
<comments>
<comment>
<username>mir</username>
<body>わーい(^^)</body>
<timestamp>1168070003</timestamp>
</comment>
</comments>
</day>
<day date="2006-08-04" title="">
<body>
*1154675743*[MySQL]5.0.24がリリース
MySQL 5.0.24がリリースされたようだが、
ミラーまでバイナリが回っていないようだ。


全パッケージ作成しなおそう。
今度は実機で作るぞ。。。
</body>
</day>
<day date="2006-08-06" title="">
<body>
*1154825360*[開発メモ]コンテキストスイッチスイッチ
コンテキストスイッチをいっぱい起こすようにして、
マルチスレッド特有のバグを検出しやすくしよう計画。
ふむふむ。
http://d.hatena.ne.jp/yupo5656/20060528
</body>
</day>
<day date="2006-08-07" title="">
<body>
*1154940543*[開発メモ]こんなんあったんだ
Wikipediaの記事データはxmlで配布されている。
いつも適当にパースしていたんだけど、
ちゃんとツールあったのね。
http://meta.wikimedia.org/wiki/Xml2sql

</body>
</day>
<day date="2006-08-09" title="">
<body>
*1155121117*[開発メモ]
引きこもりぎみなので、コレに応募してみた。


『 サーチはモバイルをどう変えるのか？　～　キープレイヤーに聞く、モバイル検索の未来 』
http://labs.gree.jp/Top/Study/20060823.html

</body>
</day>
<day date="2006-08-10" title="">
<body>
*1155194128*[開発メモ][gcc]gcc-4.1からatomic関係の関数がビルトインに
知らなかった。メモメモ。
http://gcc.gnu.org/onlinedocs/gcc-4.1.0/gcc/Atomic-Builtins.html#Atomic-Builtins

</body>
<comments>
<comment>
<username>giveup</username>
<body>こんにちは、これってなんに使うものなのですか?&lt;br&gt;カーネルとかデバイスドライバとかで、&lt;br&gt;途中で割込みなど入ったらイヤな場面で&lt;br&gt;計算も簡単だし、自前でロックの仕組みを作るのもアレだなぁー&lt;br&gt;とかそういう場合ですか?</body>
<timestamp>1155712116</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>コメントありがとうございます。今気づきましたごめんなさい。&lt;br&gt;&lt;br&gt;僕の動機としては、&lt;br&gt;マルチスレッド環境で軽量なリファレンスカウントを実装したいということです。&lt;br&gt;ということで、「自前でロックの仕組みを作る」、ということになると思います。&lt;br&gt;&lt;br&gt;linuxのatomic.hはredhatだとincludeしたら怒られたりするみたいだし、&lt;br&gt;glib依存はいやだし、&lt;br&gt;でもアセンブリ言語で書いたら移植性損なわれるし・・・&lt;br&gt;と悩んだところ、&lt;br&gt;gccのlibc（なのかな？）につくという話があったので飛びついてみたのでした。&lt;br&gt;標準なら移植性を損なわずに実現できる、ということです。</body>
<timestamp>1156166206</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>ま、でも結局アセンブリ言語でCPU毎に記述することになりそうです。&lt;br&gt;というわけで、その後の日記はCPU毎のフェッチ・アンド・アッドの調査になっているのでした。</body>
<timestamp>1156166274</timestamp>
</comment>
<comment>
<username>giveup</username>
<body>なにか、速度的にシビアなものを作られているんですね。&lt;br&gt;仕事に関係あることのようなのであまり聞くとよくなさそうなのでこの辺で。。&lt;br&gt;あと、アセンブラからwebなことまで幅広いですね。&lt;br&gt;僕は、どれもあまり分かりませんが。。。</body>
<timestamp>1156177654</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>僕はアセンブラとWeb（コードをあまりかかずに見た目が面白いもの）の両極端が好きなのです。&lt;br&gt;中途半端なところはあんまり好きじゃないです。&lt;br&gt;&lt;br&gt;&lt;br&gt;仕事はSennaっていう全文検索エンジンの開発です。&lt;br&gt;http://qwik.jp/senna/　をごらんください！&lt;br&gt;&lt;br&gt;&lt;br&gt;id:giveupさんはわからないといいつつわからない点を突っ込んでいっている印象を持ったので、&lt;br&gt;時間が経過するにつれてわからないことは減っていくのではないでしょうか。</body>
<timestamp>1156226871</timestamp>
</comment>
<comment>
<username>giveup</username>
<body>あっ、今頃見ました。(-_-;) http://qwik.jp/senna/&lt;br&gt;LGPLなのですか、別に内容にふれても問題なかったのですね。&lt;br&gt;&lt;br&gt;元々の話題ですが、話しを聞く限りでは、&lt;br&gt;アセンブラで書いても、結局 gnu as であったり nasm であったりの&lt;br&gt;アセンブラに依存するので gcc の builtin 使った方がよさそうな気がしたのですが&lt;br&gt;いろいろ他にも考慮する点があるのですね。&lt;br&gt;でも、nasmだとx86だけですね。&lt;br&gt;&lt;br&gt;全文検索というものは、おそらく自分には必要ないのか&lt;br&gt;むしろ emacs で M-x occor であまりストレスを感じてないので&lt;br&gt;それがなんなのか分かってないのに、&lt;br&gt;多分なくても大丈夫だと思ってるものですが&lt;br&gt;説明見たところ、マシンの性能が弱いものでも使えるのかなという印象ですが&lt;br&gt;自分専用な使い方でも、便利な使い方ってあるのですか？&lt;br&gt;&lt;br&gt;あと、http://qwik.jp/senna/senna_takahashi.files/takahashi.html&lt;br&gt;って革新的なネーミングですね。&lt;br&gt;これから標準になることが予測されます。</body>
<timestamp>1156604428</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>gccの4.1はさすがにインストール率が高くないので、&lt;br&gt;ビルトインのものはまだ使えそうにないです。&lt;br&gt;アーキテクチャによっては対応していないものもあるようですし。&lt;br&gt;&lt;br&gt;個人レベルでは全文検索はあまり必要じゃないと思います。&lt;br&gt;まさに、なくても大丈夫、かなあ。&lt;br&gt;大量の文書を個人的に収集しているのであれば便利かもしれません。&lt;br&gt;&lt;br&gt;ひょ、標準（笑</body>
<timestamp>1156646962</timestamp>
</comment>
<comment>
<username>giveup</username>
<body>そうか、そうですね。&lt;br&gt;GCC 4.1 はまだ。</body>
<timestamp>1156661677</timestamp>
</comment>
<comment>
<username>mir</username>
<body>うひょひょ。横から失礼します。Sennaみたいなソフトウェアは企業システムとかには必須な機能だったりなのです。1箇所にある大量データ(数GB～数百GB)に対して、数百数千のユーザが同時多発的にGREP検索のようなことを行おうとすると、一定のレスポンスタイム（1秒とかせいぜい数秒）を維持するためには、専用の仕組み（全文検索インデックス）が必要になります。以上、一ユーザのコメントでし。</body>
<timestamp>1156895423</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>うひょひょひょ。&lt;br&gt;やはり、企業ユースではうれしいですよね。</body>
<timestamp>1157206430</timestamp>
</comment>
</comments>
</day>
<day date="2006-08-11" title="">
<body>
*1155275777*[開発メモ]RubyでREXMLでstreamlistenerで
xml2sqlでWikipediaのxmlデータをsqlに変換できるわけだが、
idとtitleとtextくらいしか必要でないのでrubyとREXMLで書いてみた。
確かに動くけどちょっと遅いなあ。。

[追記]
結局xml2sqlに激しくパッチを当てた。
importleanってフラグ追加。

*1155322137*[開発メモ]WindowsでいうとこのInterlockedExchangeAdd
atomicな(足し算して結果の格納＋足す前の値の取得)をしてくれる
InterlockedExchangeAdd。
x86だとlock; xaddlで。


んで、PowerPCでそれっぽい単語でググると以下のページが出てきますが、
これバグっとります。最新のMonoだとさすがに直ってる。
http://lists.ximian.com/pipermail/mono-list/2003-March/013148.html


デバッグしたらこげな感じになった。最新のMonoでのコードとほぼ同じ。
bneのお尻の-は、予測分岐の際に多分分岐せんやろというヒントらしい。
&lt;pre&gt;
1:
  lwarx  result, 0, addr
  add    result, result, delta
  stwcx. result, 0, addr
  bne-   1b
  sub    result, result, delta
&lt;/pre&gt;

PowerPCのgccインラインアセンブラの注意点として、
- asmの中で\n\tの代わりに;が使えない
- resultは書いたあとに読むので&quot;=&amp;r&quot;のように&amp;をちゃんとつける
ってな感じかねえ。


んでsparcを調べるかどうか悩み中。armとか。

*1155325086*[開発メモ]RCU
Read-Copy Updateというアルゴリズム。
知らなかった。やばい。
http://www.atmarkit.co.jp/flinux/special/kernel26/kernel26_01a.html
http://ja.wikipedia.org/wiki/%E3%83%AA%E3%83%BC%E3%83%89%E3%83%BB%E3%82%B3%E3%83%94%E3%83%BC%E3%83%BB%E3%82%A2%E3%83%83%E3%83%97%E3%83%87%E3%83%BC%E3%83%88


そろそろ各種アルゴリズムを勉強しなおさないとな。。。
つか、Wikipedia充実しとるなあ。。。
</body>
</day>
<day date="2006-08-13" title="">
<body>
*1155457417*[開発メモ]WindowsでいうとこのInterlockedExchangeAdd（その２）
sparcでのatomic add。


Monoにもsparc用のInterlockedExchangeAdd実装があったけど、
ロックして足し算してロック解除をしている。
ロックするのはねえ。。。
ここはJavaの実装を見るのが一番でしょ！


https://www-06.ibm.com/jp/developerworks/java/041203/j_j-jtp11234.html
によると、
java.util.concurrentにatomic add関係のクラスがあるらしい。
JDKの知識は1.3くらいで止まってるなあ。。。


んで、ソースを見てみると、
結局はUnsafe.compareAndSwapIntがその本体らしい。
んで、こいつはUnsafeなのでVMのほうを見ないといけない。


hotspotのソースを検索すると、
&lt;pre&gt;
UNSAFE_ENTRY(jboolean, Unsafe_CompareAndSwapInt(JNIEnv *env, jobject unsafe, jobject obj, jlong offset, jint e, jint x))
  UnsafeWrapper(&quot;Unsafe_CompareAndSwapInt&quot;);
  oop p = JNIHandles::resolve(obj);
  jint* addr = (jint *) index_oop_from_field_offset_long(p, offset);
  return (jint)(Atomic::cmpxchg(x, addr, e)) == e;
UNSAFE_END
&lt;/pre&gt;
こげな感じ。Atomic::cmpxchgが実体なのね。


cmpxchgで検索。
java-src\hotspot\src\cpu\sparc\vm\stubGenerator_sparc.cppにAtomic::cmpxchgを発見。
んで、その下にお目当てのAtomic::addクンがいた。いひひ。
&lt;pre&gt;
  // Support for jint Atomic::add(jint add_value, volatile jint* dest).
  //
  // Arguments :
  //
  //      add_value: O0   (e.g., +1 or -1)
  //      dest:      O1
  //
  // Results:
  //
  //     O0: the new value stored in dest
  //
  // Overwrites (v9): O3
  // Overwrites (v8): O3,O4,O5
  //
  address StubGenerator::generate_atomic_add() {
    StubCodeMark mark(this, &quot;StubRoutines&quot;, &quot;atomic_add&quot;);
    address start = __ pc();
    __ bind(_atomic_add_stub);

    if (VM_Version::v9_instructions_work()) {
      Label(retry);
      __ bind(retry);

      __ lduw(O1, 0, O2);
      __ add(O0,   O2, O3);
      __ cas(O1,   O2, O3);
      __ cmp(      O2, O3);
      __ br(Assembler::notEqual, false, Assembler::pn, retry);
      __ delayed()-&gt;nop();
      __ retl(false);
      __ delayed()-&gt;add(O0, O2, O0); // note that cas made O2==O3
    } else {
      const Register&amp; lock_reg = O2;
      const Register&amp; lock_ptr_reg = O3;
      const Register&amp; value_reg = O4;
      const Register&amp; yield_reg = O5;

      Label(retry);
      Label(dontyield);

      generate_v8_lock_prologue(lock_reg, lock_ptr_reg, yield_reg, retry, dontyield);
      // got lock, do the increment
      __ ld(O1, 0, value_reg);
      __ add(O0, value_reg, value_reg);
      __ st(value_reg, O1, 0);

      // %%% only for RMO and PSO
      __ membar(Assembler::StoreStore); 

      generate_v8_lock_epilogue(lock_reg, lock_ptr_reg, yield_reg, retry, dontyield);

      __ retl(false);
      __ delayed()-&gt;mov(value_reg, O0);
    }

    return start;
  }
&lt;/pre&gt;
げー、v8以前はロック方式じゃないとダメなのかー。。。


cas sparc v9で検索。
http://www.sparc.com/japanese/resource.htm
おおお、まさにピンポイント。
つか、もともと実装から探そうという考えがヤラシイのだな。
cas命令はやはりv9で導入されたようで。


んで、sparc v9の仕様書中にappendix J.11 Fetch_and_Addというのを発見。
http://www.sparc.com/standards/V9-R1.4.7.pdf
&lt;pre&gt;
FetchAndAddCAS(address, increment)	!%i0 = address, %i1 = increment
retry:
	ld [%i0],%l0
	add %l0,%i1,%l1
	cas [%i0],%l0,%l1
	cmp %l0,%l1
	bne retry
	mov %l1,%o0			!return old value
&lt;/pre&gt;
hotspotの実装とだいたい一緒やね。

*1155460994*[全文検索]形態素解析か、N-gramか
たまたまWebサーフィン中にこんなページを発見。
N-gramマンセーなページはよく見るけど、
珍しくN-gramに批判的な記事。
http://www.accessup.org/pj/6_B4C9CDFDBFCDA4B5A4F3/20060203.html


Sennaは単語ベースの転置インデックスを持ちながらも、
部分一致検索を行うことができるので、
「京都」で検索しても「東京都」を出すように設定できる。
スコアの下げ具合も設定できる。
インデックスも小さくなる（＝検索も早くなる）
部分一致を動かさなければ適合率が上がるし、
部分一致を動かせば再現率が上がる。
というわけで、
Sennaを使って大規模な文書セットを検索させたい場合には、
基本的には単語ベースでインデックスを作るのがオススメなのだ。


しかーし、
ipadicのライセンスであるICOTライセンスの英語版の不透明さのおかげで
N-gramが必要とされるケースもあったりするのです。


http://chasen.org/~taku/blog/archives/2004/11/ipadic.html
にはライセンスを変えるっていう話が出ているけど、
いまだ実現していないっぽいしなあ。。
mecab自体はGPL/LGPL/BSDのトリプルライセンスというゆるゆるライセンスなのに。。
やはりjumandicか。。

*1155476391*[雑談]ついに動き出す決断ができた
温めていたプロジェクトを動かしだそうかと。
OSSです。


５つのクラスに分かれるあるオブジェクトを管理するアプリケーションです。
インプットはweb、サーバクライアントモデル。
サーバは木構造で連なっている構成で。
権限設定は非常に重要ね。


問題は
-ストレスのない入力
-各種法制への対応
だなあ。
既存ソフトウェアを研究せねば。


ま、動き出してみればなんとかなりそうだけどね。
ただ、譲れない部分の基本設計だけはしっかりしたいなあ。。


ブラジルに入って、
まあポカミスとかいっぱいやらかしているわけですが（これは僕の適当な性格によるところが多い）、
それでも、ありがたいことに温かい目を向けてもらって、
なんとか仕事を振ってもらってます。


-やっぱり仕事は慎重に、テストは大事だね
-ウォーターフォールとは言わないが、ソフトウェアが最終的に目指すゴールを明確にして、そのゴールを達成するために必要な要件を満たすために必要な基本設計はちゃんと行う
ということをなんとなく体で学んだのでした。
あとは、 id:lestrratさんが言うように、ドキュメント大事だね、ってことかな。

*1155476392*[開発メモ]機械学習の復習
いい加減に理解していた気になっていた、
機械学習についてちゃんと追ってみようという気持ちにもなったのだが、
amazonで「機械学習」で検索すると検索結果がヒドい。
http://www.amazon.co.jp/gp/search/ref=titechbbs-22/503-5651993-6426308?__mk_ja_JP=%83J%83%5E%83J%83i&amp;url=search-alias%3Dstripbooks&amp;field-keywords=%8B@%8AB%8Aw%8FK


勉強のネタ本となるのは以下の３つかなあ。
英語はたとえ名著とはいえ細かいニュアンスを落としそうだし、学習速度が遅そうだなあ。。。
もっと努力家に生まれたかったぜ。


ま、もっと努力家だったら、今もまだすずかけ台にいたのかもしれんね。
ISBN:0387952845:detail
ISBN:4000068466:detail
ISBN:4320120051:detail

*1155476945*[雑談]次世代アルゴリズム研究会
The Elements of Statistical Learningを取り上げている人のはてなダイアリーを見たわけですが、
そこから次世代アルゴリズム研究会
http://www.cas.dis.titech.ac.jp/~higo/wiki/study/index.php?FrontPage
というものを発見。


面白そうで、聴講だけでもＯＫということらしいけど、
頭が悪いから聞きにいけん。。。くくぅ。
</body>
</day>
<day date="2006-08-21" title="帰省しつつも働いとる">
<body>
*1156140015*[開発メモ][Perl]Encode::Detect
Encode::Detectってモジュールがある。


Encode-Detect-0.01のインストールエラー
http://d.hatena.ne.jp/nopolicy/20060612#p2
って日記もあるとおり、コンパイルに詰まる。
Redhat ES 4環境ね。


gcc -Eを使って見ると、
&gt;&gt;
void XS_Encode__Detect__Detector_new( CV* cv __attribute__( (unused) ));
&lt;&lt;
でつまっとる。


んで、原因はgcc 3.3の__attribute__( (unused) )の扱い。
http://www.nntp.perl.org/group/perl.perl5.summary/177
の#39634あたりでも見てもらえれば。
*1156143174*[開発メモ]エマージングビジネス勉強会、抽選落ちでしたー
エマージングビジネス勉強会
http://labs.gree.jp/Top/Study/20060823.html


抽選落ち。あらん。
</body>
<comments>
<comment>
<username>tokada</username>
<body>俺漏れも</body>
<timestamp>1156605171</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>KDDIの出資発表後なので、greeの戦略を調査したい人が多めだったのかなあ。&lt;br&gt;でも、抽選漏れの連絡はもちょっと早くして欲しかった。&lt;br&gt;水曜日のイベントで月曜日発表はツラい。</body>
<timestamp>1156646700</timestamp>
</comment>
</comments>
</day>
<day date="2006-08-28" title="">
<body>
*1156754384*[開発メモ][MySQL]InnoDBでも動く全文検索
sqlsearch。
http://firestuff.org/wordpress/2006/07/20/sqlsearch-100/
トリガベース？ちゃんと見てない。
</body>
</day>
<day date="2006-08-29" title="">
<body>
*1156821893*[開発メモ][雑談]申し込む日。
Development Environment Conference申し込んだ。
http://shibuyajs.org/articles/2006/08/28/development-environment-conference


The Advantageのライブチケット申し込んだ。
http://news4vip.livedoor.biz/archives/50771557.html

*1156843954*[雑談]僕はいやしいので
ビルコレさん、新色のニンテンドーDS Lite欲しい！
http://d.hatena.ne.jp/keyword/%a5%d3%a5%eb%a5%b3%a5%ec%a4%b5%a4%f3%a1%a2%bf%b7%bf%a7%a4%ce%a5%cb%a5%f3%a5%c6%a5%f3%a5%c9%a1%bcDS%20Lite%cd%df%a4%b7%a4%a4%a1%aa

*1156861946*[雑談]OhMyNewsの記者になる
OhMyNewsの記者になってみた。
…
と、特に書きたいことがない。。
</body>
</day>
<day date="2006-08-30" title="">
<body>
*1156918589*[雑談]メールサーバ重ぇ
メールサーバ(fastmail.fm)が重くて仕事にならん！！
Askビデオさん、動画デジカメ欲しい！

*1156921750*[雑談]射撃しつつ前進
笑いは、対象が狭ければ狭いほうが面白いのだ、
とビートたけしや松本仁志が言っていたような記憶がある。


で、とてもくだらない１文を思いついたのだが、
元ネタが一般に知られていないため、
mixiなんかには書けない。
でも、書かずにはいられないのだ！！


情景を思い浮かべて読んでね…


…


「射精しつつ前戯」
ど、どう？

*1156923130*[技術メモ][検索エンジン]精度は大事だよー
やっぱり精度大事だよねー、
というmooterの広告。
http://corp.mooter.co.jp/
</body>
<comments>
<comment>
<username>hsiomaneki</username>
<body>10ヵ月経った今でもgoogleで一件しかヒットしない。ある意味すごい。</body>
<timestamp>1183526813</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>うふふ。</body>
<timestamp>1183532626</timestamp>
</comment>
</comments>
</day>
<day date="2006-09-05" title="">
<body>
*1157432620*[雑談]英語での同義語・対義語
SYNONYM.COM、便利やねえ。
http://www.synonym.com/

</body>
</day>
<day date="2006-09-06" title="">
<body>
*1157518473*[技術メモ]PHP Crawlerを日本語で使う
MOONGIFTで紹介されていたPHP Crawlerだが、
日本語ではそのまま利用することができない。
http://oss.moongift.jp/intro/i-2341.html


利用するためには、Sennaを用いるのが楽だろう。
http://qwik.jp/senna/


SennaやSenna+MySQLのsrpmは以下のサイトのを利用すると楽かも。
http://www.ma2world.net/2006/08/31/284/

*1157533519*[開発メモ][Delphi]
Turbo Delphiでたー！
けどダウンロードできんぞ。。。
http://www.borland.com/downloads/download_turbo.html
</body>
</day>
<day date="2006-09-08" title="">
<body>
*1157714559*[開発メモ]Development Environment Conference
お尻が蒸れてかゆい。
vim使い少ないのね。。
</body>
</day>
<day date="2006-09-11" title="">
<body>
*1157945878*[MySQL][Senna][全文検索]MySQLのSpatial Data TypesとSenna全文検索の併用
MySQLのSpatial Extensions
http://dev.mysql.com/doc/refman/5.0/en/spatial-extensions.html
を使って、
以下のブログで実現していることをMySQL + Sennaで実現できるのかな？
http://lucene.jugem.jp/?eid=92

*1157952145*[全文検索]Sedueのサイトに、各種全文検索システムの速度比較が載ってるよ！
Sedueっていう検索システム。
圧縮Suffix Arrayらしい。
http://preferred.jp/sedue/benchmark.htm


圧縮Suffix Arrayについては、
開発メンバーにも入っている岡野原さんがいろんなところで書いているので
参考になります。


上記サイトでの性能比較についてですが、
Sennaが結構好成績を出していて嬉しい限りです。
んでも、ひとつ気になったのが、
&gt;&gt;
インデクシングに関しましては、全検索システムにおいて形態素解析オプションをonにしてベンチマークを行いました。
&lt;&lt;
と書いてあるのに、
&gt;&gt;
Senna
 N-gramオプションを使用
&lt;&lt;
というところ。なんでわざわざN-gramなんだろう。。
[追記]再現率をあわせるためだそうです。なるなる。


形態素解析にしたら、インデックス作成速度も速くなって、
インデックスサイズも小さくなると思います！
</body>
</day>
<day date="2006-09-14" title="">
<body>
*1158205852*[雑談]メールの開封確認をつけてしまっていた。。
Becky!からThunderbirdに乗り換えよう計画中だったのですが、
（IMAPでの速度が速いから！）
Thunderbirdで全てのメールに開封確認をつけるチェックがついていてしまった。。。


澤君はShuriken Proがいいと言っていたなあ。メーラー。
</body>
</day>
<day date="2006-09-17" title="">
<body>
*1158512615*[IPC][Linux][分散環境]LINXのLinux版のオープンソース公開ﾏﾀﾞｰ！？
&gt;&gt;
LINXは、イントラノードIPCで、遅延を25％低減、スループットを20％向上、インターノードIPCで、遅延を10％低減、スループットを25％向上させています。（数値はいずれも平均値）
&lt;&lt;
というIPC(プロセス間通信)サービスであるLINX君。
ヘテロジーニアスな環境・組み込み環境で強いみたい。
http://www.enea.com/templates/Extension____11920.aspx


んで、Linux版だけは
GPL/BSD likeのデュアルライセンスで公開されるという話が載っているんだけど、
どこにも公開されたソース・バイナリが見つからん。
誰か本体が落ちている場所を知ってる人がいたら教えて。
</body>
<comments>
<comment>
<username>Claude</username>
<body>ac9f95d7e2db588ca53790ee506fd1e5&lt;br&gt;&lt;a href=”http://prealpi-servizi.gurutafedaru.info/”&gt; prealpi-servizi.gurutafedaru.info &lt;/a&gt; http://conserva-italia-codigoro.sebratosubar.info/ &lt;a href=”http://articolo-sul-tempo-libero.alegatiketret.info/”&gt; articolo-sul-tempo-libero.alegatiketret.info &lt;/a&gt; &lt;br&gt;&lt;a href=”http://ragazza-luzern.alegatiketret.info/”&gt; ragazza-luzern.alegatiketret.info &lt;/a&gt; http://ragazza-pandino.gurutafedaru.info/ &lt;a href=”http://somatoline.sebratosubar.info/”&gt; somatoline.sebratosubar.info &lt;/a&gt; &lt;br&gt;&lt;a href=”http://accompagnatrice-liguia.alegatiketret.info/”&gt; accompagnatrice-liguia.alegatiketret.info &lt;/a&gt; http://flussimetro.serobomanasagu.info/ &lt;a href=”http://metti-becco-it.inikatafurqadi.info/”&gt; metti-becco-it.inikatafurqadi.info &lt;/a&gt; &lt;br&gt;&lt;a href=”http://grande-fratello-ungheria.inikatafurqadi.info/”&gt; grande-fratello-ungheria.inikatafurqadi.info &lt;/a&gt; http://lavori-manuali-per-la-pasqua.sebratosubar.info/ &lt;a href=”http://giochi-avventura-online.teramosapotemi.info/”&gt; giochi-avventura-online.teramosapotemi.info &lt;/a&gt; &lt;br&gt;&lt;a href=”http://villaggio-campania-villaggio-turistico-vacanza.alegatiketret.info/”&gt; villaggio-campania-villaggio-turistico-vacanza.alegatiketret.info &lt;/a&gt; http://lavoro-scalea.suzuciasapati.info/ &lt;a href=”http://usata-volvo.inikatafurqadi.info/”&gt; usata-volvo.inikatafurqadi.info &lt;/a&gt; &lt;br&gt;&lt;a href=”http://ragazzeinvendita.teramosapotemi.info/”&gt; ragazzeinvendita.teramosapotemi.info &lt;/a&gt; http://ragazza-casarano.inikatafurqadi.info/ &lt;a href=”http://arredamento-disco-bar.suzuciasapati.info/”&gt; arredamento-disco-bar.suzuciasapati.info &lt;/a&gt; &lt;br&gt;&lt;a href=”http://polti-ecologico.teramosapotemi.info/”&gt; polti-ecologico.teramosapotemi.info &lt;/a&gt; http://ortisei-hotel-bambino.gurutafedaru.info/ &lt;a href=”http://runtal-it.sebratosubar.info/”&gt; runtal-it.sebratosubar.info &lt;/a&gt; &lt;br&gt;&lt;a href=”http://optima-srl.alegatiketret.info/”&gt; optima-srl.alegatiketret.info &lt;/a&gt; http://bambino-rapito-tommaso.teramosapotemi.info/ &lt;a href=”http://albergo-1-stella-barcellona.serobomanasagu.info/”&gt; albergo-1-stella-barcellona.serobomanasagu.info &lt;/a&gt; &lt;br&gt;4a2b72bc154782528b5f2b270b628e88</body>
<timestamp>1169781225</timestamp>
</comment>
</comments>
</day>
<day date="2006-10-02" title="">
<body>
*1159760511*[技術メモ]LANケーブルはカテゴリ6eで
LANケーブルを買うときはカテゴリ6eのものを買うようにしている。


サンワサプライのKB-T6Eシリーズをよく買っている。
ラインナップは0.5m,1m,2m,3m,5m,7m,10mの白・黒・水色。
asin:B0009SC24K:title
asin:B0009SC218:title
asin:B0009SC22W:title


前の職場では
「凝りすぎでしょ」
といわれたが、
そんなに値段も高くないし、太くて丈夫なので気に入っているのだ。


でも、たぶんケーブルの性能はぜんぜん使い切ってないと思われる。
http://plusd.itmedia.co.jp/pcupdate/articles/0506/30/news001.html
によると、
&gt;&gt;
ケーブル交換だけで10Mbps前後の差が!
&lt;&lt;
らしいけどね。

…なんだかアフェリエイト日記みたいになってしまった。。
</body>
<comments>
<comment>
<username>サンワダイレクト</username>
<body>当店のブログで、ご紹介させていただきました。&lt;br&gt;これからも、よろしくお願いします。</body>
<timestamp>1161077057</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>おおお、びっくりしました。&lt;br&gt;先日もサンワダイレクト経由でKB-T6Eシリーズを数本購入させていただきました。</body>
<timestamp>1161077570</timestamp>
</comment>
</comments>
</day>
<day date="2006-10-11" title="">
<body>
*1160548789*[技術メモ][PostgreSQL][全文検索]Ludiaリリースおめでとう。
Sennaを使ったPostgreSQL用全文検索エンジンLudiaがリリースされたよ！


http://www.nttdata.co.jp/release/2006/101100.html
http://www.nttdata.co.jp/services/ludia/index.html

*1160553169*[開発メモ][Senna]MySQL/PgだけでなくRailsでもSQLiteでもSenna
LudiaでPostgres上での利用の幅が広がったSennaですが、
Senna関係で他にも面白いことをやっている人がいるんです!!!


SQLiteでSenna!
http://www.dodgson.org/omo/t/?date=20061001


RailsでSenna!
http://blog.masuidrive.jp/articles/2006/10/03/mysql-fulltext-on-rails


やっぱり、バージョンつけてリリースするっていうのが大事なのかなあ。。。
</body>
</day>
<day date="2006-10-12" title="">
<body>
*1160626319*[雑談][PostgreSQL][Senna][Ludia]Ludiaはアナxネタ
職場で見る人は注意ね。
ｈttp：//analtimes.blog18.fc2.com/blog-entry-1165.html


&gt;&gt;
アナxが好きな方を対象にアナxネタを発信します。
&lt;&lt;
とあるが、アナxは形容詞なので、
&gt;&gt;
アヌxが好きな方を対象にアナxネタを発信します。
&lt;&lt;
ではないか、と思ったりする昼下がりだよ。
</body>
<comments>
<comment>
<username>ひろ</username>
<body>う～ん、こういうの好き。</body>
<timestamp>1161089077</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>実は、白い目で見られているのではないかと不安がっていました。。。</body>
<timestamp>1161089356</timestamp>
</comment>
</comments>
</day>
<day date="2006-10-13" title="">
<body>
*1160740708*[開発メモ]AzaraCいいね
Sedueのプリファードインフラストラクチャーから出たAzaraC。
http://labs.preferred.jp/azarac/


昔C++だけで2ch風掲示板のスクリプトを書いたことがあったけど、
こういうライブラリで、しかもBSDライセンスのものがなくて
結局１から書いたのを思い出したりもしたのでした。

</body>
</day>
<day date="2006-10-15" title="">
<body>
*1160876392*[開発メモ][Ludia][Senna]Ludiaの開発ブログができてるみたい
Ludia(TM) のいろいろ
http://www.doblog.com/weblog/myblog/74336/


&gt;&gt;
さて、Ludia は商用DBMS並みに早い、といってます。これは、マシンでの検証によるものです。平均4～5ｋのテキストカラムを持つテーブルにLudiaを適用する評価を行いました。テーブルは、およそ300万行です。他の列もあって、データベースサイズは4～5GBでした。マシンは、XEONの普通のサーバで、内臓のSCSIディスクです。
&lt;&lt;
と書いてありますが、こういう検証をやるっていうのが結構大変なんだよねえ。


はてブで「これはひどい」タグなんかつけられちゃってるLudiaタンかわいそう。
みなさんこれからもLudiaタンを応援してあげてください!!!
</body>
</day>
<day date="2006-10-16" title="">
<body>
*1161016134*[技術メモ][PostgreSQL][MySQL]DBMSデフォルト組み込みの全文検索
PostgreSQL 8.2からGINというインデックス形式が追加され、
それを用いれば全文検索インデックスが実現できます。
分かち書きを別途行う必要はありますが。
http://itpro.nikkeibp.co.jp/article/COLUMN/20060912/247864/?ST=lin-server&amp;P=3


MySQLのデフォルトの全文検索インデックスも、
分かち書きを別途行えば日本語の全文検索が実現できます。
http://pc8.2ch.net/test/read.cgi/php/1157467026/382
&gt;&gt;
382 ：nobodyさん ：2006/10/05(木) 14:59:05 ID:???
MySQLならMeCabとかで分かち書きして、UTF-8でFULLTEXTに放り込む手もある。
&lt;&lt;


んじゃ、分かち書きさえやってしまえば
SennaのxxxxバインディングとかLudiaなんてイラネー、
って話になるのかというと、そういうわけでもないんでゲス。


Sennaは転置インデックスという形式でインデックスを作っているわけです。
転置インデックスというのは、書籍の巻末によくある索引のようなもので、
ある単語がどの文書に登場するかを、単語ごとに記憶するインデックスです。
(例)Senna p15, p313 : Ludia p3, p93, p135


完全転置インデックスというものがありまして、
これは、ある単語がどの文書の「どの部分に」登場するかを記憶するインデックスです。
Sennaは完全転置インデックスを採用しています。
MySQLやPostgreSQLのGINは完全転置インデックスを採用していません。


たとえば、「検索できない」という文字列で検索が行われるとしましょう。
一般的に、「検索できない」は「検索/でき/ない」と分かち書きされます。


完全転置インデックスであれば、単語の出現位置を記憶しているため、
インデックスのみで「検索できない」という文字列を検索できます。


ところが、出現位置情報を持たない転置インデックスでは、
インデックスのみで「検索できない」という文字列を検索できません。


もっと正確に言うと、「検索できない」という文字列以外のレコードがひっかかってしまうのです。
たとえば、「信頼できた検索エンジンなんてない。」という文書が引っかかってしまいます。
なぜなら、上記の文書は「信頼/でき/た/検索/エンジン/なんて/ない」と分かち書きされてしまうため、
「検索」「でき」「ない」という３つの単語を含んだ文書として判定されてしまうからです。


こういう場合には、いったん全文検索が返してきたレコードを全件をシーケンシャルにチェックして、
「検索できない」という文字列が出現していることを確認しなければなりません。
つまり、インデックスのみで検索が完結せず、grepと同様の処理が余計に必要となっているのです。


全件チェックしないという選択肢もありますが、
その場合は検索結果の精度が落ちてしまいます。


このように、複数の単語がその順番どおりに出現しているものを検索することを
「フレーズ検索」といい、
それを高速に行うためには完全転置インデックスが適しています。
日本語の文書の場合には、
検索クエリで一見フレーズ検索を使っていないように見えても、
分かち書きを行った結果としてフレーズ検索が必要となる場合があります。


たとえDBMSデフォルト組み込みの全件検索がutf-8に対応しても、
仮に分かち書きに対応したとしても、
それだけで高速かつ高精度な日本語検索が行うことはできないのです。


というわけで、黙ってSennaとかLudiaとか使っとけ!!! 悪いようにはせんから。。。


というお話を講演したりする模様。
http://www.dbsj.org/Japanese/Archives/dbjapan/auto/2006/msg00211.html

**[追記1]

上記の講演の資料はこちら
-http://qwik.jp/senna/publication.download/senna-sigmod.pdf

**[追記2]
たたみラボさんからトラックバックをもらったので追記。


MySQLの場合、組み込みのFULLTEXTを使っていて困る点は、
インデックス付与後の逐次更新の遅さとフレーズ検索の遅さ、
そして、他のインデックスを併用することができないという点です。


他のインデックスを併用できないとはどういうことかというと、
検索した結果をorder by last_update descみたいなクエリが遅くなります。


というお話が、明日講演される予定らしい。
http://www.ospn.jp/osc2007-spring/modules/eguide/event.php?eid=25
満席だけど、当日会場に空きがあれば入れるらしいので、
興味のある方は参加されてみてはいかかでしょうか。
</body>
</day>
<day date="2006-10-18" title="">
<body>
*1161164892*[雑談]IBMのFLASH広告が面白い
ずっと前から遊んでいたのだが、
IBMのFLASH広告いいよねえ。


コレがお気に入り。
http://m1.jp.2mdn.net/1168541/IBM_SWG_tbc2_rational_300x300_50k_mugen_0925_opentech_rectangle.swf


Rationalといえば、Purifyが欲しい。
</body>
</day>
<day date="2006-10-23" title="">
<body>
*1161577528*[Senna]広がる広がるSennaの世界
わーいわーい！
Sennaの利用が広がってうれしい今日この頃ですよ。


全文検索ライブラリSennaのPythonバインディング with SWIG
http://www.void.in/wiki/SWIG-senna


SennaのRubyバインディング 非公式ドキュメント
http://mono.kmc.gr.jp/~yhara/w/?RubySenna


バインディングについては、
-まずC++でラッパを書く
-そこからSWIGで変換
-ｳﾏｰ
と考えていたのでした。


SWIGのPHPサポートって進んだのかしら。。。
</body>
</day>
<day date="2006-10-25" title="">
<body>
*1161757435*[開発メモ][Senna]failmallocのようなもの
Sennaでmallocに失敗した場合に、
落ちてしまうパスがいくつかあるようだ。


[http://www.nongnu.org/failmalloc/:title]で検査しようと思ったら、
そもそもMeCabの段階で落ちてしまう。


[http://www.dodgson.org/omo/t/?date=20060728:title]では、
&gt;&gt;
&quot;特定の関数の中でだけ&quot;エラーを起こせるようにした
&lt;&lt;
failmalloc相当のものを使っていたらしい。


んでも、コールスタックをまじめにとるのはさすがにめんどくさいので、
__FUNCTION__マクロ(もしくは__func__マクロ)とgetenvだけで同等の機能を実現できるようにしよう。
全てのmallocはSEN_MALLOCというマクロ経由で呼び出されているので、
これで問題ないじゃろ。
</body>
</day>
<day date="2006-10-31" title="">
<body>
*1162269342*[開発メモ]いまさらsvk
いまさらsvkを使ってみようと思って、
適当にaptitudeでインストール。


svk mirror &amp; syncして、
さっそく試しに作業中のものをコミットじゃー！！！
とコミットしてみたら、
本番に反映されるのね。。。


青ざめた。あせった。


というわけで、今から必死に戻す。
なんでも説明書は読むべきだね。
</body>
</day>
<day date="2006-11-07" title="">
<body>
*1162883565*[Senna]講演してきたりした。
資料はこちら。
http://qwik.jp/senna/publication.download/senna-sigmod.pdf


アガって失敗した。トホホ…


補足すると、
現在のMeCab 0.93+IPADIC 2.7.0では、
「東京都」は「東京/都」に分かち書きされるので、
Sennaの部分一致検索でも検索漏れを救えないのです。

*1162883566*[雑談]講演のあと…
某社の社長、カワイイ系だった。
でもちゃんと帰れたのかしら？

*1162894260*[MeCab]MeCab 0.93で数を表す名詞が長く判断されてしまう
MeCabの0.81だと解析OKだが、0.93だと解析に失敗するケース
-四条口大道檮原本村川科学技術振興事業団潮美横間黒竜江蚕食
-一芸太秦門田小中川少年画報社東大輪内保湾
-一番柳岳駒崎茂松禅寺宥恕笊田愛宕山金膺顯
-九条大国髱大水無瀬島柴又三根川芥見堀田槻木南松山病院絶対温度大森山東京神学大半片中津瀬鷲尾岳鈴蘭姻戚治世花園車道撒布木綿畑獄吏九州厚生年金病院麻睡谷洗馬滝

IPADICの名詞を適当に連結したものを形態素解析かけていたら発見した。
漢数字で始まるのがミソ。


http://plaza.rakuten.co.jp/kugutsushi/diary/200607150000/
こんなエントリもありました。

*1162895949*[開発メモ]IPA（いぱ)サーチ
IPA（いぱ)サーチというものの公募。
知らんかった。
http://www.ipa.go.jp/software/ipasearch/kobo2006/


イパネマの娘。
</body>
</day>
<day date="2006-11-08" title="">
<body>
*1162982379*[Senna][雑談]どーせどーせ、興味持たれないですよ！ブツブツブツブツ
ブックマーク件数が無限大倍。すすり泣く。
http://b.hatena.ne.jp/entry/http://qdbm.sourceforge.net/mikio/he-sigmodj.pdf
http://b.hatena.ne.jp/entry/http://qwik.jp/senna/publication.download/senna-sigmod.pdf


[追記]
Yappoさんのおかげで無限大じゃなくなりました！
裸族サイコー！！！
</body>
</day>
<day date="2006-11-14" title="">
<body>
*1163494330*[Senna]Sennaによる部分一致検索の挙動について
Sennaの部分一致検索時の挙動について、
ACM SIGMOD日本支部大会で質問が出ました。


傀儡師の館 - 組み込み型全文検索エンジン Senna を使ってみる
http://plaza.rakuten.co.jp/kugutsushi/diary/200611120002/
のエントリでも、部分一致検索の挙動についてツッコミが入っています。


というわけで、Sennaの部分一致検索の挙動について説明。
デフォルトでは、以下のような検索処理が行われます。


+クエリを形態素解析する
+(A) それぞれの形態素が、指定された順番で出現する文書を検索
+1件でもヒットすれば、終了
+(B) クエリを形態素解析せずに1つの語として扱い、その語が出現する文書を検索
+1件でもヒットすれば、終了
+クエリを形態素解析する。
+複数の形態素が取り出された場合…
++最初の形態素と後方一致する登録語のリストを作る。リストAと呼ぶ
++最後の形態素と前方一致する登録語のリストを作る。リストBと呼ぶ
++上記以外の形態素を、リストCと呼ぶ
++(C) 以下の(1)(2)(3)を全て満たすシーケンスが出現する文書を検索。(1)リストAのうち、いずれかの要素で始まり (2)リストCの形態素が、指定された順番で出現し (3) リストBのうち、いずれかの要素で終わる
+単一の形態素が取り出された場合…
++(C) クエリ文字列を含む登録語のリストを作り、そのリストのうちいずれかの登録語が出現する文書を検索


「モンゴル航空相撲殺」という文書は「モンゴル」「航空」「相」「撲殺」、
「堰東京都祇園囃子」という文書は「堰」「東京」「都」「祇園」「囃子」と分かち書きされます。
分かち書きのそれぞれの要素がインデックスに登録され、登録語となります。


上記の２文書がインデックスに登録された状態で、
「相撲」という検索語で検索を行う場合を考えます。
まず、「相撲」はこれ以上分かち書きされません。
(A)でも(B)でも検索結果は返ってきません。
(C)では、「相撲」を含む登録語はインデックスに存在しないため、
これも検索結果が返ってきません。


「京都」という検索語で検索を行う場合も同様です。


例えば、
「相 撲」や「京 都」という検索クエリであれば、
(C)によって検索結果が返ってきます。


というわけで、
「航空相撲殺」や「堰東京都祇園囃子」での検索漏れは、
現在のSennaの部分一致検索では救うことが出来ません。


「インド」で検索して「インドネシア」がひっかからないといった検索漏れは、
現在のSennaの部分一致検索で救うことができます。


Sennaでは純粋なN-gramインデックスを作成することが出来ます。
純粋なN-gramインデックスを作成した場合には、
上記の検索漏れを救うことができますが、適合率が落ちてしまいます。


「傀儡師の館」のエントリ内で、
&gt;&gt;
「n-gramインデックスと単語インデックスの特徴を兼ね備えた、高速かつ高精度な転置インデックスタイプのエンジンです。」 ということだから形態素解析の結果にかかわらず n-gram でちゃんとヒットしてほしい。
&lt;&lt;
とツッコまれているが、
上記の売り文句は、
-純粋な単語インデックスよりは再現率が向上し適合率が下落
-純粋なN-gramインデックスよりは適合率が向上し再現率が下落
という意味なのでした。


この問題を解決するために、
MeCabのソフト分かち書きを使いたいと思っているんだけど、
なかなか手が回っていない状況です。
つ http://sslab.nuee.nagoya-u.ac.jp/nlp-youth/paper/okanohara.pdf
つ http://www-tsujii.is.s.u-tokyo.ac.jp/~hillbig/papers/mozilozy.ppt
&gt;&gt;
・速度・作業領域量の向上
　・確率の高い候補から提示可能な索引
&lt;&lt;
をどうすっかだねえ…
</body>
</day>
<day date="2006-11-19" title="">
<body>
*1163949666*[雑談]パイプが詰まった場合に、ぜひ呼んでもらいたい会社があります
こだわりのある人や会社が好きだ。




今住んでいるマンションの浴室は、
以前からちょくちょく詰まっていた。


詰まるたびに、
ラバーキャップ（キュポキュポ）やワイヤーで
なんとか流れるようにして、ごまかしてきたのだ。


しかしついに、
詰まりがひどいあまりに、浴室から水があふれ、
キッチンが水浸しになってしまった。
タニタの体重計も、水に浸かって壊れてしまった。


や、やばい！なんとかしないと！！


というわけで、Googleで水道屋を検索。
クラ○アンでも呼ぼうかとよっぽど思った。
しかし、どうやらこの業界、「最低x千円」の値段から
さらに上がるケースがままある、との話を昔聞いたことがあったため、
ちょっと慎重になったのだ。


今までラバーキャップなどでがんばったり、
１０種類ほどのパイプ洗浄剤を試した僕の経験からして、
我が家の詰まりはちょっと直しにくいのではないか、
というカンもあった。


というわけで、
Googleで100件ほど検索結果を見てみた。
様々な業者のWebページを見た。
見積もり表を見ると、トイレの詰まりの料金は書いてあるが、
浴室の詰まりの料金を書いていないページが多い。


素人目からすると、
汚いトイレの詰まりこそ高い値段がかかってしまうのでは、
と考えるのだが、そうでもないのかな？


そうやって、いろんなページを見ているうちに、
つまり専門のカインドサービスという会社を見つけた。
http://www.kind-service.com/


つまり「専門」である。「専門」。
http://www.kind-service.com/info.html
&gt;&gt;
つまり専門で20年！
ジェット洗浄を低価格でご提供！
&lt;&lt;


２０年も専門。
しかも、ジェット洗浄というちょっと特異な方式。
惹かれる…


こだわりのある人が作成したWebページって、
あまりにこだわりがありすぎて、
どこか胡散臭くなったりすることがままあると思っている。
でも、僕はページから漂う情熱についつい惹かれてしまうのだな。
最低料金がちょっと高めだけど（\26,250…）。


というわけで、電話して呼んでみた。


…カ・イ・カ・ン！！
もう詰まりゼロですよ。
オッチャンと息子？の２人組だったのだが、
微妙なチームワークながらも詰まりをテキパキと解消。


どうやら、
うちの詰まりは一般的な業者では直しにくいものだったらしい。
（おっちゃん談だから話半分として…）
ワイヤーが通らないんだって。


いやあ、こだわり業者を選んでよかった。
ちょっと怪しいなあと思っていたのはナイショ。


んで、
似たような香りがする会社である
logical effectのサーバを買いたいと思っているんだけど、
誰か紹介してくれないかなあ。
http://www.logicaleffect.com/
</body>
</day>
<day date="2006-11-21" title="">
<body>
*1164083841*[技術メモ]ARMのインストラクションセットいいねえ。
ARMのatomic_addについて調べた。


ARMはswp命令を備えているので、
load-&gt;add-&gt;swp-&gt;cmp
でいけるね。


昔、ポケットステーション用のプログラムを触っていたときにちょっと調べたけれども、
もともと6502や65816を触っていたこともあり？
かなり好きなインストラクションセット。


いろんな命令を条件付き実行できるのはいいねえ。
さよなら分岐ですよ。まあ、さよならできないんだけどね。
</body>
</day>
<day date="2006-11-28" title="">
<body>
*1164693732*[物欲]プラズマディスプレイ、安くなったなあ。
ううう…コレ欲しい…
asin:B000F3AKHA:title


しかし、citi cardで日曜日決済だと5%オフなんだよなあ…
悩むぜ。
</body>
</day>
<day date="2006-11-29" title="">
<body>
*1164778826*[技術メモ][Senna]MySQL or PostgreSQL + Sennaのオススメ構成
Sennaの主な利用用途であると考えられる、
データベース組み込み用途。


ブラジル内部でもSennaを用いたサービスを運用していますが、
その運用ノウハウの一部をメモ。

====

- Sennaはメモリ食い

Sennaはインデックスをメモリにマップすることによって
高速な追加・更新・削除を実現しています。
よって、メモリ使用量が多くなっています。


INITIAL_N_SEGMENTSを減らすことによって、
メモリ使用量を下げることができますが、
特に追加・更新においてパフォーマンスが低下します。


また、Linuxの場合、
空きメモリはI/Oキャッシュに割り当てられます。
Sennaのメモリ使用量が多いため、
I/Oキャッシュとして用いられるメモリ容量が減り、
結果としてシステム全体のパフォーマンスが落ちる場合があります。


MySQLのkey_buffer_sizeは、
Sennaと他のインデックスを組み合わせて利用する際に
重要となるチューニングパラメータです。
このkey_buffer用のメモリも必要となります。


さらにメモリが枯渇すると、
スラッシングを起こしてしまったり、
OOM Killerが動いて、
mysqldそのものが落ちてしまう可能性もあります。

- MySQL : MyISAMにしか対応していない
- Pg : Senna部分がトランザクションに対応していない

Sennaはトランザクションにも対応していません。
よって、トランザクションを利用するようなクエリで、
insert/updateのあとrollbackがかかった場合、
Sennaのインデックスにゴミが混じることがあります。


よって、MySQLやPgとSennaを組み合わせた検索エンジンを運用する場合には、
- マスタのデータベースと、検索用のデータベースを分ける
- マスタのデータベースから定期的に検索用のデータベースにデータをコピー
- 検索用のデータベースのスキーマは、マスタのスキーマどおりではなく、検索に適したスキーマとする。場合によっては、正規化も崩す。特にMySQLの場合には、検索に必要なデータを全てまとまた、大きな１つの表を作成するのがいい。
といった運用がオススメです。


これで、Sennaによってメモリを食い尽くされることもなく、
トランザクションを利用したアプリケーションを作成することができ、
パフォーマンスも高い検索システムが出来上がります。


検索用のデータベースサーバは、
以下のようなスペックをオススメします。

- メモリは多めに積む
-- メモリが多い場合は、INITIAL_N_SEGMENTSの値を増やすと特にインデックス追加・更新のパフォーマンスが向上
-- MySQLのkey_buffer_sizeは忘れずに設定する。これを設定しないと、他インデックスと全文検索との組み合わせでパフォーマンスが発揮されない
- CPUはそれなりのコア数・速度があるものを選択
-- N-gram利用のほうがスケールしやすい
- OSはamd64/em64t版で（メモリを多めに積むため・パフォーマンスが向上するため・mmapで仮想空間の枯渇を起こさないため）
</body>
</day>
<day date="2006-12-02" title="">
<body>
*1165054761*[技術メモ][検索エンジン]JiroSearchという検索エンジンがあるようだ。
JiroSearch
http://www.crm.co.jp/jirosearch/
Luceneベース。基本N-Gram。
タグ検索機能がついているらしい。


タグ検索かあ。


検索エンジンは世の中にかなりの数が出ていると思う。
そのうち多くは、転置インデックスをインデックスのデータ構造として採用している印象がある。
ひとえにそれは、
「どの単語がどの文書セットに含まれるか」を保持するという
転置インデックスというデータ構造の単純さと、
単純さのわりに逐次検索を遥かに超える検索能力のためだろう。


タグ検索を行いたい場合にも、
「どのタグがどの文書セットに含まれるか」を保持する転置インデックスを作成すれば
高速で検索を行うことができる((JiroSearchの実装はどうなっているか調べていない。))。


つまり、通常の検索とタグ検索の違いは、
転置インデックスのレコード単位の違いといえるのである。
通常の検索の場合は、単語もしくはN-gram単位のレコード、
タグ検索の場合には、タグ単位のレコードを転置インデックスに保持するのだ。


さて、
コンピュータに自動にやらせるタスクとしては、
&gt;&gt;
タグ付け &gt; 単語の抽出 &gt;&gt;&gt;&gt;(越えられない壁)&gt;&gt;&gt;&gt; N-gramの抽出
&lt;&lt;
の順番で困難であると僕は考える。
ここで、タグ付けは「はてなブックマーク」のタグ付与をイメージしてもらいたい。


「タグ付け」は、文書をいくつかのカテゴリに分類する問題に帰着する。
タグを、あらかじめ与えられた固定のものとし、
なおかつ文書の字面を見ただけで判定できそうなものに限定すれば、
タグ付け自動化の難易度はぐっと下がる。
しかし、
例えば「はてなブックマーク」における「これはひどい」タグなどを
コンピュータが自動的に付与するのは困難だ。
なぜなら、「文書の意味理解」を行わなければいけないためだ。


ソーシャルタギングサービスが面白くて有用なのは、
コンピュータで容易には抽出できないタグが含まれているからだと考えられる。
しかも、あるタグが付与された数をカウントすることによって、
そのタグ付けがどれだけ信頼できるかという情報が得られる。


よって、タグ付けをうまく行うことができれば、
適合率のとっても高い検索を行うことができると考える。
しかし、人間がタグ付けを行っていない文書については検索を行うことができない。


「単語の抽出」もとても難しい問題である。
抽出精度を追及すれば、最終的には「文書の意味理解」が必要となってしまう。
しかし、「文書の意味理解」がなくとも、
よく整備された辞書とコーパスがあれば、
十分実用的だと判断できるレベルまで単語を抽出できる。
なにより、MeCab + IPADICという実用的な単語抽出機がすでに利用可能である。


単語による検索は、一般的にはタグによる検索よりは適合率が低くなるだろう。
コンピュータで単語を抽出することができるため、人間による処理を軽減できる。


N-gramの場合には、
「インド」で「インドネシア」が検索できちゃうよ問題のように、
一般的には単語による検索よりは適合率が低くなるだろう。
しかし、完全にコンピュータによる自動処理が可能である。


というわけで、検索の適合度の面から見ても、
&gt;&gt;
タグ付け &gt; 単語の抽出 &gt;&gt;&gt;&gt;(越えられない壁)&gt;&gt;&gt;&gt; N-gramの抽出
&lt;&lt;
という順番が成り立っているのだ。


さて、
転置インデックスのレコード単位の選択によって、
検索精度は変わるという話をしてきた。
だが、それらのベースとなっている
転置インデックスというデータ構造は変わることはない。


いずれのレコード単位を採用するにせよ、
検索エンジンの開発では、
転置インデックスの作成・検索を高速に実装する必要がある。
というわけで、
Sennaの転置インデックスに関わる部分について、
さらなる高速化をやりたいなぁ、と考えているのでした。
(そこがオチかよ！というツッコミが入りそうだ)


もちろん自動タグ付けにも興味あるよ！あるよ！
</body>
<comments>
<comment>
<username>akipponn</username>
<body>楽しく読ませていただきました。人力タグ付け、機械タグ付け、難しいです。&lt;br&gt;&lt;br&gt;時代がかかえる膨大なデータ量をさばくためには、人力と機械タグ付けの中間、あとは学習するプログラム、、、いい解を探しています。Tim Oreilly の言う bionic system がいい解になりそうで、どう現実解に落とせるか考えています。&lt;br&gt;&lt;br&gt;# 夏に senna + mysql のインストールに四苦八苦していて、ぐにゃらさんのお名前拝見しました。がんばってください。応援しています（＾＾）</body>
<timestamp>1165325064</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>bionic systemというterm自身は知らないのですが、&lt;br&gt;Mechanical Turkみたいなシステムでしょうか。&lt;br&gt;&lt;br&gt;・人に与えるタスクをどう前処理するか&lt;br&gt;・人にどうモチベーションを与えるか&lt;br&gt;・結果をどんな形式で返すか&lt;br&gt;がキモなような気がします。&lt;br&gt;&lt;br&gt;人とコンピュータのインピーダンスミスマッチをどうすりゃええんだろう…&lt;br&gt;&lt;br&gt;# がんばりまーす！インストールに四苦八苦しないように…</body>
<timestamp>1165396060</timestamp>
</comment>
<comment>
<username>akipponn</username>
<body>Bionic Software でした：http://radar.oreilly.com/archives/2006/03/bionic_software_1.html&lt;br&gt;&lt;br&gt;ユーザーに気付かせずに、システムを利用することが裏ではシステムを育てるタスクになるという意味では、突き詰めれば近くなるのかもしれません。&lt;br&gt;&lt;br&gt;# Mechanical Turk は別の意味でおもしろいですよね。もう少しリアルとのマッピングを強めて作りたいです。仕事とか会社で働くという概念を覆すという意味でおもしろそう。</body>
<timestamp>1165651284</timestamp>
</comment>
<comment>
<username>akipponn</username>
<body>&gt; ・人に与えるタスクをどう前処理するか&lt;br&gt;&gt; ・人にどうモチベーションを与えるか&lt;br&gt;&gt; ・結果をどんな形式で返すか&lt;br&gt;まさに。実際サービスはじめないとどうにもわからないですが今２番目に苦しみ中です（＾＾；そういう意味でもサービスしながら修正していける今の時代っておもしろいと思っています。&lt;br&gt;&lt;br&gt;長々失礼しました。</body>
<timestamp>1165651447</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>モチベーションの与え方をちょっと考えてみました。&lt;br&gt;1: 自分のためにやっていることを、&lt;br&gt;   他人にも公開しあうことでメリットを共有する&lt;br&gt;2: 自分の利益になることを他人がやってくれる代わりに&lt;br&gt;   自分は他人の利益になることを行う&lt;br&gt;3: 名誉を与える&lt;br&gt;   (アバターが豪華になる etc.)&lt;br&gt;4: ポイントや金銭を与える&lt;br&gt;&lt;br&gt;うーん…。平凡な案だなあ…&lt;br&gt;サービス内容に合わせて、これらをどう組み合わせるか。&lt;br&gt;サービス立ち上げ当初は、&lt;br&gt;3の「名誉を与える」の演出をうまくやると効果的だと考えます。&lt;br&gt;立ち上げ時にある程度がんばってくれる利用者がいないと、&lt;br&gt;ソーシャルなんとかを謳うわりには誰もいない寂しいサービスとなりそうです。&lt;br&gt;&lt;br&gt;サービス楽しみにしてます！！！</body>
<timestamp>1165726501</timestamp>
</comment>
</comments>
</day>
<day date="2006-12-16" title="">
<body>
*1166294564*[技術メモ]Binary 2.0 カンファレンスにいってきた
Binary 2.0 カンファレンスにいってきた。
どの話も面白かったよ。


Sennaはlock-freeなRCU(Read-Copy-Update)を使っていますよ！
Sennaはlock-freeなRCU(Read-Copy-Update)を使っていますよ！
Sennaはlock-freeなRCU(Read-Copy-Update)を使っていますよ！
と宣伝してみよう。


&gt;&gt;
次回はmallocカンファレンスを…
&lt;&lt;
という声が会場の中で聞こえた。
mallocカンファレンス激希望!!!!!!
[http://www.hoard.org/:title=Hoard]と[http://goog-perftools.sourceforge.net/:title=tcmalloc]と[http://www.pjsip.org/pjlib/docs/html/group__PJ__POOL__GROUP.htm:title=Fast Memory Pool]と[http://code.google.com/p/ememoa/:title=Ememoa]とのガチンコ勝負希望!!!!
(マルチプロセッサ環境に強かったり、スレッドセーフでなかったり、固定サイズに強かったりと、
 それぞれ特色が違うのだ)


ライトニングトークはテンポが重要だね。
そう、メイドインワリオのような感じで。
</body>
<comments>
<comment>
<username>mir</username>
<body>いろいろあってストリーミングも聞けませんでした（＞＜&lt;br&gt;あとでどんなだったか教えてくださいぃぃぃぃ！（＞＜</body>
<timestamp>1166403134</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>了解でーす！！！</body>
<timestamp>1166404302</timestamp>
</comment>
</comments>
</day>
<day date="2006-12-28" title="スパーク！！！">
<body>
*1167323127*[開発メモ][Senna]SPARC用コードを書く…
Ludiaのメーリングリストで、以下のような要望が出ていた。
http://lists.sourceforge.jp/mailman/archives/ludia-users/2006-December/000011.html


SPARCかあ。
[http://d.hatena.ne.jp/tasukuchan/20060813/1155457417:title=昔調べた結果]が使えるぞｳﾋﾋ…


一応、Monoでの実装を見てみる。
&gt;|c|
static inline gint32 InterlockedExchangeAdd(volatile gint32 *_dest, gint32 add)
{
       register volatile gint32 *dest asm(&quot;g1&quot;) = _dest;
       register gint32 tmp asm(&quot;o4&quot;);
       register gint32 ret asm(&quot;o5&quot;);

       __asm__ __volatile__(
               &quot;1:     ld      [%%g1], %%o4\n\t&quot;
               &quot;       add     %%o4, %3, %%o5\n\t&quot;
               /*      cas     [%%g1], %%o4, %%o5 */
               &quot;       .word   0xdbe0500c\n\t&quot;
               &quot;       cmp     %%o4, %%o5\n\t&quot;
               &quot;       bne     1b\n\t&quot;
               &quot;        add    %%o5, %3, %%o5&quot;
               : &quot;=&amp;r&quot; (tmp), &quot;=&amp;r&quot; (ret)
               : &quot;r&quot; (dest), &quot;r&quot; (add)
               : &quot;memory&quot;, &quot;cc&quot;);

        return ret;
}
||&lt;
…う～ん、命令は想像つくが、その前のasm３つが謎だ。
そもそもgとoがよーわからん。gはgeneralかなあ。oはoutput？
SPARC仕様書を読めばいいんだけど、かなりメンドイ。


oは、[http://cvs.m17n.org/~akr/pub/getcontext2006-12-15.pdf:title=getcontextの怪]で出てきた
レジスタウィンドウからみだとは思うんだけど…
と思って検索したら、[http://ja.wikipedia.org/wiki/%E3%83%AC%E3%82%B8%E3%82%B9%E3%82%BF%E3%83%BB%E3%82%A6%E3%82%A3%E3%83%B3%E3%83%89%E3%82%A6:title=Wikipedia]に案外詳しい説明が載っていた。ふむふむ、出力ね。


それより、Monoの実装でcas命令がバイナリで展開してあるのが気になる。gasが通さないのかな？それはヤだな…
実機がない環境で確認できないのがツラい。クロスコンパイルは大変だしな…

</body>
</day>
<day date="2006-12-29" title="">
<body>
*1167373146*[Senna]Senna 0.9.0リリース
わーいわーいリリースリリース！
</body>
</day>
<day date="2007-01-03" title="">
<body>
*1167827811*[雑談]あけおめ
ことよろ。Sennaよろ。


MySQL+Senna/Ludiaのパフォーマンスがかんばしくない場合に
どのように切り分けをしていくか、
という文章を途中まで書いていたんだけど、
気分が乗らなくなって中断。


というわけで(？)、今からPythonの勉強をします。
</body>
<comments>
<comment>
<username>mir</username>
<body>0.9.0リリースわーい！　あけおめことろよです！（＞＜</body>
<timestamp>1167870181</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>わいわいわいわい！</body>
<timestamp>1168082009</timestamp>
</comment>
</comments>
</day>
<day date="2007-01-11" title="">
<body>
*sfnetcompile*[技術メモ]sourceforge.netのコンパイルファームが落ちている？
せっかくSPARC + Solaris用にコードを修正しようと思ったのに、
sourceforge.netのコンパイルファームが落ちているようだ。


sourceforge.jpにはSPARC環境のコンパイルファームがないので悩ましい。
どっかいらないSPARCマシンないかなあ。

</body>
</day>
<day date="2007-01-12" title="">
<body>
*mthesis*[雑談]修士論文が発掘された
ファイルの整理をしていたら、
修士論文が発掘された。


久しぶりに読んだら、いろいろツッコミどころがある…
http://tasuku.suenaga.name/pub/hatena/suenaga-nakamura.pdf


人間のカテゴリ分類能力は偉大だなあ。
</body>
<comments>
<comment>
<username>mir</username>
<body>とりあえず印刷してみました。かっこいい＞＜&lt;br&gt;論文とかちゃんと書いたことないので＾＾；</body>
<timestamp>1168589964</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>ぎゃー！！！紙資源のムダですよ！！！</body>
<timestamp>1168590116</timestamp>
</comment>
<comment>
<username>akipponn</username>
<body>おもしろそうですねー　印刷しました　週末読みます（＾＾）</body>
<timestamp>1168594040</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>ぎゃぼー!!!! 週末はお外に出るといいと思うんだ!!!</body>
<timestamp>1168598072</timestamp>
</comment>
</comments>
</day>
<day date="2007-01-16" title="">
<body>
*wikipedia_he*[全文検索]WikipediaにHyperEstraierの項目が追加
WikipediaにHyperEstraierの項目ができている。
http://ja.wikipedia.org/wiki/Hyper_Estraier


N.M-gram法の詳しい解説を書こうと思ったけど、
眠くなったので中止。
Infobox Softwareを追加したら、ログインし忘れていたよ…
</body>
</day>
<day date="2007-01-25" title="">
<body>
*sudo_pron*[技術メモ][雑談]sudoの正しい発音
職場で話題に出た。


結論は
http://www.gratisoft.us/pipermail/sudo-users/2006-July/002913.html
&gt;&gt;
The correct pronunciation is sue due / soo doo for &quot;superuser do&quot;.

 - todd
&lt;&lt;

僕は、'su'を「えすゆー」と発音しています。もはやswitch userになってますしね。
というわけで、'sudo'は'su'で'do'だから、「えすゆーどぅー」と発音しています。


まあ、人が「すどー」と言っていても大体理解できちゃう、
mallocは「えむあろっく」派の僕なのでした。


このエントリを書いていたら、
タグの読み方というサイトを思い出したよ。
http://www.tagindex.com/statistics/tag_name/index.html
</body>
<comments>
<comment>
<username>yirxs</username>
<body>「あ、すど(sudo)してなかった」&lt;br&gt;「あれ？す(su)ができない」&lt;br&gt;&lt;br&gt;なんて発音を自宅では行ってましたという</body>
<timestamp>1169896653</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>僕も一人でいるときは自分読みだらけです。&lt;br&gt;通じれば問題ないと思う今日このごろです。</body>
<timestamp>1169909085</timestamp>
</comment>
</comments>
</day>
<day date="2007-01-30" title="">
<body>
*senna_php*[Senna][PHP]SennaのPHP bindingを書くための下調べ

http://qwik.jp/senna/PHP_binding.html　より、
&gt;&gt;
mojabi : 
お願いです。PHPでも使用できるようにしてください。
そうすればSennaがさらに普及するのも間違いないと思います。
&lt;&lt;
な、なんと！
そういわれると作りたくなるじゃないか！


というわけで、実現可能性をちょっとだけ調べてみたよ。


上記ページ中に、GREEの小泉さんのツッコミもあります。
&gt;&gt;
Senna の構造上、個別ユーザランド関数の集合 + リソースとして
API をエクスポートするのではなく
クラス単位でまとめることをオススメします。
&lt;&lt;
ふむふむ。
ということは、php extensionでのクラスの扱い方を知らないといけないのね。


というわけで、調べて見つかった記事たち。
-PHP Extension を作ろう第３回 - クラスを作ろう 
http://dsas.blog.klab.org/archives/50903613.html
-PHP拡張でクラス実装がよくわからん
http://www.developer0000.jp/2007/01/07/phpeaycyyeyaaoeieo/


ext/dom/php_dom.cを見ると、
やはりクラスごとにzend_class_entry *を保持しないといけないのね。


zend_register_internal_classに加えて
zend_register_internal_class_exを使っている。
ex付きのほうは、クラスの継承が出来るのかな？


例えば、
&gt;&gt;
dom_domexception_class_entry = zend_register_internal_class_ex(&amp;ce, zend_exception_get_default(TSRMLS_C), NULL TSRMLS_CC);
&lt;&lt;
こういう記述があるんだけど、
これはPHPにもともとあるExceptionクラスを継承しているように見える。
つか、PHPに例外機構ってあったんだっけか…


zend_parse_parametersとzend_parse_parameters_exってのもある。
ZEND_PARSE_PARAMS_QUIETという、エラーメッセージを出さないオプションを第１引数に指定できるらしい。
これは、sen_setやsen_symみたいに、どんな値が入るかわからんポインタを扱うためのものらしいぞ。


というわけで、ボチボチ調べながら書いていきます…
そういえばSPARC対応もしないといけないんだったな…
</body>
</day>
<day date="2007-02-06" title="ヴィジュアライズの力">
<body>
*zukaisitenee*[雑談]図って難しいよね…
【図解】 LinuxサーバーとWindowsサーバーの違い
http://www.popxpop.com/archives/2007/02/windowslinux.html


元記事見ても図の構成要素見えねー。
WindowsでApacheを動かしたときの図も見たいね。


しかし、こういう図示はやはり説得力を持つと思われるんだなあ、
と思った。

[追記]
P O P * P O Pの記事に追記がなされたようです。

*netra_lom*[Senna]Netra X1のシリアルケーブルが見つかったよ！
SennaのSPARC対応のために借りたNetra X1。
LOMというLAN兼管理ポートみたいな奴に繋げるシリアルケーブルが
行方不明だったのだが、やっと発見された。
(訂正:LOMポートとシリアルポートは別でした)

これでSPARC対応ができるど！！！
と思ったけど、シリアルケーブルがつながる端末がないぞ…
</body>
<comments>
<comment>
<username>はじめまして</username>
<body>最初、リンク先を読んだ時は何故賞賛されているのだろう…と思ったのですが、痛烈に皮肉っていらっしゃるのですね。&lt;br&gt;このブログ主は朝日新聞なんかで、柳沢発言なんかを無知な読者に知らしめるのに才能を発揮しそうですね。&lt;br&gt;&lt;br&gt;と思ったら百式の中の人か。なんか質が下がったよなぁ、百式も。</body>
<timestamp>1170812738</timestamp>
</comment>
</comments>
</day>
<day date="2007-02-07" title="">
<body>
*poppoptrivia*[雑談]今日もP O P * P O P
MS大好きっことして、
昨日の「【図解】 LinuxサーバーとWindowsサーバーの違い」の記事をつい書いちゃったわけです。


んで、P O P * P O Pを見てみると、
嘘のようなほんとの話（またしてもトリビア）
http://www.popxpop.com/archives/2007/02/55.html
というエントリが。


２つほどミスを発見しちゃった。いやらしい性格なのでココで書いちゃうYO!!!
-「人間は平均して毎朝3回目覚ましを止めている。」が２つ載っている
-「the quick brown fox jumps over the lazy dog」は同じ文字を重複して使っている。だって35文字だもん…


「the quick brown fox jumps over the lazy dog」については、
Wikipediaに解説がある。また、パングラムの項も参考になる。面白い！
http://ja.wikipedia.org/wiki/The_quick_brown_fox_jumps_over_the_lazy_dog
http://ja.wikipedia.org/wiki/%E3%83%91%E3%83%B3%E3%82%B0%E3%83%A9%E3%83%A0
</body>
</day>
<day date="2007-02-08" title="">
<body>
*rakuten_mobile*[雑談]RFCに合致するけど問題のあるメールアドレス
僕が使っている携帯のメールアドレスと会社のメールアドレスは、
どちらも様々なサイトで利用できないです。


携帯のメールアドレスは、「-」で始まっています。
これはRFCに準拠したメールアドレスです。
（例えば、「.」の連続はRFCには合致しません）
しかし、いくつかのサイトではメール送信がエラーとなるようです。


Postfixではデフォルトの設定では上記のようなメールアドレスがエラーとなります。
参考：http://slashdot.jp/mobile/comments.pl?sid=318448&amp;cid=951994


また、会社のメールアドレスは、@の前が1文字です。
たまにフォームチェックでひっかかることがあります。
こちらももちろんRFC準拠です。


こんなエントリをなんで書いたかというと、
楽天モバイルのポイント２倍登録なんかのメールが、
「-」が先頭のアドレスに対応していないからじゃ～～～！！！


モバイルサービスを実装する人は、
自分の携帯電話のアドレスを、
ちょっと変なメールアドレスにしておくといいかもしれない。
</body>
<comments>
<comment>
<username>coji</username>
<body>そういえば以前顔文字をアドレスにしてる人がいたりして驚愕しました。&lt;br&gt;日本でケータイやってるとRFC見ても意味ないので困ってしまいますね &gt;&lt;</body>
<timestamp>1170911327</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>^_^@docomo.ne.jpみたいなアドレスですよね…（このアドレス、有効だったらゴメンナサイ）&lt;br&gt;キャリアが許している限りRFC違反のメールアドレスにも対応したほうがサービス利用者としてはうれしいですし、&lt;br&gt;僕のアドレスはRFC準拠なのに通らんとはどういうことだ！！！&lt;br&gt;と器の小さい僕はご立腹中なのです。プンプン。</body>
<timestamp>1170911792</timestamp>
</comment>
</comments>
</day>
<day date="2007-02-12" title="">
<body>
*sigres_ludia*[Senna][Ludia]SigresでLudia
SigresでLudiaは使えるのかなぁ…
http://sourceforge.jp/projects/sigres/


現在LudiaがPg 8.1にしか対応していないので、
8.2に対応したら使えると予想。

</body>
</day>
<day date="2007-02-13" title="Python月間">
<body>
*learn_turbogears*[Python]TurboGearsを勉強するもMATCH AGAINSTできねっす
思いつきで、TurboGearsを勉強。
Pythonもろくに出来ないのだが。


とりあえず、20分でできるWikiをやってみる。
http://docs.turbogears.org/1.0/Wiki20/


…１時間強くらいかかったよ…プログラマ向いてないのかな…


で、SQLObjectでMySQLの全文検索クエリであるmatch againstを発行する方法が見つからない。


SQLObjectでPostgreSQLのtsearch2を使う方法はあるみたいだ。
http://pythonpaste.org/archives/message/20040207.141614.22f8f757.en.html


SQLObjectではなくて、SQLAlchemyを使えばいけるみたい。
http://permalink.gmane.org/gmane.comp.python.sqlalchemy.user/5183


Djangoでは、
Extending Django’s database API to include full-text search
http://www.mercurytide.com/whitepapers/django-full-text-search/
にある方法でできるようだ。


TurboLucene(pyLucene使用)とかHyperEstraierとかXapianとか他のエンジンだったら情報がある…
http://groups.google.com/group/turbogears/browse_thread/thread/a4fff25ac27a1b64


素のSQLObjectでMATCH AGAINST発行する方法誰か教えてわ～～ん！！！
むう。SQLAlchemyのチュートリアルでも読んでみるかね…


もしくは、早速Djangoに乗り換えるか。
</body>
<comments>
<comment>
<username>everes</username>
<body>Djangoへようこそw</body>
<timestamp>1171430049</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>うひひ。なんかDjango気分になってきたぞ！！！</body>
<timestamp>1171430117</timestamp>
</comment>
<comment>
<username>aodag</username>
<body>できますよー。でもSQLObjectで寂しい思いをしたらSQLAlchemyをどうぞ</body>
<timestamp>1171577250</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>おおお！sqlbuilder素晴らしい！&lt;br&gt;DjangoとTG両刀使いになれとの指令ですな、これは。&lt;br&gt;SQLAlchemyも試してみます！！！</body>
<timestamp>1171594265</timestamp>
</comment>
</comments>
</day>
<day date="2007-02-14" title="">
<body>
*switch2django*[Python]Djangoに乗り換えちゃうぜ～
常山日記からトラックバックがきた！！！
http://d.hatena.ne.jp/johzan/20070214


さらに、昨日のTG文句日記にもコメントがきた！！！


単純だからDjangoに乗り換えちゃうぜ～。


そういえば、３月に長野あたりで予定されていたPythonなんとか合宿に参加しようかな、と
Googleグループに登録までしたものの、
急に弱気になってグループ登録まで取り消したことを思い出したよ。
ああ非コミュニケーション。

*hatena_icon*[雑談]はてなブックマークのアイコン
どうやって変更するのかず～～っとわからなかったんだけど、
やっとわかった。プロフィール画像っていうのがあるのね。


というわけで、ちゃっちゃっと作ってアップしてみた。
[f:id:tasukuchan:20070214204211j:image]
フォトライフって使うの初めてかも…
</body>
<comments>
<comment>
<username>常山</username>
<body>まずはchatのhttp://www.lingr.com/room/django-jaはいかがですか?&lt;br&gt;ここでは、Django and TurboGears温泉(http://www.djangoproject.jp/spa/)の&lt;br&gt;予定もあります。まだ間に合いますよ :)</body>
<timestamp>1171431633</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>すてき！！！&lt;br&gt;実はPythonのフレームワークを勉強しようとしたきっかけは、&lt;br&gt;wxPythonクライアントのシステムを作りたいと思ったからなんです。&lt;br&gt;というわけで、特別企画興味ありありですよ。&lt;br&gt;&lt;br&gt;６月かあ・・・予約入れてみようかなぁ。</body>
<timestamp>1171440591</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>lingrにも参加してみよっと。</body>
<timestamp>1171440605</timestamp>
</comment>
<comment>
<username>常山</username>
<body>是非是非!お待ちしています :)</body>
<timestamp>1171443350</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>lingr、誰もいなくて、入ったもののすぐ出ちゃいました！&lt;br&gt;まめに繋いでみるようにしますね。</body>
<timestamp>1171453443</timestamp>
</comment>
<comment>
<username>Voluntas</username>
<body>温泉行きます？&lt;br&gt;行くのなら登録しちゃいます:-P</body>
<timestamp>1171578151</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>温泉行きまーーーーーーーーーーーーーーーーす！！！！！</body>
<timestamp>1171594333</timestamp>
</comment>
<comment>
<username>Voluntas</username>
<body>こちらにも一応3/10のDjango勉強会にて、10分ほど簡単なトークをお願いしたいのですが大丈夫でしょうか?（ギリギリの連絡で済みません）</body>
<timestamp>1172662308</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>了解です！DjangoでのSennaのりようについてトーク＆トークいたします！&lt;br&gt;お声をかけていただき、ありがとうございます。</body>
<timestamp>1172663103</timestamp>
</comment>
</comments>
</day>
<day date="2007-02-19" title="">
<body>
*django_fulltext*[Django]fulltext検索サポートはもともとあるらしい
[patch] Fulltext search support in Django
http://code.djangoproject.com/ticket/593
Changeset 3073
http://code.djangoproject.com/changeset/3073
こんなんあったのね。


他のDBMSにも対応しているようです。
http://code.djangoproject.org/attachment/ticket/3254/fts-pstgres-oracle-mssql.patch


これでDjangoでfulltext三昧じゃ～い!!!
(実はやっとDjangoのチュートリアルが終わったのさ…)

*gunma_kodomo_50rules*[雑談]ぐんまの子どものための５０のルール
ぐんまの子どものための５０のルール
http://www.pref.gunma.jp/kyoi/01/rule/rule1.html

個人的には24,42,47がツボ。
</body>
</day>
<day date="2007-02-20" title="">
<body>
*fulltext_benkyokai*[全文検索]全文検索勉強会開きたい！
http://d.hatena.ne.jp/Voluntas/20070219/1171885382
全文検索勉強会！
全文検索勉強会！


Hyper Estraierの平林さんとも
「勉強会やりましょう！！」と言ったっきりなんですが、
全文検索勉強会をやったらどのくらい人が集まるんでしょうか。


そして!!!
Sennaも1.0を出したら原稿を持ち込むぞッ!!! (涙目で)

*senna_conference*[全文検索][Senna][Hyper Estraier]やるぞ！Sennaカンファレンス
前々からやりたいと思っていたSennaカンファレンスですが、
id:yappoさんがこんなページを作ってくれたよ！
http://soozy.org/index.cgi?SennaConference1


というわけで、参加希望者はじゃんじゃん登録してください！
会場もプログラムも何も決まってないけどな！！！


Sennaカンファレンスという名前だけど、
プロダクトを問わないSearch Softwareに関する勉強会です。
SennaとかHyper Estraierとかの話をする会になる予定。
</body>
<comments>
<comment>
<username>coji</username>
<body>とりあえずぼくならいきますね。うちの会社だけでも3人は固いとおもわれ。&lt;br&gt;涙目がんばってくださいw</body>
<timestamp>1171944239</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>おおお！３人も！&lt;br&gt;しかも、固い人が！（違う）&lt;br&gt;&lt;br&gt;みんなHyper Estraier君ばっかかまって、&lt;br&gt;Senna君にかまってくれないんだもん（涙目）</body>
<timestamp>1171959973</timestamp>
</comment>
<comment>
<username>yirxs</username>
<body>僕もいきまーす！</body>
<timestamp>1172044263</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>ぜひぜひぜひ！！</body>
<timestamp>1172126160</timestamp>
</comment>
<comment>
<username>eto</username>
<body>とりあえず俺も!</body>
<timestamp>1172220799</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>うひー、etoさんまで。&lt;br&gt;大きめの会場を探すかなあ・・・</body>
<timestamp>1172245544</timestamp>
</comment>
</comments>
</day>
<day date="2007-02-24" title="">
<body>
*senna_1_0_0*[Senna]Senna 1.0.0リリース！！！
Sennaの1.0.0がリリースされました！！！


本当は金曜日にリリースしたんだけど、
MLのあて先を間違えていて…リリースメールが届いていなかったという…
恥ずかしい。
結局、スラドにだけリリースが伝わった形になってしまいました。


インデックス形式が変わったりしているので、
もし何か問題があったらMLなどに報告してください。


今年前半はSennaの開発もガンガン進める予定なので、
皆さんヨロシクヨロシク。
</body>
</day>
<day date="2007-02-28" title="">
<body>
*pear_codegen_mysql_udf*[PHP][MySQL]PEAR::CodeGen_MySQL_UDF
ところで、PEARを漁っていると、PEAR::CodeGen_MySQL_UDFなるものも発見。
http://pear.php.net/package/CodeGen_MySQL_UDF


MySQLのUDF(ユーザ定義関数)をXMLの定義ファイルから自動生成してくれるらしい。
外部ライブラリを利用したUDFが書きやすくなるんじゃないかしら。

*pear_codegen_senna*[Senna][PHP]PEAR::CodeGen_PECLでPHP拡張を書いてみよう(その1)

(この記事は随時更新していきます)


SennaのPHPバインディングのページに、PHPバインディングを希望する声が続々！
http://qwik.jp/senna/PHP_binding.html


実は、以前PHPバインディングを書いていたののの、
rm -rfですべてを消し去るというステキな行為をやらかしてしまったのでした。


で、新たにPHPバインディングを書き直していたのですが、
どうやら以下の記事によると、PEAR::CodeGen_PECLっていう便利なものがあるらしい。
■[PEAR]PEAR::CodeGen_PECL事始め
http://d.hatena.ne.jp/shimooka/20061030/1162200754


というわけで、
PEAR::CodeGen_PECLを使ってSennaのPHPバインディングを書く過程を記録に残してみます。
日本語の情報は少ないようなので、ちょっとは役に立つかな？


SWIGは、PHPの対応状況がイマイチらしいのが難点…
PHPは詳しくないので、間違っていたらツッコミお願いいたします。

=====

** codegen_peclのインストール

&gt;|sh|
sudo aptitude install php5-pear
sudo pear install -a codegen_pecl
||&lt;
これでインストールされます。簡単ですね。

** モジュールの定義ファイルを作成する

さて、手始めにSennaのbasic APIの定義ファイルを書いてみましょう。
定義ファイルの大まかな構造は以下のような感じです。
- PHP拡張の情報（拡張名や作者やライセンスなど）
- 依存するヘッダファイル・ライブラリ
- 初期化・終了用関数
- 定数
- リソース
- 関数
- テスト


MINITで初期化用の関数を、MSHUTDOWNで終了用の関数を指定できます。
Sennaでいうと、sen_init()とsen_fin()です。


定数は、型と値を指定することができます。
両者を指定しないでおくと、Cの#defineの値をそのまま持ってきてくれるようです。


sennaのAPIはxxx_openでオブジェクトのインスタンスを取得し、
xxx_closeでインスタンスを破棄するという構造になっています。
そのインスタンスを、PHPでいうリソースに割り当てるとよいようです。
リソースの開放時に呼ばれる関数も&lt;destruct&gt;で指定できます。


関数の引数にリソースがあり、その名前がresでない場合には、
'res_'というprefixがついたものがCの変数となります。
例えば、resource sen_index indexが引数にある場合、
res_indexというCの変数にリソースを表すポインタが入ってきます。


関数がリソースを返す場合、
return_resという変数にリソースを表すポインタを入れてあげれば大丈夫のようです。


引数の型は、数値はlong型、文字列はstring型を割り当てます。
文字列引数の名前の最後に_lenをつけると、
その文字列の長さを得ることができます。


数値や文字列を返す場合には、
RETURN_LONGやRETURN_STRING(ヌル終端文字列)、RETURN_STRINGL(長さつき文字列)などで返します。


arrayを返す場合には、return_valueという値を用います。
&lt;del datetime=&quot;2007-06-20T21:18:24+09:00&quot;&gt;まず、array_init(return_value)を行います。&lt;/del&gt;
（追記：返り値がarrayだと勝手にarray_init(return_value)を入れてくれるようです）
次に、add_next_index_longやadd_next_index_string、add_next_index_stringlなどで
配列の要素を追加していきます。


呼び出し側でバッファを確保してあげる必要のある関数は、
バッファの最大長がわかっているため、
最大長ぶんのバッファを確保してみました。


テストは、ちゃんと作るのがめんどくさいんで、
ダミーのテストを１つ書いてみました。


というわけで、こんな定義ファイルができあがりました。

&gt;|xml|
&lt;extension name=&quot;senna&quot; version=&quot;0.0.1&quot;&gt;
 &lt;summary&gt;Senna PHP extension&lt;/summary&gt;
 &lt;description&gt;
  Senna PHP extension
 &lt;/description&gt;
 &lt;maintainers&gt;
  &lt;maintainer&gt;
   &lt;user&gt;gunyarakun&lt;/user&gt;
   &lt;name&gt;Tasuku SUENAGA&lt;/name&gt;
   &lt;email&gt;a at razil.jp&lt;/email&gt;
   &lt;role&gt;lead&lt;/role&gt;
  &lt;/maintainer&gt;
 &lt;/maintainers&gt;
 &lt;release&gt;
  &lt;version&gt;0.0.1&lt;/version&gt;
  &lt;date&gt;2007-02-25&lt;/date&gt;
  &lt;state&gt;alpha&lt;/state&gt;
  &lt;notes&gt;
    First version.
  &lt;/notes&gt;
 &lt;/release&gt;
 &lt;changelog&gt;
 &lt;/changelog&gt;
 &lt;license&gt;PHP&lt;/license&gt;
 &lt;logo src=&quot;senna_logo.jpg&quot; mimetype=&quot;image/jpeg&quot; /&gt;
 &lt;deps language=&quot;c&quot; platform=&quot;all&quot;&gt;
  &lt;with defaults=&quot;/usr:/usr/local&quot; testfile=&quot;include/senna/senna.h&quot;&gt;
   &lt;header name=&quot;senna/senna.h&quot; /&gt;
   &lt;lib name=&quot;senna&quot; platform=&quot;all&quot; function=&quot;sen_init&quot; /&gt;
  &lt;/with&gt;
 &lt;/deps&gt;
 &lt;function role=&quot;internal&quot; name=&quot;MINIT&quot;&gt;
  &lt;code&gt;
    &lt;![CDATA[
     sen_init();
    ]]&gt;
  &lt;/code&gt;
 &lt;/function&gt;
 &lt;function role=&quot;internal&quot; name=&quot;MSHUTDOWN&quot;&gt;
  &lt;code&gt;
    &lt;![CDATA[
     sen_fin();
    ]]&gt;
  &lt;/code&gt;
 &lt;/function&gt;
 &lt;function role=&quot;internal&quot; name=&quot;MINFO&quot; /&gt;
 &lt;constants&gt;
  &lt;constant name=&quot;SEN_INDEX_NORMALIZE&quot;&gt;
  &lt;/constant&gt;
  &lt;constant name=&quot;SEN_INDEX_SPLIT_ALPHA&quot;&gt;
  &lt;/constant&gt;
  &lt;constant name=&quot;SEN_INDEX_SPLIT_DIGIT&quot;&gt;
  &lt;/constant&gt;
  &lt;constant name=&quot;SEN_INDEX_SPLIT_SYMBOL&quot;&gt;
  &lt;/constant&gt;
  &lt;constant name=&quot;SEN_INDEX_MORPH_ANALYSE&quot;&gt;
  &lt;/constant&gt;
  &lt;constant name=&quot;SEN_INDEX_NGRAM&quot;&gt;
  &lt;/constant&gt;
  &lt;constant name=&quot;SEN_INDEX_DELIMITED&quot;&gt;
  &lt;/constant&gt;
  &lt;constant name=&quot;SEN_INDEX_ENABLE_SUFFIX_SEARCH&quot;&gt;
  &lt;/constant&gt;
  &lt;constant name=&quot;SEN_INDEX_DISABLE_SUFFIX_SEARCH&quot;&gt;
  &lt;/constant&gt;
  &lt;constant name=&quot;SEN_INDEX_WITH_STORE&quot;&gt;
  &lt;/constant&gt;
  &lt;constant name=&quot;SEN_INDEX_WITH_VACUUM&quot;&gt;
  &lt;/constant&gt;
  &lt;constant name=&quot;SEN_INDEX_TOKENIZER_MASK&quot;&gt;
  &lt;/constant&gt;

  &lt;constant name=&quot;SEN_SYM_MAX_KEY_SIZE&quot;&gt;
  &lt;/constant&gt;

  &lt;constant name=&quot;SEN_ENC_DEFAULT&quot; type=&quot;int&quot; value=&quot;0&quot;&gt;
  &lt;/constant&gt;
  &lt;constant name=&quot;SEN_ENC_NONE&quot; type=&quot;int&quot; value=&quot;1&quot;&gt;
  &lt;/constant&gt;
  &lt;constant name=&quot;SEN_ENC_EUC_JP&quot; type=&quot;int&quot; value=&quot;2&quot;&gt;
  &lt;/constant&gt;
  &lt;constant name=&quot;SEN_ENC_UTF8&quot; type=&quot;int&quot; value=&quot;3&quot;&gt;
  &lt;/constant&gt;
  &lt;constant name=&quot;SEN_ENC_SJIS&quot; type=&quot;int&quot; value=&quot;4&quot;&gt;
  &lt;/constant&gt;
  &lt;constant name=&quot;SEN_ENC_LATIN1&quot; type=&quot;int&quot; value=&quot;5&quot;&gt;
  &lt;/constant&gt;
  &lt;constant name=&quot;SEN_ENC_KOI8R&quot; type=&quot;int&quot; value=&quot;6&quot;&gt;
  &lt;/constant&gt;
 &lt;/constants&gt;

 &lt;globals /&gt;

 &lt;resources&gt;
  &lt;resource name=&quot;sen_index&quot; payload=&quot;sen_index&quot; alloc=&quot;no&quot;&gt;
   &lt;description&gt;
    sen_index resource
   &lt;/description&gt;
   &lt;destruct&gt;
    sen_index_close(resource);
   &lt;/destruct&gt;
  &lt;/resource&gt;
  &lt;resource name=&quot;sen_records&quot; payload=&quot;sen_records&quot; alloc=&quot;no&quot;&gt;
   &lt;description&gt;
    sen_records resource
   &lt;/description&gt;
   &lt;destruct&gt;
    sen_records_close(resource);
   &lt;/destruct&gt;
  &lt;/resource&gt;
 &lt;/resources&gt;

 &lt;function name=&quot;sen_index_create&quot;&gt;
  &lt;proto&gt;resource sen_index sen_index_create(string path, int flags, int initial_n_segments, int sen_encodings)&lt;/proto&gt;
  &lt;code&gt;
   /* FIXME: now key_size is fixed to 0, so only string keys are accepted. */
   return_res = sen_index_create(path, 0, flags, initial_n_segments, sen_encodings);
   if (!return_res) RETURN_FALSE;
  &lt;/code&gt;
 &lt;/function&gt;

 &lt;function name=&quot;sen_index_open&quot;&gt;
  &lt;proto&gt;resource sen_index sen_index_open(string path)&lt;/proto&gt;
  &lt;code&gt;
   return_res = sen_index_open(path);
   if (!return_res) RETURN_FALSE;
  &lt;/code&gt;
 &lt;/function&gt;

 &lt;function name=&quot;sen_index_close&quot;&gt;
  &lt;proto&gt;void sen_index_close(resource sen_index res)&lt;/proto&gt;
  &lt;code&gt;
   FREE_RESOURCE(res);
  &lt;/code&gt;
 &lt;/function&gt;

 &lt;function name=&quot;sen_index_remove&quot;&gt;
  &lt;proto&gt;int sen_index_remove(string path)&lt;/proto&gt;
  &lt;code&gt;
   RETURN_LONG(sen_index_remove(path));
  &lt;/code&gt;
 &lt;/function&gt;

 &lt;function name=&quot;sen_index_rename&quot;&gt;
  &lt;proto&gt;int sen_index_remove(string old_name, string new_name)&lt;/proto&gt;
  &lt;code&gt;
   RETURN_LONG(sen_index_rename(old_name, new_name));
  &lt;/code&gt;
 &lt;/function&gt;

 &lt;function name=&quot;sen_index_upd&quot;&gt;
  &lt;proto&gt;int sen_index_upd(resource sen_index index, string key,
                            string oldvalue, string newvalue)&lt;/proto&gt;
  &lt;code&gt;
   RETURN_LONG(sen_index_upd(res_index, key, oldvalue, oldvalue_len, newvalue, newvalue_len));
  &lt;/code&gt;
 &lt;/function&gt;

 &lt;function name=&quot;sen_index_sel&quot;&gt;
  &lt;proto&gt;resource sen_records sen_index_sel(resource sen_index index, string string)&lt;/proto&gt;
  &lt;code&gt;
   return_res = sen_index_sel(res_index, string, string_len);
   if (!return_res) RETURN_FALSE;
  &lt;/code&gt;
 &lt;/function&gt;

 &lt;function name=&quot;sen_records_next&quot;&gt;
  &lt;proto&gt;array sen_records_next(resource sen_records records)&lt;/proto&gt;
  &lt;code&gt;
  &lt;![CDATA[
   char keybuf[SEN_SYM_MAX_KEY_SIZE];
   int keysize, score;

    keysize = sen_records_next(res_records, keybuf, SEN_SYM_MAX_KEY_SIZE, &amp;score);
   if (keysize) {
     /*array_init(return_value);*/
     add_next_index_stringl(return_value, keybuf, keysize, 1);
     add_next_index_long(return_value, score);
   }
  ]]&gt;
  &lt;/code&gt;
 &lt;/function&gt;

 &lt;function name=&quot;sen_records_rewind&quot;&gt;
  &lt;proto&gt;int sen_records_rewind(resource sen_records records)&lt;/proto&gt;
  &lt;code&gt;
   RETURN_LONG(sen_records_rewind(res_records));
  &lt;/code&gt;
 &lt;/function&gt;

 &lt;function name=&quot;sen_records_curr_score&quot;&gt;
  &lt;proto&gt;int sen_records_curr_score(resource sen_records records)&lt;/proto&gt;
  &lt;code&gt;
   RETURN_LONG(sen_records_curr_score(res_records));
  &lt;/code&gt;
 &lt;/function&gt;

 &lt;function name=&quot;sen_records_curr_key&quot;&gt;
  &lt;proto&gt;string sen_records_curr_key(resource sen_records records)&lt;/proto&gt;
  &lt;code&gt;
  &lt;![CDATA[
   char keybuf[SEN_SYM_MAX_KEY_SIZE];
   int keysize;

   keysize = sen_records_curr_key(res_records, keybuf, SEN_SYM_MAX_KEY_SIZE);
   RETURN_STRINGL(keybuf, keysize, 1);
  ]]&gt;
  &lt;/code&gt;
 &lt;/function&gt;

 &lt;function name=&quot;sen_records_nhits&quot;&gt;
  &lt;proto&gt;int sen_records_nhits(resource sen_records records)&lt;/proto&gt;
  &lt;code&gt;
   RETURN_LONG(sen_records_nhits(res_records));
  &lt;/code&gt;
 &lt;/function&gt;

 &lt;function name=&quot;sen_records_find&quot;&gt;
  &lt;proto&gt;int sen_records_find(resource sen_records records, string key)&lt;/proto&gt;
  &lt;code&gt;
   RETURN_LONG(sen_records_find(res_records, key));
  &lt;/code&gt;
 &lt;/function&gt;

 &lt;test name=&quot;basic_api&quot;&gt;
  &lt;title&gt;basic_api test&lt;/title&gt;
  &lt;code&gt;echo 'OK';&lt;/code&gt;
 &lt;/test&gt;

&lt;/extension&gt;
||&lt;

** モジュール定義ファイルからPHP拡張を作る

以下のコマンドを実行すれば、
sennaのPHP拡張がインストールされます。
うん、簡単簡単。

&gt;|sh|
pecl-gen --force senna_extension.xml
cd senna
phpize
./configure &amp;&amp; make &amp;&amp; sudo make install
||&lt;

** 実際にsennaのphpバインディングを使ってみる

こんな感じで使えます。
いやあ、便利だなあ…

&gt;|php|
&lt;?php
// phpバインディング読み込み
if (!extension_loaded('senna')) {
    $_module_suffix = (PHP_SHLIB_SUFFIX == 'dylib') ? 'so' : PHP_SHLIB_SUFFIX;
    dl('senna.' . $_module_suffix) || die('skip');
}

define(INDEX_NAME, 'test_index');

// index作成
$index = sen_index_create(INDEX_NAME, SEN_INDEX_NORMALIZE | SEN_INDEX_NGRAM, 512, SEN_ENC_EUC_JP);

// ドキュメント追加
sen_index_upd($index, '/www/docs/index.html', NULL, 'test document is here.');
sen_index_upd($index, '/www/docs/menu.html', NULL, 'test test test test.');

// ドキュメント検索
$records = sen_index_sel($index, 'test');

// ドキュメントのkeyとスコアを取得
while ($record = sen_records_next($records)) {
  list ($key, $score) = $record;
  echo &quot;key: $key score: $score\n&quot;;
}

// インデックス削除
sen_index_remove(INDEX_NAME);
%&gt;
||&lt;

** まとめ

pecl-genは超便利です。


今後の予定として、
-basic API以外のAPIに対応する
-クラスに対応する
というのをやっていこうかと考えています。


http://svn.razil.jp/php_senna/trunkにて、
最新版の定義ファイル等を提供していく予定です。

</body>
</day>
<day date="2007-03-01" title="">
<body>
*sqlite_senna_syobon*[SQLite][Senna]SQLiteスレでのSennaの話題

http://pc11.2ch.net/test/read.cgi/db/1162621344/446
&gt;&gt;
Sennaスレ http://pc8.2ch.net/test/read.cgi/php/1118762053/ 
に書き込むか迷ったけど、あっちはPHP板なのでここに書いてみる。 

mecab の src/Makefile.msvc.in をそのまま使うと iconv-win32 が微妙だったので 
iconv依存を除去してみた。iconv依存な部分はちゃんと隔離されていたし、 
変換自体はMultiByteToWideCharを使えばいいので十数行程度の変更で収まる。 

iconv のcp932は変換テーブルが微妙に異なるのが気に入らん。 
ttp://www.miraclelinux.com/technet/samba30/iconv_issues.html 
ttp://damedame.monyo.com/?date=20061220 

辞書はutf8のが良かったんだけど、これはx86なLinuxで生成したのがそのまま使える気配。 

sennaは.cと.hだけ持ってきて適当にマクロを定義したらビルドできた。 
リンカのコード生成が妙に遅かったけど。 

環境はMicrosoft Visual C++ 2005
&lt;&lt;
iconv問題はMeCabがバージョンアップしたので
(自前で変換テーブル持つようになった)
問題なくなった。


http://pc11.2ch.net/test/read.cgi/db/1162621344/453
&gt;&gt;
SQLiteのFTS1モジュールって完全転置インデクスだしカラムと位置まで覚えてるし、 
実は思ったほど悪くないんじゃないか 
…と思ったら、もうCVSにはFTS2が出てて、インデクス作成時間が大幅に短くなってんのか。 

Senna組み込んでもカラムは覚えられないし、 
FTSのtokenizerをマルチバイト対応させた方が幸せなケースもあるのかもしれん。 
&lt;&lt;
これは、そうなのかもなぁ…
</body>
</day>
<day date="2007-03-03" title="">
<body>
*senna_2ch_thread*[Senna]2chのSennaスレッドが伸びていると思ったら
2chのSennaスレッドがやけに伸びていると思ったら、
http://pc11.2ch.net/test/read.cgi/php/1118762053/


荒れていた…


dump→リビルド→データ流し込むの作業はいらない気がしますが、
まあ、ビルドはめんどくさいですよね…
</body>
</day>
<day date="2007-03-04" title="">
<body>
*mediawiki_plaintext*[全文検索]Wikipediaの記事をPlainTextにしたい
Wikipediaの記事検索はデモに使えるので、
MediaWikiの記事をプレインテキストにしたい場合がよくある。


以下のページにパーサ一覧みたいなものがあるんだけど、
どれもHTML出力が多くて…
http://meta.wikimedia.org/wiki/Alternative_parsers
さらに、日本語に対応しているかどうかも重要ですよね。


とりあえず、自分メモからパーサをいくつかピックアップしてみた。


-Perl
http://search.cpan.org/~dprice/Text-MediawikiFormat-0.05/lib/Text/MediawikiFormat.pm
http://search.cpan.org/~dprice/Wiki-Toolkit-Formatter-Mediawiki-0.02/lib/Wiki/Toolkit/Formatter/Mediawiki.pm
（どっちも、昔試してみた記憶だとうまくパースできないエントリがあったような…）

-PHP
http://tools.wikimedia.de/~magnus/wiki2xml/w2x.php
(一番しっかりしている。しかし、plain text変換ロジックがちょっと弱い)
http://pear.php.net/package/Text_Wiki_Mediawiki/
(うまくパースできないエントリがあった)

-Python
http://www.python.org/pypi/mwparser/
（試してないっす）


今までの経験だと、
+PHPのw2xでXML出力
+w2x付属のxml-&gt;plain text変換をかます
+plain text変換でエラーが出たらstrip_tagsで逃れる、
というのが今までで一番よい変換方法でした。


というわけで、よいMediaWikiパーサがあったら情報ください。

** 追記
自分で書いた。
http://svn.razil.jp/django-wikipedia/trunk/wpxmltodb/wpxmltodb.py
</body>
<comments>
<comment>
<username>tokada</username>
<body>これじゃだめぽ？&lt;br&gt;http://meta.wikimedia.org/wiki/Data_dumps</body>
<timestamp>1172997954</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>んと、MediaWikiのWiki記法を取り除いてほしいのです。&lt;br&gt;ダンプからテーブル作成までは標準化できているんですが…&lt;br&gt;http://qwik.jp/senna/wikipedia_ja_test.html</body>
<timestamp>1172999236</timestamp>
</comment>
<comment>
<username>odz</username>
<body>HyperEstraier の配布アーカイブに lab/wpxmltoest というRuby製変換スクリプトが入ってます。HyperEstraier の文書ドラフトに変換するためのスクリプトですが、使えるんじゃないかと思います。</body>
<timestamp>1173841240</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>おおお、そんなものがあったんですね。&lt;br&gt;そういえば、昔Hyper Estraierはどうやってデータを突っ込んでいるのか？と疑問に思っていました。&lt;br&gt;調べてみます。&lt;br&gt;情報ありがとうございます！</body>
<timestamp>1173856455</timestamp>
</comment>
</comments>
</day>
<day date="2007-03-11" title="">
<body>
*django_senna*[Django][Senna]Django勉強会 Disc 3
Django勉強会 Disc 3
http://www.djangoproject.jp/etude/3/
でお話させてもらってきた。


資料を以下のURLに置いておきます。嘘が混じってるかもしれないけど…
http://qwik.jp/senna/publication.download/django-ja-disc3-senna.pdf


僕の発表内容を簡単にまとめると、こんな感じ。
-PysennaやPyrostをDjangoから使う場合には工夫が必要かもしれません(調査中)
-Pg + Ludiaでも、Django本体に1行パッチを当てれば、Djangoから自然に全文検索を行えるハズです
-MySQLにSennaがバインディングされていた場合、Djangoはデフォルト状態でSennaを用いた全文検索が自然に行えます。


寺子屋では、 id:MiCHiLU様に懇切丁寧な指導をもらって、
Djangoレベルが3上がった感じです。
汎用ビューだけであそこまでイケるんだなあ…


自分用まとめ
-stackless python面白そう
-haltさんがサブテクノリのスライドを「分からないですよね…」といってガンガン飛ばしていた
-常山フィード
-newforms、早く安定してvalidation効いて欲しいなあ
-チュートリアルのあと何をしていいのかわからないよね
-「ただ、Pythonが好きなだけなんです…」

*senna_utf8*[Senna]文字コードあれこれ
http://slashdot.jp/askslashdot/article.pl?sid=07/03/10/0845225
文字コード問題は下手に首を突っ込むとコワイ人（？）が続々と議論に参加してきて触れづらい話題です。


SennaでUTF-8を使う場合、以下のような問題があります。
-nfkc正規化で時間がかかる(ex.〓→ミリバール)
-語彙表(メモリに常時載る)のサイズが増える、よってメモリ使用量も増える


というわけで、検索対象文書が使っている文字集合がeuc-jpが対応している文字集合に収まるのであれば、Sennaではeucを使うのがお勧めな気がします。
コンテンツ量が多いと、じわじわとメモリ量の削減が効いてくると思います。
</body>
</day>
<day date="2007-03-19" title="">
<body>
*act_as_ludia*[ludia][Senna]acts_as_ludiaを使ってRails + Pg + Ludia + Sennaで全文検索
acts_as_ludiaという、RailsでLudiaが簡単に使えるプラグインが公開されています！！
http://d.hatena.ne.jp/uchiuchiyama/20070318/ludia_rails_plugin


スニペットが簡単に取得できるのが嬉しい。
Ludia + Railsユーザはぜひぜひご利用を。


[追記]
&lt;del datetime=&quot;2007-03-20T11:32:10+09:00&quot;&gt;act_as_ludia&lt;/del&gt;ではなく、acts_as_ludiaの間違いでした…
uchiuchiyamaさん指摘ありがとうございます。修正いたしました。
どんどん改良していく予定とのことで、楽しみにしております！

*tritonn_first_release*[tritonn][senna][mysql]出た！出た出た！Tritonn（トリトン）
SennaのMySQLバインディングを高品質にする、Tritonnプロジェクトの成果物がリリースされました！
http://qwik.jp/tritonn/


僕が覚えている範囲だと、今までのMySQLバインディングとの差異は以下のとおりです。
-alter table/create index/drop indexなどでインデックスのフラグが落ちてしまう問題を修正
-Tableの文字コードからSennaの文字コードを自動指定する機能の追加
-fstatの不要な呼び出しによって一般的なクエリのパフォーマンスまで落ちてしまう問題の修正
-テーブル削除のパフォーマンスが劣化する問題の修正
-show senna status関数の増設
-show senna status関数への移行による、MySQL管理ツールやMySQLテストスイートとの親和性の向上


Senna 1.0.2のリリース後、
MySQL 5.0.36 + Sennaをインストールされた方には非常に、非常に申し訳ないと思っておりますが…
（しかも、うたださんのMLでの報告によると、どうやらMySQL 5.0.36用パッチはバグっているらしい…）
いままでのMySQLバインディングからTritonnに移行することをお勧めします!!!


Senna 1.0.2本体については、Ubuntu上で落ちる問題が指摘されています。
Voluntas様、aodag様お手数かけてすみません…
http://d.hatena.ne.jp/Voluntas/20070318/1174220633
上記問題を修正したバージョン1.0.3をリリースする予定です。


実は、上記のバグに起因する問題はMLですでに報告されていたのですが、
その問題がWindows環境固有であると勘違いし、
さらに再現に失敗したので困っていたところでした。ありがたい!!!


そろそろ目立ったバグは潰れてきたかな、という印象です。
</body>
<comments>
<comment>
<username>uchiuchiyama</username>
<body>ご紹介，トラックバックありがとうございます．プラグイン作っちゃった人です．&lt;br&gt;些細なことですが，s/act_as_ludia/acts_as_ludia/ だったりします(笑)&lt;br&gt;&lt;br&gt;検索エンジンユースを考えて，次はスニペットにcssクラスを追加できるようにしたいと思っていますので，どうぞよろしくお願いします！</body>
<timestamp>1174347680</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>おお！ありがとうございます！&lt;br&gt;修正させていただきました！！！&lt;br&gt;&lt;br&gt;Railsで10分でできる検索エンジンのムービーとかできることを妄想しちゃいます!!</body>
<timestamp>1174357994</timestamp>
</comment>
</comments>
</day>
<day date="2007-03-22" title="">
<body>
*pycon_tshirts*[Python]Python Tシャツもらったよ!!!
PyCon 2007のおみやげのTシャツ
http://omake.accense.com/wiki/PyCon2007/GiveAway


ダーツで抽選された結果、
僕が当選しました!!!


高品質RADIUSサーバシリーズfullflexでおなじみの
アクセンス・テクノロジー様からいただきました!!!


Tシャツを着てみて、写真を撮ってもらいました!!!

- 着てみた
[f:id:tasukuchan:20070322170111j:image]
- 裏はこんな感じ ヘビ!!!!
[f:id:tasukuchan:20070322170042j:image]
- RADIUS本とスリーショット!!!!
[f:id:tasukuchan:20070322165930j:image]

後ろが散らかっているのは気にするな!!!
</body>
<comments>
<comment>
<username>Voluntas</username>
<body>次回の勉強会は是非そのお姿で。</body>
<timestamp>1174621680</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>もちろんもちろん！！！</body>
<timestamp>1174624048</timestamp>
</comment>
</comments>
</day>
<day date="2007-03-23" title="">
<body>
*django_mysql_udf*[Django][MySQL]MySQLのUDF(ユーザ定義関数)をDjangoから使う

** 動機

SennaのMySQLバインディングには、
UDFというMySQLのユーザ定義関数を使ってスニペットを返す関数があります。


スニペットとは、検索対象文書の一部を抜粋したものです。
通常はKWICと呼ばれる、検索キーワードとその周辺の文書を抽出したものを出力します。


この関数を使うと、
-MySQLのデータすべてをクライアントに転送する必要がないので効率がよい
-面倒なマルチバイト対応やタグ付け処理等もやってくれる
といった嬉しい点があります。


というわけで、この関数を是非Djangoから呼びたいと考えていたわけです。


-前提条件
--articlesというテーブルに、bodyというフィールドがある、モデル名はArticle
--この中を全文検索して、検索結果をsnippet関数を通じて取り出したい
--bodyのデータそのもの必要ない、サイズが大きいので、できればMySQLからロードしたくない
--キレイに書きたい!!!

** 実践

*** お手軽メソッド

まずは、
http://ymasuda.jp/python/django/docs/model-api.html
のフィールドのオプションの項を参考にして
&gt;|python|
snip = models.TextField(db_column='snippet(body, ...)')
||&lt;
と書くとエラーが出た。ダマせなかったか…

*** カスタムSQLの実行

http://ymasuda.jp/python/django/docs/model-api.html
の「カスタム SQL の実行」にあるように、
まずArticle.objects.filter(body__search = query)で全文検索を行い、
以下のようなget_snippetメソッドを呼び出してsnippetを取り出す方法です。

&gt;|python|
def get_snippet(self):
    from django.db import connection
    cursor = connection.cursor()
    cursor.execute(&quot;SELECT snippet(body, %s) FROM articles WHERE id = %d&quot;, [snippet_args, self.id])
    row = cursor.fetchone()
    return row
||&lt;

しかし、これだとうまくいって当たり前だし、キレイじゃないし、
bodyそのものは読んでいるし、
なにより、クエリが毎行発行されてしまう！！！

う～ん。

*** extraを使う

新たなクエリセットを返すクエリセットメソッド
http://ymasuda.jp/python/django/docs/db-api.html
のextra(select=None, where=None, params=None, tables=None)を使ってみる。


&gt;|python|
Article.objects.filter(body__search = senna_query).extra(
  select={'snip': 'snippet(body, %s)' % snippet_args}
)
||&lt;

ふむ！出来た！出来たぞ～い！！！


このままだと結局bodyを読み込んでしまうので、
models.pyからbodyを追放してやって、

&gt;|python|
Article.objects.extra(
  select={'snip': 'snippet(body, %s)' % snippet_args},
  where=[&quot;MATCH(body) AGAINST('%s' IN BOOLEAN MODE)&quot; % query],
)
||&lt;

これでbodyを読み込まなくできた。
でも、Django備え付けの全文検索フィルタが使えなくなって悲しい。

*** extraをちゃんと使う

さて、このままだとSQL Injectionされてしまうので、
extraに設けられているparamsを用いてみよう。

&gt;|python|
Article.objects.extra(
  select={'snip': 'snippet(body, %s)'},
  where=[&quot;MATCH(body) AGAINST(%s IN BOOLEAN MODE)&quot;],
  params=[snippet_args, query],
)
||&lt;

うぎゃー、エラーだ！！！
なんでなんで、と思ったら
http://code.djangoproject.com/ticket/2902
http://groups.google.com/group/django-users/browse_thread/thread/8ced145389650d62 
を読む限り、selectに対してparamsを適用するのは想定外ということらしい。


まあ、2902のticketの人はそれだけにとどまらず、
selectの辞書にkeyが複数あり、辞書は順序なしなので、
arrayとマッチしないという問題があるのでした。


Django本体にパッチを当ててもいいけど、
追従するのがめんどくさい。
よって、エスケープする関数を自前ででっちあげた。
backend.quote_nameみたいな関数が欲しいところ。


** まとめ

- MySQLのUDFはカスタムSQLでもextra()経由でも利用できるよ
- カスタムSQLの場合、snippet関数が毎行ごとに別々に呼ばれて非効率だよ。
- 条件としてだけ使うけど内容が欲しくないフィールドというものは、たぶん現行のDjangoじゃ指定できないっぽいよ
- extraを使ってある程度SQLを指定したら、条件としてだけ使うフィールドが実現できたよ
- extraのparamsはwhereで使うことが念頭にあり、selectのほうで使うと思わぬ落とし穴があるよ

というわけで、models.pyで、
whereの条件には使うけれども、データそのものはいらない!!!!
と設定できたらいいなあ、と思った。


情報求む。

*senna_ngram_behavior*[Senna]SennaによるN-gramインデックスで注意すべき挙動

** 追記:以下の文書について

現在リリースされているSenna 1.0.7では、
N-gramで１文字の日本語を検索する場合は
直接部分一致検索を動作させるようにしました。

というわけで、以下で説明している挙動は今現在当てはまりません。

** １文字の単語について

uchiuchiyamaさんのブログにあった、Sennaのクエリ書式に対する質問
http://d.hatena.ne.jp/uchiuchiyama/20070317/senna_query_problem


この問題ですが、
おそらくN-gramでインデックスを作成している場合に起こっていると考えられます。


SennaのN-gramインデックスはbi-gram、
すなわち２文字を１つのトークンとみなし、
インデックスへの登録を行っています。


ということは、文書の末尾を除いて、
すべてのトークンは２文字となり、
１文字のトークンで検索をしても検索結果が存在しません。


そこで、Sennaは内部的に単語の部分一致検索を行い、
ある１文字を含むトークンすべてについての検索結果を併せて返します。
この「部分一致検索を行うかどうか」の判定は、
「クエリ全体を評価した検索結果件数がn件以下かどうか」を見て判断しています。
デフォルトでn=0です。


さて、「壺」というクエリは１文字ですので、
このまま検索を行うと、
文書末に「壺」という文字を持つ文書しかひっかかりません。
通常はそのような文書はないので、
クエリ全体を評価した検索結果件数が0件となり、
部分一致検索を行います。


「これ OR 壺」といったクエリを実行した場合を考えます。
まず、「これ」というトークンを含む文書を検索します。
２文字のトークンなので、検索結果が存在します。
次に、「壺」というトークンを含む文書を検索します。
１文字のトークンなので、検索結果が通常は存在しません。
そして、２つの検索結果をORでつなぐと、
結局「これ」というトークンを含む文書セットが結果となってしまいます。
その検索結果件数は0ではないので、部分一致検索が行われることがなく、
そのまま検索結果を出力してしまいます。


よって、uchiuchiyamaさんのところのような現象が起きてしまうのです。
この問題については、
１文字のクエリを実行する場合には最初から部分一致検索を動かしてしまうことによって
対処したいと考えております。

** 英単語、数値、記号について

SennaのN-gramインデックスは、字種によってトークンの長さが変わります。
具体的には、英文字、数字、記号の場合は、
連続する同じ種類の文字を１つのトークンとして切り出します。


また、N-gramでもMeCabでも英単語、数字、記号は
後方一致検索ができないように設定してあります。


これは技術的な問題ではなく、
インデックスサイズが膨れ上がるコストに対して、
検索結果の精度があがるベネフィットが少ないためです。


英単語の場合は、語尾が変化することがあるので
前方一致検索が必要なケースは多いと思いますが、
後方一致検索が必要なケースがそれほど多いとは思わないからです。


ただし、型番検索などで、
英単語、数字、記号の検索で漏れをなくしたい!!!
といった用途も考えられます。


そこでSennaでは、
sen_index_create関数にて
sen_split_alpha/sen_split_digit/sen_split_symbol
のそれぞれのフラグを指定することによって、
それぞれの字種のトークンを2文字で区切るように設定することができます。
上記フラグを活用すれば、型番を漏れなく検索することが実現できるでしょう。


しかし、上記のフラグ指定は
現行のTritonn/Ludiaではまだ対応がなされていません。
[追記]
Ludiaでは対応しているそうです!!!

今後に期待しましょう!!!

</body>
<comments>
<comment>
<username>co-saka</username>
<body>Ludiaはsen_split_alpha/sen_split_digit/sen_split_symbolの指定できますよー。&lt;br&gt;fulltextu関数を用いれば可能です。(ver0.9.0以降）&lt;br&gt;遅いコメントでした。</body>
<timestamp>1176076145</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>おおお！本当ですね…　すみません…&lt;br&gt;追記しました！</body>
<timestamp>1176090274</timestamp>
</comment>
<comment>
<username>co-saka</username>
<body>「１文字のクエリを実行する場合には最初から部分一致検索を動かしてしまうことによって対処したいと考えております。」とありますが、いつごろ対処しますでしょうか？Senna1.0.5ではまだ対処されてないように見えるのですが・・・。</body>
<timestamp>1178846096</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>現在のsvn trunkでは対応していますよ！</body>
<timestamp>1178850842</timestamp>
</comment>
<comment>
<username>co-saka</username>
<body>trunkで試したら対応してました。さすがSennaです！</body>
<timestamp>1178868201</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>次のリリースはSenna 1.1.0になると思います。&lt;br&gt;Ludiaで使っている部分については安定していると思います。</body>
<timestamp>1178870955</timestamp>
</comment>
<comment>
<username>yu-ji</username>
<body>trunk試しましたが、ばっちり動いてました！&lt;br&gt;現在稼動しているもので、1文字でも結果を拾ってくるようにしたいのですが、&lt;br&gt;『「クエリ全体を評価した検索結果件数がn件以下かどうか」を見て判断しています。デフォルトでn=0です。』&lt;br&gt;このn=0はどこで設定できるのでしょうか？</body>
<timestamp>1180766599</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>Senna 1.0.7ではこのエントリのバグが直っています。&lt;br&gt;設定方法は、クエリの先頭に”*En ”とつけてください(MySQLの場合にはBOOLEAN MODEで)。nが閾値の数字です。&lt;br&gt;詳しくは、http://qwik.jp/senna/query.htmlをごらんください。&lt;br&gt;&lt;br&gt;もう１つ、configure時に&lt;br&gt;--with-query-escalation-threshold=n&lt;br&gt;と指定する方法もあります。</body>
<timestamp>1180769502</timestamp>
</comment>
<comment>
<username>yu-ji</username>
<body>ご回答ありがとうございました！&lt;br&gt;おもいっきり書式ページで説明されてましたね。すいません・・&lt;br&gt;すぐにバージョンアップ作業ができないので、しばらくはクエリ側での対応で運用しようと思います。</body>
<timestamp>1180786480</timestamp>
</comment>
</comments>
</day>
<day date="2007-04-07" title="">
<body>
*senna_wikipedia*[Senna][Django]SennaとDjangoを使ったWikipedia検索のデモを公開してみた。
Djangoで書いた、Sennaを用いたWikipedia検索のデモを&lt;del datetime=&quot;2008-04-05T04:12:12+09:00&quot;&gt;公開してみた。&lt;/del&gt;公開終了しました。
インデックスはN-gramで作ってみたよ。


&lt;del datetime=&quot;2008-04-05T04:12:12+09:00&quot;&gt;http://wikipedia.suenaga.name/
にとりあえず置いてみた。
&lt;/del&gt;

動いているコード自体は、
http://svn.razil.jp/django-wikipedia/trunk
あたりからSubversion経由で取得できます。


クエリにかかった秒数の表示とか、Djangoでのキャッシュ機構の活用とか、
インクリメンタルサーチとか、類似文書検索対応とか、キャッシュ文書の表示とか、
いろいろやりたいこともあるのですが、
まあ、とりあえず公開して様子見してみよう。
</body>
<comments>
<comment>
<username>Voluntas</username>
<body>すてきすぎる....。&lt;br&gt;MacにSenna + MySQLを入れてみてます:-)</body>
<timestamp>1175912431</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>骨格は1日で出来たのですが、公開用のサーバ確保やらcssやらで&lt;br&gt;ついにこんなに時間がかかってしまいました。&lt;br&gt;汎用ビュー0になっちゃった…&lt;br&gt;&lt;br&gt;Senna + MySQLはDarwinPortsにありますよ!!&lt;br&gt;http://lapangan.net/darwinports/index.php?PrivatePortfile%2FSenna-MySQL5</body>
<timestamp>1175919187</timestamp>
</comment>
<comment>
<username>Voluntas</username>
<body>MacPortsから入れて無事に起動を確認いたしました！！！&lt;br&gt;もうばりばりMacでSenna楽しませていただいております。</body>
<timestamp>1175991875</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>おお！是非是非django-jaページの全文検索(djangoのドキュメントも全文検索できるとうれしいかも…)を期待しています！&lt;br&gt;（とまたまたプレッシャーをかけてみる</body>
<timestamp>1176044815</timestamp>
</comment>
<comment>
<username>pui</username>
<body>うふふ。&lt;br&gt;＾＾</body>
<timestamp>1176122504</timestamp>
</comment>
<comment>
<username>しみずかわ</username>
<body>速い...速すぎる</body>
<timestamp>1176162665</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>&gt;puiさん&lt;br&gt;うふふ&lt;br&gt;&lt;br&gt;&gt;しみずかわさん&lt;br&gt;結構実用的に仕上がったと思います。&lt;br&gt;検索ボタンで検索をかけると、&lt;br&gt;リダイレクト１回、SQLのクエリ４回を投げる結構重めな構成なのですが…</body>
<timestamp>1176170142</timestamp>
</comment>
<comment>
<username>しらたき</username>
<body>検索するとエラーが出るようになっちゃってますよ。</body>
<timestamp>1207102008</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>あ、もう止めちゃってます。&lt;br&gt;まだ使っている人がいたとは…復帰を検討しまーす！！</body>
<timestamp>1207105487</timestamp>
</comment>
<comment>
<username>貴ちゃん</username>
<body>止めてしまったのですか。それならば検索画面にそう書いてほしいものです。「発行したSQL」を見て参考にしたかったのです・・・。</body>
<timestamp>1207311030</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>&gt;貴ちゃんさま&lt;br&gt;検索画面自体を出ないようにしてみました。</body>
<timestamp>1207336279</timestamp>
</comment>
</comments>
</day>
<day date="2007-04-16" title="">
<body>
*senna_junkai_20070416*[Senna]Sennaで巡回@2007/04/16
巡回巡回。

Macのports!!
http://d.hatena.ne.jp/Voluntas/20070415/1176588156

PHP bindings!!
http://d.hatena.ne.jp/rsky/20070414/1176545853

Ludiaではてブ先を検索!!
http://d.hatena.ne.jp/uchiuchiyama/20070403/ludia_rails_demo

*brazil_jisseki_nashi*[雑談]特筆すべき実績の無い会社。
特筆すべき実績の無い会社…悲しいですね…

http://ja.wikipedia.org/wiki/Wikipedia:%E5%89%8A%E9%99%A4%E4%BE%9D%E9%A0%BC/%E6%9C%AA%E6%9D%A5%E6%A4%9C%E7%B4%A2%E3%83%96%E3%83%A9%E3%82%B8%E3%83%AB


Google検索でも1件ヒット！

http://www.google.com/search?num=50&amp;hl=ja&amp;q=%22%E7%89%B9%E7%AD%86%E3%81%99%E3%81%B9%E3%81%8D%E5%AE%9F%E7%B8%BE%E3%81%AE%E7%84%A1%E3%81%84%E4%BC%9A%E7%A4%BE%22&amp;lr=lang_ja
</body>
</day>
<day date="2007-04-21" title="">
<body>
*django_wikipedia_sqldump*[Django][Senna][Python]Wikipedia検索で、発行したSQLと実行時間をユーザに見せる
Wikipedia検索であるが、
- 利用したSQLをHTMLでダンプする
- 多言語化(とりあえず英語/日本語のみ)
の２つをやる必要が出てきた。


とりあえず、SQLをHTMLにダンプするのをやってみたよ。

** 利用したSQLをHTMLにダンプする

perezvonの日記によると、
http://d.hatena.ne.jp/perezvon/20061231
以下の３要素をsettings.pyで設定して、
テンプレートに{{ sql_queries }}を入れればOKらしい。

&gt;|python|
# settings.py
DEBUG = True

INTERNAL_IPS = ('127.0.0.1', )

TEMPLATE_CONTEXT_PROCESSORS = (
    'django.core.context_processors.debug',
)
||&lt;

ところが、今回はどんなクライアントからでもSQLをダンプして表示したいので、
INTERNAL_IPSを設定できない。


というわけで、
&gt;|python|
INTERNAL_IPS = ('127.0.0.1', )
INTERNAL_IPS.__contains__ = lambda self, x: True
||&lt;
なんてやってみたら怒られた。
組み込み型だからマズいのかな？


じゃあ、継承でやってみようと思ったら、
なんかうまくいかない。


Googleで「python class MyTuple tuple」で検索したら、
以下のページがひっかかってきた。
http://www.thescripts.com/forum/thread23206.html
http://www.thescripts.com/forum/thread624365.html


というわけで、__new__を使って解決した。

&gt;|python|
class NandemoTuple(tuple):
  def __new__(cls, *args):
    return tuple.__new__(cls, *args)
  def __contains__(self, x):
    return True

INTERNAL_IPS = NandemoTuple('127.0.0.1', )
||&lt;

まあ、まだ__new__がうまくいく仕組みをよく理解していないんだけどね…


本番にも反映した。
本番運用でDEBUG = Trueでいいのかよ、という話はあるのだが、
まあユルい感じで…


ここで気づいたのだが、
__searchでfilterした場合、
MATCH AGAINSTの検索条件がクオートしてダンプされないという不具合が
djangoにはあるみたい。実害はないんだけどね。


[追記]2007/04/21 23:15
id:perezvonさんに突っ込みもらいました。
http://django.g.hatena.ne.jp/perezvon/20070421/1177163921

ふむ、自分でdjango.core.context_processors.debugの必要な部分を書く感じかしら。
というわけで、早速本番反映 &amp; コミットしました。
確かにこっちのほうが楽です。さすがDjangoマスター!!!

</body>
</day>
<day date="2007-04-23" title="">
<body>
*Java_IDE_dasai*[雑談][Java]IDE(統合開発環境)についての昔話
とあるMLを読んでいて、昔話を思い出した。


あればたぶん2000年ごろ。僕がまだJavaを触っていた時代。


バイト先での作業のために、
JBuilderを買ってもらって使っていた。
まあそれなりの環境で、それなりに気に入っていた。


あるとき、協力会社の人たちが
&gt;&gt;
Javaの開発は
テキストエディタ+JDKだよね、
IDE使っているなんてダサい！
&lt;&lt;
って陰口を言っていたのを聞いた。
多分聞こえるように言っていたんだと思う。


今考えると、
彼らが今もJavaの開発をしているとして、
「ありえないだろうけど」、もしEclipseが端末に入っていたら、
こっそりとHotJavaとかに入れ替えてやりたい。


かくいう僕は、いまだに
C言語でかなり複雑なロジックを追うとき、
たまにVisual C++上で追ったりしています。
何せ、一度に画面に出る情報量が多いんだもの…
gdb/dddでも同じことはできるのだが、
「手に慣れた」GUI環境でのデバッグはやはり効率がいい。


ただ、
Visual Studioとか、Eclipseとか、
ある程度のシェアがある「標準」のIDEがあるのが望ましいよね。
「標準」のIDEがないと、
ノウハウの共有の面でも、学習コストの面でも
IDEを使うことは不利になると思う。
明日にもメンテされなくなるかもしれないIDEは使いたくない。


そういえば、
昔話の当時はBoundsCheckerも買ってもらっていたなあ。
ある程度のお金でなんとかなるものって、
なんとかしたほうがいいと思う僕でした。
仕事で何かやるんだったらね。


便利ツールは、便利です。キッパリ。
ヘタレプログラマとして自信を深めつつある僕でした。
</body>
<comments>
<comment>
<username>nani</username>
<body>同感。&lt;br&gt;しかしいまだにlatex好きな人がいるよね。</body>
<timestamp>1177498373</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>あはは。前からWordのほうがいいよ！っていってましたよね。&lt;br&gt;で、でも、僕まだLaTeXを使っているよ…</body>
<timestamp>1177499025</timestamp>
</comment>
</comments>
</day>
<day date="2007-04-28" title="">
<body>
*lex_yacc_ascii_takai*[技術メモ]ちょ、高すぎ。
lex &amp; yaccプログラミングの邦訳版はオライリーのページを見る限り絶版のようだ。


Amazonだと\12,000-!!!
ヤフオクでも\9,800-!!!
たけーっすよたけーっすよ…


英語版でもいいけど、読み進めるのがすっごく遅くなるからなぁ…
誰か邦訳版が余っていたら適価で譲ってください。
[asin:4756102972:detail]
</body>
<comments>
<comment>
<username>nani</username>
<body>オライリーじゃないやつだったら家のどっかで寝てると思うけど。</body>
<timestamp>1177747179</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>おおお、ありがとうございます！&lt;br&gt;&lt;br&gt;でも、このオライリーの奴がほしいのです。&lt;br&gt;なぜなら、SQLのパースだけで１章が割いてあるらしく、&lt;br&gt;そこを読みたいから…&lt;br&gt;図書館を探すかなあ。</body>
<timestamp>1177826624</timestamp>
</comment>
<comment>
<username>yirxs</username>
<body>おお、気になるなぁ。</body>
<timestamp>1177903199</timestamp>
</comment>
<comment>
<username>eto</username>
<body>げー，俺こないだその本捨てちゃったよ．もったいない．</body>
<timestamp>1178515437</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>yirxs&gt;ねー！&lt;br&gt;eto&gt;えええええええええぇぇー。少なくともAmazonで売ったら何かの足しになったのに…</body>
<timestamp>1178515570</timestamp>
</comment>
</comments>
</day>
<day date="2007-04-29" title="">
<body>
*moritapo_enq_renewal*[ブラジル]モリタポ通帳リニューアル＆コッソリアンケート
モリタポ通帳とコッソリアンケートがリニューアルされました！


モリタポ通帳
http://find.2ch.net/moritapo/


コッソリアンケート
http://find.2ch.net/enq/


コッソリアンケートがじわじわと盛り上がりつつある予感…
</body>
</day>
<day date="2007-05-06" title="">
<body>
*1178426480*[mysql][全文検索]MySQL用N-Gram全文検索プラグイン
「MySQL用N-Gram全文検索プラグイン」っていうのがあるのを知った。
http://mysqlbigram.googlepages.com/mysql%E7%94%A8n-gram%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3

Senna側から見たmysql-bigramとの違いはこんなところです。
- ソースコードの段階でパッチが必要
- トークンの位置情報を持っているので、検索ノイズが少ない
- アルファベットや記号文字について、N文字でトークン化せず、同じ種類の文字列の並びを1つのトークンとする。(から、「in」で「ping」は検索できない)
- インデックスの動的更新が早め
- 2indパッチ相当がある
- マルチカラムインデックスの部分一致カラムを対象にした検索が出来る…予定

Parserを変えるだけでいいというのは、やはり魅力的です！

*1178434791*[python][django]Python関連の日記はは別日記に移動します。
[http://d.hatena.ne.jp/gunyara-python/:title]
に移転します。

Djangoの話はともかく、wxPythonの話なんかはドメインが違う気がするので分割。
本当にメモが多くなる予定。
</body>
</day>
<day date="2007-05-08" title="">
<body>
*1178605968*[技術メモ][libevent]Webサーバ書くのって流行りなの？
Memcachedの添え物として扱われている（ような気がする）
libeventちゃんカワイソウ。
- [http://www.monkey.org/~provos/libevent/:title]


というわけで、libeventとsennaを使って
COOKIEによるセッション維持機能がついたWebサーバを書いてみた例。
(Sennaは単なるハッシュライブラリとして使っています。)


mainを書き下すと、
- Senna初期化
- libevent初期化
- httpd機能開始
- URIごとにハンドラ関数を設定
- イベントをガンガン処理
といった感じ。


Cでこれくらいの長さだったら、
妥当だと思います。
バグがありそうだし、セッション変数の種も適当だけど、
気にするなってことで。


実用にはならないけど、サンプルの１つとしてどうぞ。
LLな言語のインタプリタなんかを抱え込むと面白いのかもね。

&gt;|c|
#ifdef WIN32
#include &lt;winsock2.h&gt;
#include &lt;windows.h&gt;
#endif

#include &lt;sys/types.h&gt;
#include &lt;sys/time.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;err.h&gt;

#include &lt;sys/queue.h&gt;

#include &lt;event.h&gt;
#include &lt;evhttp.h&gt;

#include &lt;senna/senna.h&gt;

#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

/* FIXME: now this value is not locked */
sen_set *count = NULL;

typedef enum {
  send_rc_success = 0,
  send_memory_exhausted,
  send_invalid_argument
} send_rc;

#define PORT 8000 /* port number listened */
#define COOKIE_MAX 4096
#define SESSION_ID_NONE 0
#define COOKIE_KEY_SESSION &quot;s&quot;

/* FIXME: for now, only one key-value pair is able to be passed to this function */
/* FIXME: domain and path pamaters are not supported !! */
/* FIXME: now value is only numeric value */
send_rc
build_cookie(struct evkeyvalq *q, const char *key, int value) {
  char *ekey, cookie[COOKIE_MAX];
  if (!q || !key || !*key || !value) { return send_invalid_argument; }

  if (!(ekey = evhttp_encode_uri(key))) {
    return send_memory_exhausted;
  }
  /* FIXME: now value is deleted when value == 0 */
  if (value) {
    snprintf(cookie, COOKIE_MAX, &quot;%s=%d;&quot;, ekey, value);
  } else {
    snprintf(cookie, COOKIE_MAX, &quot;%s=;&quot;, ekey);
  }
  evhttp_add_header(q, &quot;Set-Cookie&quot;, cookie);

  free(ekey);
}

/* FIXME: performance up */
/* FIXME: now, only numeric value(int) are allowed to cookie value */
sen_set *
parse_cookie(struct evkeyvalq *in) {
  sen_set *s;
  const char *cookie, *p, *q;
  char key[COOKIE_MAX], value[COOKIE_MAX];
  unsigned int *pval;
  if (!(s = sen_set_open(0, sizeof(int), 0))) {
    SEN_LOG(sen_log_alert, &quot;cookie sen_set allocation error !&quot;);
    return NULL;
  }
  if (!(cookie = evhttp_find_header(in, &quot;Cookie&quot;))) {
    return s;
  }
  p = cookie;
  while (*p) {
    for(; *p == ' '; p++);

    /* key */
    q = p;
    for(; *p != '=' &amp;&amp; *p; p++);
    if (q == p || !*p) { break; } /* empty or invalid key */
    memcpy(key, q, p - q); key[p - q] = '\0';

    sen_set_get(s, key, (void **)&amp;pval);

    /* value */
    q = ++p;
    for(; *p != ';' &amp;&amp; *p; p++);
    memcpy(value, q, p - q); value[p - q] = '\0';
    *pval = atoi(value);

    printf(&quot;key:%s value:%s\n&quot;, key, value);

    sen_set_at(s, key, (void **)&amp;pval);

    printf(&quot;key:%s value:%ld\n&quot;, key, *pval);
  }
  return s;
}

void
root_handler(struct evhttp_request *req, void *arg)
{
  struct evbuffer *buf;
  unsigned int sess_id = SESSION_ID_NONE, *pcount;

  buf = evbuffer_new();
  if (!(buf = evbuffer_new())) {
    err(1, &quot;failed to create response buffer&quot;);
  }

  {
    sen_set *cookie;
    if (cookie = parse_cookie(req-&gt;input_headers)) {
      int *val;
      if (sen_set_at(cookie, COOKIE_KEY_SESSION, &amp;val)) {
        sess_id = *val;
      }
      sen_set_close(cookie);
    }
  }

  printf(&quot;session_id: %d\n&quot;, sess_id);

  if (sess_id == SESSION_ID_NONE) {
    unsigned int *pcount;
    /* session id kabutte nai ?*/
    do {
      sess_id = rand();
    } while (sen_set_at(count, &amp;sess_id, NULL));

    if (sen_set_get(count, &amp;sess_id, &amp;pcount)) {
      *pcount = 0; /* count value initialized */
      evbuffer_add_printf(buf, &quot;Hello new user! give you new session id %d&quot;, sess_id);
      build_cookie(req-&gt;output_headers, COOKIE_KEY_SESSION, sess_id);
    } else {
      evbuffer_add_printf(buf, &quot;Hello new user! But I cannot handle your request...&quot;);
    }
  } else {
    if (sen_set_at(count, &amp;sess_id, &amp;pcount)) {
      evbuffer_add_printf(buf, &quot;Hi again! your access count is %d!&quot;, *pcount);
      (*pcount)++;
    } else {
      evbuffer_add_printf(buf, &quot;Shut up!!! your session id %d is invalid!!!&quot;, sess_id);
      build_cookie(req-&gt;output_headers, COOKIE_KEY_SESSION, SESSION_ID_NONE);
    }
  }
  evhttp_send_reply(req, HTTP_OK, &quot;OK&quot;, buf);
}

void
generic_handler(struct evhttp_request *req, void *arg)
{
  struct evbuffer *buf;

  buf = evbuffer_new();
  if (buf == NULL)
          err(1, &quot;failed to create response buffer&quot;);
  evbuffer_add_printf(buf, &quot;Requested: %sn&quot;, evhttp_request_uri(req));
  evhttp_send_reply(req, HTTP_OK, &quot;OK&quot;, buf);
}

int
main(int argc, char **argv)
{
  struct evhttp *httpd;

  sen_init();

  /* init count */
  /* count key: session_id value: count value */
  if (!(count = sen_set_open(sizeof(int), sizeof(unsigned int), 0))) {
    SEN_LOG(sen_log_alert, &quot;count allocation error !&quot;);
    return 1;
  }

  event_init();
  if (httpd = evhttp_start(&quot;0.0.0.0&quot;, PORT)) {
    evhttp_set_cb(httpd, &quot;/&quot;, root_handler, NULL);
    evhttp_set_gencb(httpd, generic_handler, NULL);

    event_dispatch();

    evhttp_free(httpd);
  } else {
    puts(&quot;cannot bind&quot;);
  }

  if (count) {
    sen_set_close(count);
  }

  sen_fin();

  return 0;
}
||&lt;

</body>
<comments>
<comment>
<username>ockeghem</username>
<body>このソースのライセンスについてはどうなりますか?</body>
<timestamp>1178670746</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>修正BSDライセンスとします。</body>
<timestamp>1178682545</timestamp>
</comment>
<comment>
<username>ockeghem</username>
<body>早速ありがとうございます</body>
<timestamp>1178683577</timestamp>
</comment>
</comments>
</day>
<day date="2007-05-10" title="">
<body>
*1178772003*[技術メモ][C言語]Protothreadsで学ぶC言語
いまだにC言語をよく理解していない。


1文しかない関数を定義する場合でもブロックは必須なのね。
例えばこういうのはダメ、と。
&gt;|c|
void test_func(void) return;
||&lt;


上記の問題は、
epollのチェック関数を作っているときに気づきました。
しかし、Linux 2.4君よ、
なぜepoll_createのダミーを置くのだ…
AC_CHECK_FUNCだけで調べられないじゃないか。


C言語といえば、
switch内のcaseが置ける場所について、
ブラジルの中でちょっと話題になった。


[http://ja.wikipedia.org/wiki/Duff's_device:title]でも挙げられているとおり、
ブロックの中にもcaseが置ける。
caseはgotoのラベルのようなものということだな。


同様のテクニックは、Protothreadsでも使われている。
- [http://www.sics.se/~adam/pt/:title]

パッケージ内のlc-switch.hには以下のマクロが定義されていて、
継続っぽいことができるようになっている。
&gt;|c|
#define LC_INIT(s) s = 0;
#define LC_RESUME(s) switch(s) { case 0:
#define LC_SET(s) s = __LINE__; case __LINE__:
#define LC_END(s) }
||&lt;

Protothreadsの欠点として
- スタック変数は使えない
- switchの中で継続ができない(gccの拡張を使えば回避可能。see:lc-addrlabels.h)
というのがあるが、適用範囲を間違えなければ使える。

** [追記]
Visual C++でコンパイルを行うとエラーが発生する場合がある。
プログラムデータベースをエディットアンドコンティニュー可のものにしておくと、
__LINE__が定数扱いされなくなるらしい。


まあ、エディットアンドコンティニューするんだったら確かにそうだわな。


というわけで、そういう場合にはエディットアンドコンティニューできない
プログラムデータベースにするといいです。

</body>
</day>
<day date="2007-05-11" title="">
<body>
*1178876977*[技術メモ][Windows]Windowsのcmdでコードページを変更
以下のエントリを読んで、直接関係ないのですが備忘録を。
- [http://d.hatena.ne.jp/charsbar/20070511/1178868542:title]

Windowsのcmdでコードページを変えるコマンドは「CHCP」。
これ、ついこの間まで僕知りませんでした。
cmdで「HELP」とするといろんなコマンドが出てきて面白い。


上記の機能を利用して、こんなこともできる。
- [http://d.hatena.ne.jp/s0u/20070307/1173282301:title]

*1178853064*[Ludia][Senna][宣伝]第3回 PostgresForest Suite ハンズオンセミナ 初級
- [http://www.doblog.com/weblog/myblog/74336/58#58:title=第3回 PostgresForest Suite ハンズオンセミナ 初級]
の参加者が少ないようです。


参加された方(yamazさん)のレビューもあります。
- [http://rubyist.g.hatena.ne.jp/yamaz/20070419:title]
かなり質の高いセミナを実施されているようです。しかも無料。

-Pgで可用性を上げたい！
-Ludiaに興味がある！
方はぜひぜひ参加申請されてはいかがでしょうか。
</body>
<comments>
<comment>
<username>erda</username>
<body>うう、宣伝ありがとうございます。</body>
<timestamp>1178857567</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>&gt;erdaさん&lt;br&gt;最近、blogがクラシック鑑賞日記メインになってますね（笑</body>
<timestamp>1178859178</timestamp>
</comment>
<comment>
<username>erda</username>
<body>最近、外回りが多くて触ってないので、書くネタがないという状況で・・・&lt;br&gt;アクセス数の6割がLudia狙い、4割がクラシック狙いかな？と思うこの頃です。</body>
<timestamp>1178870664</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>４割！僕はクラシックに疎いのですが、&lt;br&gt;erdaさんのレビューは読んでいて面白いと思います。</body>
<timestamp>1178871072</timestamp>
</comment>
<comment>
<username>erda</username>
<body>お褒め頂き、ありがとうございます。&lt;br&gt;何のブログか分からないので、個人趣味とLudiaを分けようとおもっているのですけどね。アクセス数が増えてきちゃったので、なかなか引越しできません。。。。実はFC2でもLudiaネタ以外は展開しちゃってます。</body>
<timestamp>1178873748</timestamp>
</comment>
</comments>
</day>
<day date="2007-05-14" title="">
<body>
*1179158502*[雑談]Wikipedia日本語版 - 独自の研究 = ?
ウィキペディア日本語版では、
「独自研究は載せない」ことが、ついこの間までは「公式の方針」じゃなかったのね…
-[http://ja.wikipedia.org/wiki/Wikipedia:%E7%8B%AC%E8%87%AA%E7%A0%94%E7%A9%B6%E3%81%AF%E8%BC%89%E3%81%9B%E3%81%AA%E3%81%84:title]
どうやら「公式の方針」になったようです。


「[http://ja.wikipedia.org/wiki/%E3%83%8E%E3%83%BC%E3%83%88:%E5%8D%B5%E3%81%8B%E3%81%91%E3%81%94%E9%A3%AF/%E5%89%8A%E9%99%A4:title=卵かけご飯]」の項目の記述内容が減ってしまうのか、もしくは、[要出典]リンクがいっぱいつくのか。


「卵かけご飯」の記事ですが、一回削除提案がされたみたいです。
-[http://ja.wikipedia.org/wiki/%E3%83%8E%E3%83%BC%E3%83%88:%E5%8D%B5%E3%81%8B%E3%81%91%E3%81%94%E9%A3%AF/%E5%89%8A%E9%99%A4:title]
もう一度くらい誰かが削除を提案するのかもしれません。
もし提案された場合、どういう結論が出るのか個人的に興味があります。

*1179152428*[宣伝][Senna][ブラジル]代取と創業者のインタビューが掲載されたようです。
未来検索ブラジルの代取と創業者へのインタビュー記事が
CNET Venture Viewに掲載されたようです。

- [http://v.japan.cnet.com/column/select/story/0,2000067543,20348605,00.htm:title]

みなさんも半ズボンには気をつけてください。
</body>
</day>
<day date="2007-05-16" title="">
<body>
*1179297548*[技術メモ]バイナリエディタって何使ってる？
僕は中高生の頃バイナリエディタを激しく使っていました。
その頃の名残（？）で、僕の中でバイナリエディタと言えばMDeです。


さて、
Sennaのインデックスの一部を破損させた場合の挙動を調べるために、
バイナリエディタでインデックスファイルを書き換えたいと思った。


shell環境で使えるものを前提として、
FreeBSDのportsからバイナリエディタらしきものを探すと、
以下のようなエディタがあった。

- beav : 一応操作がEmacsライクらしい。
-- 参考: [http://x68000.q-e-d.net/~68user/unix/pickup?beav:title=UNIXの部屋 検索: beav]
- bed : 
-- 公式: [http://members.tripod.com/~bedlinux/:title] (tripodのポップアップ注意)
- biew : disassembler付き。binaryのviewということらしい。
-- 公式: [http://biew.sourceforge.net/:title]
-- スクリーンショット: http://biew.sourceforge.net/biew_ss.png
- bvi : 一応操作がViライクらしい。
-- 公式: [http://bvi.sourceforge.net/:title]
-- 名前は同じだけど恐らく違った実装のbvi: [http://www.vector.co.jp/soft/unix/util/se090510.html:title]
- fb : う～ん…特に
-- たぶん公式: [http://home.mho.net/jswaby/fb.html:title]
- hexcurse : ncursesを使ったhex editor…
-- 公式サイトは飛んだ模様
- hexpert : う～ん、これも特に…
-- 公式: [http://www.hexpertsystems.com/:title]

GUIだったら、blessとかGHexとかlfhexとかがあるみたい。


上記のうち、Debianパッケージがあったのは、beav/biew/bvi/hexcurse。
hexerというパッケージもあった。
- hexer : Viライクのインターフェースらしい…
-- 公式サイト見つからず。結構古い？

数が多すぎてゲンナリする…
とりあえず、bviを試すか。
オススメがあったら誰か教えて。


** 追記

2GBのファイルをいじったりするので、
ファイル全部バッファに読み込み系じゃないバイナリエディタがいいですね…
</body>
<comments>
<comment>
<username>e</username>
<body>emacs: M-x hexl-find-file</body>
<timestamp>1179313434</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>eさん、ありがとうございます！&lt;br&gt;バイナリエディタのためだけにEmacsを使うというのも贅沢でいいかもしれません。&lt;br&gt;Emacsインストールしてみるかなぁ…</body>
<timestamp>1179313858</timestamp>
</comment>
</comments>
</day>
<day date="2007-05-26" title="">
<body>
*1180163166*[雑談]ふと自分の経歴を思い出した
http://www.iza.ne.jp/news/newsarticle/economy/finance/53751
の記事を読んで、記憶が薄れつつある自分の経歴をメモ。


理系大学院の博士課程にまで進学したものの、
学位を規定年数では取れないだろうことは火を見るより明らかな
堕落した生活ぶりを送っていた。


当時の僕は婚約者もいたので、
なんとか将来食っていく道を作らなければいけない…
とあせり、大原簿記学校の公認会計士講座に通うことを決めた。
食いぱっぐれはしないだろう…そういう判断基準だった。


コンピュータプログラマにだけはなりたくなかった。
プログラマになるのはあくまで最後の手段、そう、「逃げ道」だった。
なぜそう思ったのか、今ではもうよく思い出せない。
ただ、自分のプログラミング能力や社会性が
仕事に耐えないものである、という確信はあった。


公認会計士講座にはいろんな人が集まっていた。
年齢層は、大学生グループと２０台後半グループに大きく分かれていた。
女性は３割くらいはいた記憶がある。
結構キレイめな人が多かったのが印象的だった。


講座は月～土まで毎日あった。
毎日会うので、クラスメイト間にも自然とグループができていった。
グループのメンバーは年齢層と強い相関があったと思う。
「あのコかわいいよねぇ」とかそういう話をして、
まさに学生生活！っていうのをひさびさに味わった。


講座が進むにつれて、今まで見かけていたクラスメイトがいなくなることがあった。
途中であきらめたり、税理士科に転科したり…というウワサを聞いた。
かくいう僕も、講座には欠かさず顔を出すものの、
その後自習室で勉強することもなく、
大学院にいったり家でゴロゴロしたりとやはり堕落した生活を送っていた。


２足のわらじを履いていたからか、
つい言い訳をして中途半端な立ち位置に立ってしまっていた。
会計士の勉強もせず、大学院でも研究もせず…


生計を立てようと思ったきっかけである婚約。
僕が土曜日に一日中講座に出ているために、
婚約者が放っておかれることになった。
「勝手に遊びにいっていいよ～」と、僕も「勝手に」言っていた。
結果、婚約破棄という結果になってしまった。


昔のバイト先の社長から電話があった。
「緊急のJava仕事があるからやらない？」という内容だった。
お金に困っていたので引き受けた。


当日、派遣先の現場に直接行くように指示された。
４年ぶりくらいに触るJava、初めて触るStruts。
そして、むせかえるようなデスマーチの香り。
各自Eclipseを端末にインストールされるように指示され、
早速デバッグ開始。


…あれ、結構オレできるじゃん…
「～」が化けるなどの本当にあるあるネタな感じのバグや、
ifの条件反転などのロジックバグなどがほとんどだったのが原因だとは思うが。


公認会計士試験の日がやってきた。
公認会計士の試験は１次試験の短答式（マークシート）と２次試験の論文式の２つがある。
僕は、短答式でボーダーラインに１問分だけ点数が足らず不合格となった。
かなりデキが悪かったので、むしろボーダーラインが低すぎなのでは？と思ったくらいだった。


僕は、大学院を辞め、プログラマとなる「逃げ道」を選択することにした。
教授には慰留され、辞めるのは思ったより大変だった。
「逃げ道」に逃げ込むのに必死で頑張った。


そして、先ほど挙げたJavaの仕事を振ってくれた会社に
勤めることになったのだ。
そして、その会社を５ヶ月勤め上げ（短い！）
今の会社に転職したのでした。


当時の試験科目であった、
簿記・原価計算・監査論・商法・会計学・経済学・経営学、
実は今も結構役に立っている気がする。
特に簿記と商法は地味に役立っている。
僕はモデリングが好きな人なので、会計学・経済学もすごく面白かった。


今でも資格を取りたいなあ、と薄々思っている。
でも、今度やる場合には決して二足のわらじを履かないようにしたいと思う。


どっとはらい。オチはないよ。
</body>
<comments>
<comment>
<username>yirxs</username>
<body>おお、、</body>
<timestamp>1180171183</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>人に歴史あり、ですな。薄っぺらいけど。&lt;br&gt;そして、上のようなことを忘れつつある自分に驚いていたりもする。</body>
<timestamp>1180191562</timestamp>
</comment>
<comment>
<username>ジャンガ</username>
<body>逃げ道でも道があるのはいい事。&lt;br&gt;元婚約者とまたやり直したい気持ちがあるのかなと思ったり。</body>
<timestamp>1180193241</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>そうです！今は楽しく逃げ道を走っていますよ。&lt;br&gt;元婚約者とはやり直したいとは思わないけれど、&lt;br&gt;ほっといてスマンかったねぇ、とは言いたい感じです。</body>
<timestamp>1180194245</timestamp>
</comment>
<comment>
<username>ジャンガ</username>
<body>その気持ちだけで充分だと思うよ。&lt;br&gt;次へだな！</body>
<timestamp>1180195249</timestamp>
</comment>
<comment>
<username>Jiyu</username>
<body>なんだかなあ。あなたも真面目ですねえ。&lt;br&gt;私もロースクール行こうと考えているのですが、今の状況は二束のわらじっぽい気もします。私もプログラマーだけにはなりたくないし、なっても偉くなれないと思ってますし。学部生と院生を同じように考えるのもどうかと思いますが。&lt;br&gt;まあ、法曹になって成功するかは全くわかりませんが、挫折しないように頑張ります。&lt;br&gt;今度飲みましょう。その辺の話も聞かせてください。</body>
<timestamp>1180278800</timestamp>
</comment>
</comments>
</day>
<day date="2007-05-30" title="">
<body>
*1180502162*[MySQL][Senna]住商情報システム、日本語全文検索に対応した「MySQL」の技術サポートを開始
日本語全文検索を高速に処理できるMySQLの技術サポートが始まったようです。
-[http://www.scs.co.jp/mysql/topics070530.html:title]
</body>
</day>
<day date="2007-06-01" title="">
<body>
*1180701473*[Ludia][Senna]Ludia 1.1.0リリース
Ludiaの1.1.0がリリースされていました。
変更点を勝手にコピペするとこんな感じ。
&gt;&gt;
(1) VACUUM対応
　　concurrent VACUUM, FULL VACUUM両方に対応しました。
　　Auto VACUUMも使用可です。
(2) senna.confの使用廃止
　　senna.confで設定していたINITIAL_N_SEGMENTSは、
　　postgresql.confで設定可能となります。
(3) Ludiaの設定を行わない場合は、デフォルト値を使用。
　　ludia.max_n_sort_result = 10000　などの設定を省略した場合、
　　デフォルト値が使用されます。
　　(custom_variable_classes = 'ludia'　の記述は必須です。)
(4) Ludiaの設定を参照する関数の追加。
　　pgs2getoption関数を用いて、Ludiaの設定を確認できます。
(5) 使用しているSennaのバージョンを参照する関数の追加
　　pgs2seninfo関数を用いて、Sennaのバージョンを確認できます。
(6) バグ修正
　　pgs2pdftotext1,2のバグ修正
　　FreeBSDでのMAKE不具合修正
(7) TextPorter API対応
　　オフィスファイルなどのLudiaインデックスを作成することができます。
　　TextPorterは同梱されませんので、アンテナハウス様にお問い合わせください。
&lt;&lt;
今回の目玉はVACUUM対応でしょうか。
TextPorterのAPIに対応したということで、
社内文書の検索アプリなどに用途が広がる感じですね。


(2)については、
Senna 1.1.0ではsenna.confが無くなるため対応をお願いしました。
</body>
</day>
<day date="2007-06-06" title="">
<body>
*1181140058*[雑談]Wikipedia検索をまともに作る効用
元ネタが分からないと面白くないネタっていうのが結構ある気がする。


僕はガンダムを見ていないし、
ジョジョも五反田の漫画喫茶で１０巻くらいまでしか読んでない。
それでも、あまりにそれらの作品を元ネタにしたネタが多いので、
元ネタにされやすい部分は覚えてしまっている気がする。


昔、とんねるずのみなさんのおかげさまです！の中で、
石橋が宜保愛子のマネをするコーナーがあった。
そのコーナーの中で言われていた、
「無縁亡骸（むえんなきがら）ハウンド・ドッグ」
というセリフを今でも覚えている。


今や大友康平ひとりのプロジェクトとなってしまったらしい
ハウンド・ドッグのことを指しているのかとずっと思っていたのだけど、
どうやら、エルヴィス・プレスリーの「ハウンド・ドッグ」って曲の頭が、
湯煙夏原（ゆえんなつばら）ハウンド・ドッグって聞こえるのが元ネタのようだ。
伊丹十三もそう聞こえるって言ってたんだってさ～。


んで、最近Wikipedia…MediaWikiのパーサをまともに自分で書き直している。
MediaWikiのParser.phpを見た人は分かると思うけど、
あの文法をまともにパースするのは結構大変。
しかも、文法ミスが入った記事って少なくないんだよねぇ…


MediaWikiTidyなるものもない現状、
自分で頑張ってパースするしかない。
Wikipediaのダンプをパーサに通してみて、
エラーが出たらちょこちょこ直したりしているんだけど、
そのエラーの周りのテキストで豆知識が得られてちょっとうれしい。


というわけで、元ネタが気になってしょうがない人は
Wikipedia検索であさるといろいろ出てきて面白いよ。
今日、アマチュア無線を指すと思っていた「ハム」という言葉の語源について、
- 「ハム」はアマチュア無線を指すのではなく、アマチュア無線をする人のことを指す
- 語源は諸説別れる
ということを知って、「へ～」と思ったのでした。


でも、やっぱりあのパーサを書くのはキツい…
</body>
</day>
<day date="2007-06-15" title="">
<body>
*1181885617*[Windows][パラレルポート]USB 印刷サポートを用いてレガシーなパラレルポート双方向通信を行うプログラムをWinwdows Vistaで動かす
自分が昔(10年前!)に作ったプログラムを発掘したので、
そのプログラムを動かすためのメモ。
実機もないPC/AT互換機用コードを書いてちゃんと動かしていた当時の自分、やるな。


アプリケーションの中身は、
パラレルポートに接続した機器との双方向データ転送。
自前でSTROBEの制御をしていて、
（確か普通はレベルトリガなんだけど、相手の機器がエッジトリガだった）
データ受信は標準とは異なりステータスビットを使っている。
（たぶんACK, BUSY, PAPER, ONLINEかな）
元のアプリケーションでは、
LPTx相当のポート(0x0408 + x * 2)に対して直にI/Oを行っていた。
(Windowsで0x0408系に触る方法は [http://warmcat.com/parallel/:title] を参考に)


…
いろいろ調べた結果、どうやら敗北のようだ。
深追いすればなんとかイケるのかもしれないが、そんな勢いはもうないぞ。

** 方針

- パラレルポートを叩くレガシーなプログラムがある
- すでにパラレルポートのないパソコンを使っている
- USBプリンタケーブルを活用して状況を打破

** 購入物品

- [http://d.hatena.ne.jp/asin/B0000ACC6K:title]
- [http://d.hatena.ne.jp/asin/B00008B2X8:title]

** USB 印刷サポートの利用方法や、同等のドライバ
- [http://blog.peter.skarpetis.com/archives/2005/04/07/getting-a-handle-on-usbprintsys/:title]
- [http://mcn.oops.jp/wiki/index.php?USB%2FClass%2FPrinter:title]

** お役立ち情報
- [http://www.keshi.org/blog/2005/11/pl2305.html:title]
これを読んで白旗を挙げることにした。


確かに、データシートのベンダ固有命令のところが適当すぎる。
ここらへんもうちょっと情報があるとピン毎の制御・情報取得が出来てよいのだが…
- [http://www.prolific.com.tw/support/files/%5CIO%20Cable%5CPL-2305%5CDoc%5CData%20Sheet%5Cds_pl2305_v11D.pdf:title=PL-2305のデータシート(PDF)]


上記ブログにあるように[http://www.transdigital.net/info.htm:title=パラレルポートを増設するPCカード]を買うべきか。
日本では以下のページで売っている。
- [http://www.compass-lab.com/STK_CAN/ParaCard.htm:title]
こんどはよくよく調査して、LPTxに直にマップしてくれる機器を買わねばなるまい。
なんとか安く手に入れてやるぜ。
giveioも入れないといけない。


しかし、他のエントリから浮きすぎた。今は反省している。
</body>
</day>
<day date="2007-06-17" title="">
<body>
*1182108975*[宣伝][Senna]Software DesignでMySQL + Sennaが取り上げられているようです。
- [http://d.hatena.ne.jp/software_design/20070615:title]
のエントリによると、Software Designの2007/07号でMySQL + Sennaが紹介されているようだ。チェックしよっと。
[asin:B000RE7P3Y:detail]

さらに、Tritonnの開発者の一人であるmirさんのブログによると、
- [http://d.hatena.ne.jp/mir/20070616/p1:title]
&gt;&gt;
今後のTritonnプロジェクトではdiffパッチの配布ではなくmake distで作ったソース丸ごとtarballの配布を検討しております。

それに伴い、ビルド方法も変わるので公式サイトのドキュメントも更新するつもりです。今後はconfigure &amp;&amp; make &amp;&amp; make installでインストールできるようになる見込み。
&lt;&lt;
というわけで、SennaつきMySQLのビルドが楽になるらしい。きゃほーい。
</body>
<comments>
<comment>
<username>Voluntas</username>
<body>いやっほーい！！</body>
<timestamp>1182140054</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>うっひょーい！！</body>
<timestamp>1182145715</timestamp>
</comment>
</comments>
</day>
<day date="2007-06-21" title="">
<body>
*1182432392*[検索][Sedue]代表がボウズではない検索エンジン会社
きゃほ～い、西川ちゅわんだぁ～～～　ハァハァ
- [http://v.japan.cnet.com/column/select/story/0,2000067543,20351156,00.htm:title]


&gt;&gt;
国内外のライバルなどについて質問をしても、きちんとした前向きな答えが返ってくる。
&lt;&lt;
まず、ライバル認定されているかどうか、それが問題だ…


IPA X 2007にいくかどうかは迷い中。
</body>
<comments>
<comment>
<username>kzk</username>
<body>どうも。今度一緒に酒でもいかがですかー？西川ちゅわんをつぶしましょう(笑)</body>
<timestamp>1182444076</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>こんばんはこんばんは！&lt;br&gt;酒！酒！いいですね！！！　西川ちゅわんをちゅわんちゅわんにしちゃいましょう！！！&lt;br&gt;平日の夜はだいたい空いてます。a at razil.jp/mixi:118306にお誘いメールを！</body>
<timestamp>1182444333</timestamp>
</comment>
</comments>
</day>
<day date="2007-06-23" title="">
<body>
*1182582379*[開発][ClearSilver][Python][C][Web]ClearSilverについて調べる
Python + Djangoで掲示板システムを書いてみていたんだけど、
どうもスマートに書けない。
O/Rマッパが必要となるようなシステムでもないし、
入力フォームもそう多くない。


というわけで、
自前でテンプレートシステムを呼び出して、
データベースとのやりとりやロジックは自前で実装しちゃおうぜ、
という気分になりました。


ClearSilverっていうテンプレートエンジンが動作がはやそうなので調査。
PythonでもCでも使えるみたい。


随時更新。

** 目標

- すばやく動的なHTMLを出力したい。
- でも楽もしたい。

** かんたんな仕組み

- HDFっていうデータ構造を作るよ
- テンプレートにそれ流し込むよ
- できあがり！

** 導入事例

- www.livedoor.comのトップページ (Cで書かれてるらしい)
- Trac (Python) でも次期バージョンではGenshiというテンプレートエンジンになるらしい

** ベンチマーク

- Pythonでの
-- http://genshi.edgewall.org/wiki/GenshiPerformance

** Debianでのインストール
&gt;|sh|
sudo aptitudeinstall clearsilver-dev python-clearsilver
||&lt;

** データセットとHDFファイル
(元の文章: http://www.clearsilver.net/docs/man_hdf.hdf)


元となるデータセットなんだけど、
HDFっていう形式で書かれたファイルから読むことができる。
HDFでは、階層的なデータをあらわすことができるんだ。
HDFの書き方には２つの文法があって、まぜこぜにすることもできる。


１つめは、単純なドット区切りのやつ。
&gt;|HDF|
Page.Name = My Index
Page.URL = /myindex.html
Page.Menu.0 = Home
Page.Menu.1 = Preferences
Page.Menu.2 = Help
Page.Menu.3 = Support
||&lt;


２つめは、ネストするやつ。
&gt;|HDF|
Page {
  Name = My Index
  URL = /myindex.html
  Menu {
    0 = Home
    1 = Preferences
    2 = Help
    3 = Support
  }
}
||&lt;
ネストの中にはどんな要素も含むことができる。


ためしに、Menuを拡張してみよう。
&gt;|HDF|
Page {
  Menu {
    0 {
      Name = Home
      URL = /
    }
    1 {
      Name = Preferences
      URL = /prefs
    } 
    2 {
      Name = Help
      URL = /help.html
    }
    3 {
      Name = Support
      URL = /feedback/
    }
  }
}
||&lt;


HDF関係のAPIはこのフォーマットのファイルを読み書きできるから、
データセットの永続化にも使える。
けど、普通は静的なデータをテンプレートに流し込むのに使うよ。
テンプレートをレンダリングするとき、
データセットの特定の値が参照できるし、
特定の点にある全ての要素を順に参照したりすることができるんだ。


HDFの文法でさらに２つ重要な部分があるんだ。


イコールの代わりにコロンを使えば、
値のコピーができるよ。
例えばこんなん。
&gt;|HDF|
Page.Name : Page.Menu.0.Name
||&lt;
Page.NameがPage.Menu.0.Nameと等しいってことを表してる。
注意！コピーする前にPage.Menu.0.Nameを定義しとかないといけないよ。


もひとつ、複数行の文字列値を使うことができるよ。
シェルとかPerlの文法っぽい感じ。
例えばこんなん。
&gt;|HDF|
Page.Name &lt;&lt; EOM
This is my multi-line page name.
Isn't it spiffy?
EOM
||&lt;

** ClearSilverテンプレート

(元文章:http://www.clearsilver.net/docs/man_templates.hdf)


ClearSilverのテンプレートについて。
- 拡張子は普通.cstか.cs
- 内容は、ClearSilverのテンプレートコマンドを含んだテキスト
- &amp;lt;?csと?&amp;gt;の間にコマンドを埋め込む

テンプレートコマンドはこんな感じ。
- 置換: var, evar, lvar, include, linclude, set, name
- フロー制御: if, else, elif, alt
- 反復: each, loop, with
- マクロ: def, call
全てのフロー制御コマンド・全ての反復コマンド・defコマンドは対応する終了コマンドがあるよ(HTMLみたいな）。
例えば、ifだったら/ifっていう終了コマンド。


ほとんどのコマンドは、１つ以上の式を引数としてとるよ。
さらに、#でコメントもつけられる。(こげな感じ &amp;lt;?cs # this is a comment ?&amp;gt; ）

*** 置換

- var: 単純な値の置換。&amp;lt;?cs var:Page.Name ?&amp;gt;
- evar: varとほぼ同じ。ただし、ClearSilverテンプレートを読み込んでパースするときに置換される。よって、表示が始まる前にエラーが報告されるよ。ループの中では使えないっす。
- lvar: evarとほぼ同じ。ただし、データセットの値はパース時のではなくレンダリング時のが使われる。エラーはレンダリングの前に報告される。こいつが使われていると、出力をバッファリングしてない時は毎回レンダリングが行われちゃう。CGI Kitは出力をバッファしてくれるけどね。
- name: 名前をドット区切りした中で、一番お尻の部分を返す。&amp;lt;?cs name:Page.Name ?&amp;gt;だとNameが返ってくる。繰り返しやマクロの中で使うと便利、なぜなら、繰り返しやマクロの中では、変数の本当の名前が隠されちゃうことがあるから。変数名に特別な意味を持たせてること、あるよね（例はあとで出すよ）。
- name(): 実は、組み込み関数でnameっていうのがある。&amp;lt;?cs var:name(Page.Name) ?&amp;gt;は&amp;lt;?cs name:Page.Name ?&amp;gt;と一緒ね。ただし、ローカル変数に対して使うと、ローカル変数が指している値の名前が出ちゃうから注意ですぞ。
- include: 他のClearSilverテンプレートを読み込む。値でも変数でも引数にとれるよ。値を引数にするときは、&amp;lt;?cs include:&quot;header.cs&quot; ?&amp;gt;のように&quot;でくくってね。この場合、HDFサーチパスってヤツに基づいてheader.csをさがす。ただーし！！！includeはパース時に行われるから、ローカル変数は引数に出来ませんぞ。同じ理由で、ifとかでフロー制御している中でincludeをした場合、条件によってincludeされたりされなかったりするんじゃなくて、毎回きっちり必ずincludeされるぞ。
- linclude: includeみたいなの。ただし、読み込みがレンダリング時。だか～ら、ローカル変数を引数に渡せるし、条件つけてロードするかどうかを制御できる。ローカル変数はlincludeされるファイルには渡されないけど、lvarみたいにエラーはレンダリングに報告されるよ。
- set: データセットに値を設定するよ。ちょっと文法が複雑。普通は必要なときだけに使うことをオススメするぞ。一般的に、setコマンドは整形のために使われるよ。決まった行数の表でデータを表示するとか、反復中ある条件を満たした値だけにチェックをつけるとか。あとで例出すよ！引数にHDFの値や値を決める式を取ることができるよ。例えばこんなん。&amp;lt;?cs set:Page.Title = &quot;The Title is &quot; + Page.Menu.0.Name ?&amp;gt;

*** フロー制御

ifとelifとelseが使える。
ifとelifの引数には、booleanとして評価できる式を与えることができるよ。
例えば、以下のifコマンドはいつもtrueと評価される。
&gt;|html|
&lt;?cs if:#1 ?&gt;
&lt;?cs /if ?&gt;
||&lt;
/ifに注意ね。


altコマンドは、if var elseの短縮形。
altがtrueだったらaltを表示、そうでなければ/altまでのテキストを表示するよ。
つまり、下の２つは等価ってことだね。
&gt;|html|
  &lt;?cs alt:my_text ?&gt;There is nothing to see here&lt;?cs /alt ?&gt;
  &lt;?cs if:my_text ?&gt;&lt;?cs var:my_text&lt;?cs else ?&gt;There is nothing to see here&lt;?cs /if ?&gt;
||&lt;

*** 反復

無限ループはヤバいので禁止してるよ。
ループコマンドは「each」です。
与えられたノードの子供全てをなめてくれるよ。
例えば、こんなデータセットが与えられたと思いねい。

&gt;|HDF|
Page {
  Access = Public
  Content = myword.cs
  Menu {
    0 {
      Name = Home
      URL = /
    }
    1 {
      Name = Preferences
      URL = /prefs
    } 
    2 {
      Name = Help
      URL = /help.html
    }
    3 {
      Name = Support
      URL = /feedback/
    }
  }
}
||&lt;
このとき、Pageに対してeachをかけたら、Page.Access・Page.Content・Page.Menuをくるくるまわる。
Page.Menuに対してeachをかけたら、Page.Menu.0・Page.Menu.1・Page.Menu.2・Page.Menu.3をくるくるまわる。


例えば、メニューを表示したいとしよう。
&gt;|html|
&lt;?cs each:item = Page.Menu ?&gt;
  &lt;?cs name:item ?&gt; - &lt;a href=&quot;&lt;?cs var:item.URL ?&gt;&quot;&gt;
        &lt;?cs var:item.Name ?&gt;&lt;/a&gt;&lt;br&gt;
&lt;?cs /each ?&gt;
||&lt;

結果は、以下のHTMLになる（ゴミ空白がちょっとついちゃうけどね）
&gt;|html|
  0 - &lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt;&lt;br&gt;
  1 - &lt;a href=&quot;/prefs&quot;&gt;Preferences&lt;/a&gt;&lt;br&gt;
  2 - &lt;a href=&quot;/help.html&quot;&gt;Help&lt;/a&gt;&lt;br&gt;
  3 - &lt;a href=&quot;/feedback/&quot;&gt;Support&lt;/a&gt;&lt;br&gt;
||&lt;

ここで、ローカル変数itemがその参照先（例えばPage.Menu.0）と同じように振舞うことに注意。だから、itemが持つ子供の要素にもアクセスできる。nameコマンドにも気をつけてね。


withコマンドは、Pascalのwith演算子のようなもの。
変数に別に変数名をつけてアクセスすることができるようになるよ。
スコープ付きの値へのポインタと考えてもらえばOK。
複雑な式のときおすすめ。こんな感じね。
&gt;|html|
&lt;?cs with:item = Page.Menu[Query.foo - #1] ?&gt;
  &lt;?cs name:item ?&gt; - &lt;a href=&quot;&lt;?cs var:item.URL ?&gt;&quot;&gt;
        &lt;?cs var:item.Name ?&gt;&lt;/a&gt;&lt;br&gt;
&lt;?cs /with ?&gt;
||&lt;
結果は、Query.fooが3のとき以下のようになる（またゴミ空白がつくけどね…）
&gt;|html|
  2 - &lt;a href=&quot;/help.html&quot;&gt;Help&lt;/a&gt;&lt;br&gt;
||&lt;

loopコマンドは、数値でループするのに使われる。for文みたいな感じ。
引数は、開始値・終了値・増分の３つ。
無限ループしないようにチェックしてます。
例えば増分がマイナスで終了値が開始値より大きく設定されていた場合には、
開始値と終了値を入れ替えちゃいます。
引数の式は１回しか評価されないから、ループの中で変数変えても効果ないよ。


例えばこんな感じ。
&gt;|html|
&lt;?cs loop:x = #1, #5, #2 ?&gt;&lt;?cs var:x ?&gt;, &lt;?cs /loop ?&gt;
1, 3, 5
||&lt;
&gt;|html|
&lt;?cs loop:x = #1, #205, #2 ?&gt;&lt;?cs var:x ?&gt;, &lt;?cs /loop ?&gt;
1, 3, 5... 205
||&lt;

逆向き～
&gt;|html|
&lt;?cs loop:x = #205, #1, &quot;-2&quot; ?&gt;&lt;?cs var:x ?&gt;, &lt;?cs /loop ?&gt;
205, 203, 201, ... 1
||&lt;

** という風にドキュメントを翻訳してきたけれど
温泉に入ったらやる気が減少。
コードを書くか。

** 参考
- [http://d.hatena.ne.jp/bonar/searchdiary?word=%2a%5bClearSilver%5d:title]
- [http://d.hatena.ne.jp/dayflower/20070416/1176705134:title]
- [http://blog.shebang.jp/archives/50579490.html:title]
- [http://d.hatena.ne.jp/spiritloose/searchdiary?word=%2a%5bClearSilver%5d:title]
- [http://blog.doofah.biz/?p=245:title]
- [http://blog.craft-works.jp/uru/id/2e45fa5d-c399-47d7-a041-50609829e334:title]
- [http://www.typemiss.net/blog/kounoike/20060118-49:title]
- [http://d.hatena.ne.jp/yoshifumi1975/20070129/1170062978:title]

*1182579047*[雑談]通販で買った商品の中に手書きの手紙やカードを入れるの反対！！！
最近、楽天市場で何かを購入すると、
手書きのカードや手紙がついてくることが多い。


「初めて購入いただきありがとうございます。
　私、○○商店楽天市場担当、○○です！！
　末永様にうんぬんかんぬん…」
といった、結構長文なものが多い。


そのカード類を見るたびに、
「なんて無駄なことをしているんだろう…」と胸が痛くなると同時に、
このカード類をもらってうれしいと思う人もいるんだろうな、とも思う。
（きっと楽天大学で指導しているんだろう）


想像するに、このカード類って
アルバイトが腕を痛めて何枚も何枚も書いているんじゃないかなあ。
そう考えると、心がこもってないわ、労力の無駄だわ…
アルバイト代の捻出のために少なからずお金もかかっているしね。
そんなものだとは分かっていても、
捨てる際に一瞬躊躇してしまうのもイヤだ。
ありがたがる人の気持ちがよくわからん。むしろ気分悪い。


この記事は、
以下のサイトの記事を読んだよドリブンで書きました。
自動配信メールで済ませてくれよ、頼むから。
- [http://satoshi.blogs.com/life/2007/06/post-2.html:title]


思い出した。
AmazonでAMEXカードで購入したとき、
梱包の中にAMEXカードの案内ビラを入れるのはやめて欲しい。
毎回捨てるのがめんどい（躊躇することはないだけマシだけどさ）


まあ、Amazonについては、
ビラの配布に関して
プライバシーを配慮して一切ユーザの属性情報を使っていない、
と謳っているからしょうがないんだけど。

*1182566095*[雑談][開発合宿]電源がないと困る人たちへ
Macな人が多い開発合宿では、これらのアイテムを持っていくと大変便利だと思った。
[asin:B0000EZHT0:detail]
[asin:B0000EZHSQ:detail]
[asin:B0000EZHSG:detail]
[asin:B0000EZHS6:detail]
[asin:B0006ZEJ6K:detail]

</body>
</day>
<day date="2007-06-26" title="駅のホームですっぽんぽん">
<body>
*1182860716*[MeCab]MeCabで--with-libiconv-prefixが効いていない気がする
FreeBSD環境だからかもしれないけれど、--with-libiconv-prefixのオプションが効いていない気がする。
Makefileとconfig.hを書き換えて強引にmakeを通した。

*1182840102*[技術メモ][全文検索][Lucene]Lucene 2.2の新機能を調べてみた。
関口宏司さんのLuceneブログによると、
Lucene 2.2がリリースされ、
ペイロードをつけることができるようになったようだ。

- [http://lucene.jugem.jp/?eid=131:title]
- [http://lucene.jugem.jp/?eid=133:title]
- [http://lucene.jugem.jp/?eid=134:title]

ペイロードを使ってのスコア操作についても
実例を挙げて説明している。面白い。
Senの品詞情報や読み情報を利用した検索・スコアリングは
夢が広がりまくりんぐな感じ。


んで、Lucene 2.2でついたペイロード以外の機能も調べてみた。
Luceneの知識は適当なので、間違っていたら訂正・突っ込み求む。

** point-in-time機能
インデックスを読み込むIndexReaderクラスと
インデックスを用いて検索を行うIndexSearcherクラスにおいて、
インデックスを開いたまさにその状態のまま読み込み・検索を行える機能のようだ。


以下のURLには、「NFSを経由した&quot;point-in-time&quot;検索機能」と書いてあって、
よく意味がわからなかった。
- [http://journal.mycom.co.jp/news/2007/06/22/012/index.html:title]
Lucene 2.2のCHANGES.txtによると、こういうことのようだ。


まずLucene2.1の時点で、以下の機能が追加された。
Writerがコミットしている間にもReaderがロックしない機能のようだ。
ReaderはまさにReaderとしてインデックスへの書き込みが出来なくなったと予想。
&gt;||
10. LUCENE-701: Lockless commits: a commit lock is no longer required
    when a writer commits and a reader opens the index.  This includes
    a change to the index file format (see docs/fileformats.html for
    details).  It also removes all APIs associated with the commit
    lock &amp; its timeout.  Readers are now truly read-only and do not
    block one another on startup.  This is the first step to getting
    Lucene to work correctly over NFS (second step is
    LUCENE-710). (Mike McCandless)
||&lt;


次に、今回リリースされたLucene 2.2において、以下の機能が追加された。
IndexWriterのインスタンスを作る際、
autoCommitというフラグを指定できるようになったようだ。
デフォルトではtrueのようで、
この場合はLucene 2.1以下と同じように&quot;point-to-time&quot;ではない検索、
つまりインデックスへのコミットされた変更点はReaderやSearcherに影響するようだ。
&gt;||
 3. LUCENE-710: added optional autoCommit boolean to IndexWriter
    constructors.  When this is false, index changes are not committed
    until the writer is closed.  This gives explicit control over when
    a reader will see the changes.  Also added optional custom
    deletion policy to explicitly control when prior commits are
    removed from the index.  This is intended to allow applications to
    share an index over NFS by customizing when prior commits are
    deleted. (Mike McCandless)
||&lt;

例えばインデックスがNFS上にあり、それを多数のクライアントが共有して読み込む場合を考える。
autoCommitをfalseにしておけば、
大量の更新トラフィックが飛んでこなくなったと推測される。
よって、上記のような利用シーンでも実用的に使える感じになったと思われる。


実際にIndexWriterのjavadocを見比べてみよう。
- [http://lucene.apache.org/java/2_1_0/api/org/apache/lucene/index/IndexWriter.html:title]
- [http://lucene.apache.org/java/2_2_0/api/org/apache/lucene/index/IndexWriter.html:title]
ふむ、確かにIndexWriterのコンストラクタ引数にautoCommitが追加されている。

** Function queries機能

CHANGES.txtによると、Lucene 2.2では以下の機能が実装されたようだ。
&gt;||
 8. LUCENE-446: Added Solr's search.function for scores based on field 
    values, plus CustomScoreQuery for simple score (post) customization.
    (Yonik Seeley, Doron Cohen)
||&lt;
ふむふむ…　検索スコアをカスタマイズできる簡単ツールキットみたいなものが追加されたイメージかな。


というわけで、該当するところのjavadocを見てみる。
- [http://lucene.apache.org/java/2_2_0/api/org/apache/lucene/search/function/package-summary.html:title]
そこにあったサンプルコードによると、
指定のフィールドに入っている情報をスコアとして返したり、
もともとのスコアを文書idの平方根で割ったものをスコアとして返したりすることができるらしい。


今までのLuceneでもスコアをカスタマイズすることができたが（詳細は関口さんのブログを参照）、
それがより簡単になったということだろう。

** pre-analyzed fieldsのための新API

CHANGES.txtによると、Lucene 2.2では以下の機能が実装されたようだ。
&gt;||
10. LUCENE-580: Added a new constructor to Field that takes a TokenStream as
    argument, available as tokenStreamValue(). This is useful to avoid the need of 
    &quot;dummy analyzers&quot; for pre-analyzed fields. (Karl Wettin, Michael Busch)
||&lt;

LuceneでいうところのDocumentは、DBMSでいうところの行みたいなもの。
というわけで、fieldはDBMSのfieldをイメージするといいのかも。


TokenStreamについては、関口さんのブログに詳しいエントリがある。
- [http://lucene.jugem.jp/?eid=50:title]
単純に言えば、テキストを食わせると、単語(Token)をピコピコ連続で返してくれるStreamらしい。
TokenStreamは、Analyzerっていうものにテキストを食わせると得られるらしい。


どうやら今まではFieldを作る際に、
Analyzerをすでに通してあるTokenStreamを直に指定することができなかったようだ。
JavaのReaderクラスとして受け取ることは出来るんだけれども、結局またAnalyzerを通されるらしい。
というわけで、ダミーのAnalyzerを用意しなければならなかった、ということらしい。


Lucene 2.2では、FieldのコンストラクタにTokenStreamを直に指定できるようになったみたい。
javadocを見てみよう。
- [http://lucene.apache.org/java/2_1_0/api/org/apache/lucene/document/Field.html:title]
- [http://lucene.apache.org/java/2_2_0/api/org/apache/lucene/document/Field.html:title]
確かにコンストラクタが増えてます。

** まとめ

以下に、Lucene 2.2で目玉となる４つの新機能と、それによって出来ることをまとめたよ。

- point-in-time機能
-- NFS経由でのインデックス共用が可能に
- ペイロード機能・Function queries機能
-- 高度なスコアリング・検索を比較的簡単に実現できるように
- pre-analyzed fieldsのための新API
-- Field作成時にAnalyzeをパスすることが可能に

さすがはLuceneといったところでしょうか。
コードの実例や補足は関口さんがしてくれることを期待。

</body>
</day>
<day date="2007-06-27" title="場所！？暗号！？合言葉！？それともボールの並べ方！？">
<body>
*1182939493*[全文検索][Lucene][Wikipedia][雑談]WikipediaでのLuceneの項目は浮いている
なんとも言えない浮きっぷり。誰が書いたんだろう。
- [http://ja.wikipedia.org/wiki/Lucene:title]
</body>
</day>
<day date="2007-06-30" title="">
<body>
*1183170786*[Python]Python Workshop the Edge 2007の会場から
IPAX 2007は行き損ねた。
家から駒場まで歩いて汗ダラダラ。
でも、会場はクーラー効き過ぎて今凍え死にそう。


講師が話した内容と共に、
それについて僕が思ったことをメモ。
いつものごとく随時更新。
** Python Webフレームワーク総ざらえ
- 講師＆増田談 Django、テンプレートだけ使うってのもあるよ(ex. SQLAlchemyと一緒に)
- libeventをwsgiに対応したらそれなりに高速なサーバができそう。
- トレースバック重要(エラーメッセージ重要)
- 柴田談 SQLAlchemyは僕が使った限りでは実用に耐えない。
** Tracの活用
- svnsyncってあったんだ… svnsync+Tracもいいな
- 根底「プロジェクトを楽にするために」
- 運用大事。コミット粒度とか、チケット粒度とか、チケット閉じる担当者とか。
- 最初に作るページ。プロジェクト標準（運用ルールとか）・用語集・自己紹介
- 重要度は優先度だけでOK、あとは消していいよ
- マイルストーンなしのチケットは見落とす -&gt; 初期値で設定しておこう
- 出席簿。session情報からログインしていないヤツを見つけ出す
-- BTS入れても見なくなる、使わなくなるのを防止
- ISearchSource
- 7/7に0.11が出るよ
- resolvedとclosedを分けられる
-- close担当者だけがcloseとかできるね。
- 0.12でgettext化するらしい。
** 昼食
なんか新しい目の建物の学食で。
懐かしい空気だ。
** Twisted
- も、申し込み忘れた…　立って参加しづらい雰囲気だったので退室
- あとで自分でやる
** KEK
- 加速器はやっぱデケーな
- Python 1.5.2 !!! 2.5.1じゃないよ
- おしゃべりアラーム
-- macspeech/ctypes/FrameWork,MiniAEFrame
-- エラーが起こったら、読み上げ機能で読み上げる
-- プログラムは137行
- 見学歓迎らしい。
- Perlの暗黒面
** セガ
- ゲームのムービーを作ってる(インタラクティブでない部分)
-- オリジナルコンテンツの映像も出したいよ
- VE研究開発部
-- デザイナー56人/エンジニア12名
-- ほぼWindows!!!! 一部サーバがLinux -&gt; Linuxを増やすんだって。
- 群集作成ソフトなんてあるのか…
- Maya Python
-- Twisted/SOAPpyで他ツールとの連携
-- その他いろいろいい点がある
-- MayaのGUIに対するcallbackが素直に書けないらしい
-- wxPythonを使うと一部のイベントが取れない(Mayaが横取りしちゃう)
- Ploneで部内情報共有してる
-- 分業制なので意思疎通が難しい
-- 日報はCOREBlog2でのblog
--- カテゴリでスマートフォルダ検索
- XPCOMでC++とPythonを連携している
- 人材募集だって
-- [http://kigyou.jobdirect.jp/service/k002/485/0263211.html:title]
** 添削道場
- ymasuda
-- Py然
-- lispキモい（ワザと誤解を招く表現）
-- PEPは「書道」
-- 文字列リテラルの連接がある。(&quot;str1&quot; &quot;str2&quot;)
-- わかりやすいワンライナー系
-- listのappendは毎回list objectを作り直すらしい。それextendで！
- ats
-- 小田切さんは嫌い（ワザと誤解を招く表現）
-- 空気読もう…
** Django
- 上村さんは文系プログラマー
- dlnicoの人がいた（多分）
-- [http://nanabit.net/softwares/dlnico/:title]
- 最新版のドキュメントはこちら
-- [http://michilu.com/django/doc-ja/index/:title]

*** セミナーのお手伝いをした側の立場から。

詰まりポイント。
- スペルミス
- サンプルコードがステップアップしているのだが、importが増えていることを見落とす
- エラーメッセージの行と全く違う行が原因になっている場合がある（気づかずにurlpatternsを二重のタプルにしていたり）
- Pythonのインデントスタイルに慣れていない
- ipythonが入っていない

進捗にばらつきがでたので、歩調をあわせるためにも資料に区切りがあると良かった。
会場が狭く、全体を見回しにくかった。どんな会場でセミナーをやるのかをリサーチしておくといいと思った。
modelを使わないのは正解だったと思う。


次回やるときはDjango本が出ていると思うので、
それに沿ってやれそうだ。
** 抜け出す
お守りしているサーバの中で一番落ちてはいけないサーバが落ちていたので脱出。
最初はバッチが止まっているだけだと思っていたのに…
復旧中。トホホ。そして朝帰り。途中で事故を目撃した((詳しくはmixiで))。


抜け出すにあたって懇親会の費用を先に預かってもらったりと、
会計担当者の村岡さん・阿部さん・その他スタッフにお世話になった。
余計な手間かけさせてすみません＆ありがとうございます。
懇親会行きたかったなあ。
</body>
</day>
<day date="2007-07-02" title="">
<body>
*1183359332*[全文検索]全文検索エンジン FlexSearch
全文検索エンジン FlexSearchというものがあるようだ。
- [http://plaza.rakuten.co.jp/kugutsushi/diary/200706300000/:title]


特徴は以下のとおり。
&gt;http://www.adin.co.jp/fs/tokucho.html:title&gt;
「FlexSearch」は、文字間をラバーバンドで連結して
伸縮させるように類似文字列を検出する、
Rubber Band Matching(RBM　-ラバーバンドマッチング)
アルゴリズムを採用しています。 RBMアルゴリズムを採用することで、
表現の差違を吸収して検索対象を抽出できます。 
例えば・・・ 

- 部分文字列（文字の部分一致で検索）
--「高齢化問題」
--将来の「高齢化」社会において・・・ 

- 文字の挿入（キーワードに文字を追加して検索）
--「ゴミリサイクル」
--ゴミのリサイクル問題が・・・ 

- 文字の欠落（キーワードから文字を削除して検索）
--「女子中高生」
--女子高生に人気の・・・ 

-文字の置換（キーワードを置換えて検索）
--「ドボルザーク」
--ドヴォルザークの交響曲 
&lt;&lt;
「決して漏らさず」房中術((房中術は「接して漏らさず」だけどね))のような検索エンジンという印象。
このような検索にもニーズがあるということを学習。
&gt;http://plaza.rakuten.co.jp/kugutsushi/diary/200706300000/:title&gt;
違いを吸収した検索と、完全マッチングの検索が欲しい場合と両方あるなとか思う。
&lt;&lt;
というのがユーザの正直な意見だと思う。


そいえば、
シーケンス中に挿入や削除がある場合のインデックス検索について、
以前お会いした山田智之さんが
「オレのアルゴリズムはすごいぜ!!!（超意訳）」とおっしゃっていた。
- [http://www.worldscinet.com/jbcb/mkt/S0219720004000454.pdf:title=computing highly specific and noise tolerant oligomers efficiently]
ま、まだ全然読んでませんすみません…
</body>
</day>
<day date="2007-07-04" title="">
<body>
*1183539429*[雑談]世の中、納得のいかないことばかりです。
出社したとたん、
「グニャラさんって『エロか悪』なんですね！！！」と
新しくブラジルに入った人に言われる。


誰が言っていたのかと聞いてみたところ、
「表面的でない人間的な優しさを持った人」らしい。
- [http://naoya.g.hatena.ne.jp/naoya/20070703/1183456164:title]


( ﾟДﾟ)…へぇ～…ふぅ～ん…（#＾ω＾）ﾋﾟｷﾋﾟｷ
</body>
<comments>
<comment>
<username>coji</username>
<body>っっｗ</body>
<timestamp>1183554961</timestamp>
</comment>
<comment>
<username>愛</username>
<body>脳内メーカーとかですか？ｗ</body>
<timestamp>1183555246</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>&gt;cojiさま&lt;br&gt;この苦労を分かっていただけますよね！！&lt;br&gt;&gt;愛さま&lt;br&gt;勝手に作ったキャラクターです。人に面白キャラをつけていじり倒すのが特技な人ですよ。</body>
<timestamp>1183555500</timestamp>
</comment>
<comment>
<username>愛</username>
<body>http://maker.usoko.net/nounai/r/%CB%F6%B1%CA%B6%A9&lt;br&gt;じゃーんｗ&lt;br&gt;すばらしい！（すいません）&lt;br&gt;付き合ってください！(嘘）</body>
<timestamp>1183556474</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>&gt;愛さま&lt;br&gt;http://maker.usoko.net/nounai/r/%CB%F6%B1%CA+%B6%A9&lt;br&gt;ですよ！</body>
<timestamp>1183562519</timestamp>
</comment>
<comment>
<username>愛</username>
<body>ぉお！&lt;br&gt;イメージUPをはかりましたね！(笑</body>
<timestamp>1183563245</timestamp>
</comment>
<comment>
<username>レイナ</username>
<body>ごめんなさい・・・(笑)&lt;br&gt;だってそう聞いたからー！！</body>
<timestamp>1183688081</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>&gt;レイナさま&lt;br&gt;誰が悪いかは重々承知しております。</body>
<timestamp>1183709964</timestamp>
</comment>
</comments>
</day>
<day date="2007-07-08" title="">
<body>
*1183906934*[雑談]特殊生命体
- [http://news4vip.livedoor.biz/archives/51008533.html:title]

こないだデータセンタにいったら、
サーバとサーバの間に挟まっていた。恐るべし。
</body>
</day>
<day date="2007-07-09" title="">
<body>
*1184013648*[mysql]MySQLつながりで

Understanding MySQL Internalsという本が出ているらしい。
- [asin:0596009577:detail]

さくっと発注してみた。何か楽しい情報が載っているかもしれない。

*1183984116*[技術メモ][mysql]mysqlhotcopyが動かない
mysqlhotcopyを動かすと、
&gt;||
Invalid db.table name 'ore.ore`.`oretable' at /usr/bin/mysqlhotcopy line 855.
||&lt;
のように、データベース名が２つ重なってしまって動かない。

- [http://bugs.mysql.com/bug.php?id=27303:title]
によると、DBD::mysqlのバージョンによる挙動の違いによって起こっているらしい。


とりあえず、835行目の
&gt;|perl|
my @dbh_tables = eval { $dbh-&gt;tables() };
||&lt;
の後に、
&gt;|perl|
map { s/^.*?\.//o } @dbh_tables;
||&lt;
を入れれば動くらしいぞ。

</body>
<comments>
<comment>
<username>mir</username>
<body>既存のinternalsマニュアル(http://forge.mysql.com/wiki/MySQL_Internals)の翻訳版かなぁとおもってamazon.comで調べたら、別物っぽい様子（http://www.amazon.com/Understanding-MySQL-Internals-Sasha-Pachev/dp/0596009577/）でした。</body>
<timestamp>1184028935</timestamp>
</comment>
<comment>
<username>グニャラくん</username>
<body>面白い内容があったらお伝えします！</body>
<timestamp>1184173813</timestamp>
</comment>
</comments>
</day>
<day date="2007-07-10" title="">
<body>
*1184047899*[雑談]livedoorから確認メールが届かない
フレパからのメールが毎日届くメールアドレスに、
確認メールを送ろうと思っても届かない…
- [http://member.livedoor.com/email_auth/input:title=確認メールの送信]

う～ん、なんでだろ…
というわけで、フォームで聞いてみた。


すぐ返事が返ってきた。返事が早い！好印象。
他のメールアドレスで試してみるか…
&gt;||
末永匡 様

ポータルサイト livedoorのxxです。
お問い合わせいただきまして、ありがとうございます。

&gt; http://cms.blog.livedoor.com/register/input
&gt; で送信できる認証メールが
&gt; example@example.com
&gt; 宛てに届きません。
&gt; 
&gt; フレパからのメールは
&gt; 同じメールアドレスにきちんと届いてます。
&gt; 
&gt; よって、
&gt; ・メールアドレス自体は合っている
&gt; ・livedoor.comドメインからのメールを受信できる
&gt; 状態です。
&gt; 
&gt; また、スパムフィルタ等でフィルタされていないかも確認いたしましたが、
&gt; フィルタ等なされていないようです。
&gt; 
&gt; 認証メールはどのように受け取ればよいのでしょうか。


お返事遅くなりまして、誠に申し訳ございません。

お問合せいただきました、「メール認証」につきまして、
メール認証にて受信可能なメールアドレスを記載していただきました
アドレスに送信させていただいておりますが、受信出来ないとの事ですので、
大変お手数でございますが、一度下記設定をお試しいただけますでしょうか。

1.該当のlivedoor IDにてログイン後、トップページにございます「ブログを
作成」をクリック
http://cms.blog.livedoor.com/register/input
2.「メール認証」ページにて「メールアドレス」部分にメールアドレスを記載
しなおしていただき画面下部にございます「認証メールを送信する」をクリッ
クしご確認をお願いいたします。

また、上記設定でも認証メールが受信出来ない時には「メール認証」ページに
て「メールアドレス」部分にお客様がご利用中の、他のメールアドレスを入力し
ていただき、ご変更可能であればご確認お願いいたします。
尚、各メール事業者様にてよっては弊社のメール認証を受信拒否しているケー
スもございます。その時には他のメール事業者様のメールアドレスに変更して
、ご確認をお願いいたします

※ メール認証ヘルプ
http://blog.livedoor.jp/blog_cs/archives/50268446.html


今後ともlivedoorをどうぞ宜しくお願い致します。
||&lt;

</body>
</day>
<day date="2007-07-18" title="">
<body>
*1184756441*[雑談]オフィス全体でかけられる音楽とかけられない音楽
職場にて、ヘッドホンで大音量の「つるぺったん」を聞いているときに
同僚の女性から声をかけられて「ビクッ」ってしてしまった…
「つるぺったん」はちょっとマズいよね…
- ニコ動 : [http://www.nicovideo.jp/watch/sm183036:title]
- YouTube : [http://www.youtube.com/watch?v=4WB02meT0L4:title]
- CDの購入 : [http://www.akibaoo.com/02/commodity_param/t/0/ctc/+/shc/0/cmc/2500020030530/:title]

ブラジルのオフィス全体で「巨人のドシン」のサントラをかけたら、好評だった。
[asin:B00005F3KM:detail]

だれか、うちにある64DDとソフトのセットを喜んで引き取ってくれる人いないかなあ…
64本体はシレン２やブラストドーザーをやるために持っておきたいけど。

*1184752405*[開発メモ][Debian]gdbが動かない
Debianでdist-upgradeをしたあと、gdbが動かなくなった。
こんな感じ。
&gt;||
This GDB was configured as &quot;x86_64-linux-gnu&quot;...BFD: /home/tasuku/test/a.out: don't know how to handle OS specific section `.gnu.hash' [0x6ffffff6]
&quot;/home/tasuku/test/a.out&quot;: not in executable format: ファイル形式が認識できません
||&lt;

[http://forums.debian.net/viewtopic.php?t=16677&amp;sid=2d732913a733238d52f54b2815fd85f9:title]によると、
手動でunstableのgdbを入れよとのこと。
試してみるか -&gt; 試して動いた。

*1184752406*[宣伝][ブラジル]今日発売のサイゾーで未来検索ブラジルが取り上げられているようです
『佐々木俊尚の「日本型ニューウェブ宣言」』という連載にて、
私が所属している未来検索ブラジルという会社が取り上げられています。


取締役３人がワイワイと話しているので、
興味のある方は購入されることをオススメいたします。


ちなみに、僕は後姿だけ載っていますよ！

</body>
<comments>
<comment>
<username>mir</username>
<body>買っちゃいましたッ！左奥に写ってますね！</body>
<timestamp>1184902280</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>隅っこでつつましく作業しております！</body>
<timestamp>1184904919</timestamp>
</comment>
</comments>
</day>
<day date="2007-07-24" title="">
<body>
*1185279816*[技術メモ][Windows]WindowsNT・2000ネイティブAPIリファレンスが高すぎる
NtCreateSectionとNtMapViewOfSectionの挙動を記した本が欲しいなあ、と思って
探してみたんだけど…

[asin:489471244X:detail]
うはー、またプレミアムかよ！！
どこかに定価で落ちていたら情報求む。

**[追記]

テストプログラムを書いて、
NTSTATUSをFormatMessageでエラーメッセージ化したものを見たりしているうちに挙動を理解。
そして、その挙動が自分が期待していたものと違ってガックリ…
</body>
</day>
<day date="2007-07-28" title="">
<body>
*1185612566*[技術メモ][全文検索][sqlite][Python]PythonでSQLiteのFTS2を使う
いつもおなじみの？「傀儡師の館」にてSQLiteのFTS2をPythonで使う手順が公開されている。
- [http://plaza.rakuten.co.jp/kugutsushi/diary/200707270001/:title]
- [http://plaza.rakuten.co.jp/kugutsushi/diary/200707280000/:title]
- [http://plaza.rakuten.co.jp/kugutsushi/diary/200707280001/:title]

簡単に使えるようになれば、便利便利だねえ。
*1185612369*[技術メモ][sound]音楽からボーカルだけを抽出or削除
ある音源があって、ボーカルだけを抽出 or 削除したい場合ってあるよね。


ボーカルが中央に定位していれば、
- K5 WAVE Filterでセンター音を抽出
-- [http://kkkkk.net/?key=soft.kwf:title=K5 WAVE Filter]
- 波形エディタでボーカル以外を丁寧に取り除く
-- 400Hz～4Khzらへんが残るように周波数フィルタをかける
-- 細かい手作業
- 逆位相にする
- 元音源にぶつける
で結構キレイにボーカルが抜けると予想。
倍音成分がちょっと残ってしまうかもしれない。


適当でよければ、
K5 WAVE Filterでサイド音だけを残したり、
ボーカルリデューサーを使ったりで十分かもしれない。
- [http://limetarte.net/software/more/binary/VocalReducer.htm:title]


英語サイトのソフトウェアも試してみたのだが、
どれもソフトウェアとしてのデキが…
BestPracticeの使い心地は悪くなかった。
- BestPractice : [http://wayohoo.com/music-news/knowledge/bestpractice.html:title]
英語版のソフトウェアを探すときには、
「&quot;vocal reducer&quot;」「&quot;voice canceler&quot;」「&quot;vocal remover&quot;」「karaoke voice software」などの
クエリで検索してみた。


AudioSculptのフィルタがイイ！というのをどこかで読んだのだが、
AudioSculptはMac専用… Macを買えというお告げかしら。
- AudioSculptを使って女声に加工 : [http://pc11.2ch.net/test/read.cgi/dtm/1157621827/80-:title]


んで、一番の問題はボーカルが中央に定位していない場合と、
ボーカル以外が中央に定位している割合が高い場合。
たとえば、『魔理沙は大変なものを盗んでいきました』は
- 一部ボーカルが左右にステレオで振ってある
- 中央定位で目立つ音が多い
と大変ボーカルが抜きにくい。


情報求む。

** 追記1

Vocalつき音源とカラオケ音源があった場合、
Vocalだけを取得するソフトとしてGetVocalなるソフトがあるようだ。

- [http://www.geocities.co.jp/HeartLand-Gaien/5978/karamain.html:title=GetVocalを配布しているサイト]

カラオケ音源と元のVocalつき音源にゆらぎがあってもVocalを取得してくれるすばらしいソフトです。

** 追記2
実はこの記事って、このブログの中だとひそかな人気エントリなんだ。。。

SoundEngine Freeというソフトにボーカルキャンセル機能がついたようです。
各種フィルタもかけられるようなので、パラメータ次第によってはキレイに抜けやすいのかもね。
- [http://www.forest.impress.co.jp/article/2007/11/12/soundenginefree305.html:title=SoundEngine Freeの紹介記事]

** 追記3

強力なボーカル除去ソフトが出たようです。
- [http://www.oshiete-kun.net/archives/2008/03/post_77.html:title=強力な音楽ファイルボーカル除去「精密マイナスワンメーカー」]


まだ試していないですが、画面キャプチャを見る限りは周波数帯指定があるのが便利だと思った。
</body>
</day>
<day date="2007-08-06" title="">
<body>
*1186422349*[LLSpirit]LL魂に行ってきた。遅刻したけど。
LL魂、ばっちり遅刻してしまい、
オレ様言語の作りかたの最後のほうから参加。


事前段階で気になっていたのは、IoとLuaとCLOS。


Ioについては、ちょっと前興味があって調べていたんだけれども、
makeの途中でgccが落ちてしまい結局試せなかった経験がある。


Ioの面白いところは、
i386よりppcのほうが異様に早いと公式ページに載っていること。
あれ、なんでなんだろうね。


Luaについては、どんな説明がなされたのかちょっと気になっている。


CLOSについては、本題にちょこっと入ったところで
LTの時間が終わってしまって残念だった。
Tiny CLOSでも読むか…


んで、当日興味を持ったのは、PnutsとrhacoとTenjin。


Pnutsは作者の戸松さんが
「パフォーマンスに気をつけて設計している」と
何度も繰り返し述べられていたのが強く印象に残った。
中身を読んでみたい！と思ったよ。


職場でのWebサービスはPHP縛りがあるので、
rhacoの導入を検討してみたい。
もっとも、フレームワーク使っちゃいけない縛りってもあるのだが、
便利さが手間を上回っていたならば受け入れられるだろう。
CPANやPEARも基本的には疎まれてるけど、
便利なモジュールはやはり使っちゃうもんね。


Tenjinについては、パフォーマンスの早さと対象としている言語の多さが魅力。
PythonもRubyもPHPもあるもんな。
テンプレート継承ができて、キャッシュが効くっていうのはいいよねえ。
これも本格的に評価しよう。

** 追記

Rhacoの露木さんの語り口が個人的にツボだった。
特に「Hentai++」の部分で。
</body>
<comments>
<comment>
<username>everes</username>
<body>rhacoは実質的にはライブラリなので、ちょうどいいに違いない。hentai++</body>
<timestamp>1186495969</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>おお、レスがついていた！！！&lt;br&gt;Hentai++++!</body>
<timestamp>1186649166</timestamp>
</comment>
</comments>
</day>
<day date="2007-08-08" title="">
<body>
*1186561260*[技術メモ][Senna]Ohlohにプロジェクト登録をしてみた。
ドジっ娘のハッカーから、
Ohlohなるサイトを教えていただいた。
- [http://www.ohloh.net/:title]

早速Sennaも登録してみたが、
リポジトリのクロールの途中のようだ。
- [http://www.ohloh.net/projects/7293:title]

Sennaは、1.1リリースに向けて大きな変更を行っています。
そのため、Senna 1.0.8のリリースでヘマこいたりしたのですが…


興味のある方はリポジトリ上のソースを読まれると面白いと思います。
まだ仕様も確定していないし、ドキュメントもないですが。
</body>
<comments>
<comment>
<username>m</username>
<body>おわった! ”Very few source code comments” だって:D &lt;br&gt;着々と増えてますね. すごいです. 途中の崖は nfkc?</body>
<timestamp>1186616671</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>”Very few source code comments”は僕も笑いました。&lt;br&gt;そうですそうです＜nfkc。&lt;br&gt;自動生成でないコードの追加っぷりでしたら、&lt;br&gt;やはりここ数ヶ月が多いんじゃないかと思います。&lt;br&gt;各種言語バインディングもリポジトリに入ってくるので、&lt;br&gt;さらに肥大化！超えろhige os！（ムリ</body>
<timestamp>1186627320</timestamp>
</comment>
</comments>
</day>
<day date="2007-08-09" title="">
<body>
*1186655930*[雑談][ブラジル]もらいもの
出勤したら、机の上に見慣れないモノが。
某取締役の仕業だな。


使いでがないので、
ビールとかハムとかそういうギフトを希望。
</body>
</day>
<day date="2007-08-10" title="">
<body>
*1186730260*[Senna][Ludia][宣伝]Ludia 1.2.0リリースとPostgresForest Suite ハンズオンセミナの宣伝
Ludiaの1.2.0がリリースされたようです。ぱちぱち。

んで、Ludiaを含んでいるPostgresForest Suiteのセミナーをやるそうです。
- [http://d.hatena.ne.jp/ludia/20070810:title]
ぜひぜひ参加お願いいたします。

</body>
</day>
<day date="2007-08-16" title="">
<body>
*1187246177*[技術メモ]今流行の.emacs &amp; .vimrc
僕の周りで強引に流行らせている、
エディタで行末に存在するスペースを強調表示する設定。


この設定をすると、人が書いたコードの行末のスペースが大変気になってしまい、
その人に設定を押し付けて…といった伝染力を持ちます。取り扱い注意。


この設定の流行り始めた段階では、
Subversionの差分で「どこが変わったの？」と思うような差分が多く出現します。

.emacs
&gt;&gt;
(when (boundp 'show-trailing-whitespace) (setq-default show-trailing-whitespace t))
&lt;&lt;

.vimrc
&gt;&gt;
highlight WhitespaceEOL ctermbg=red guibg=red
match WhitespaceEOL /\s\+$/
&lt;&lt;

** 追記その1

Vimでtabを使っていると、２つめ以降のタブで強調表示されないようだ。
- [http://d.hatena.ne.jp/kasahi/20070902:title]


これでどうだろう。

新.vimrc
&gt;&gt;
set listchars=trail:\ ,tab:.\ 
hi SpecialKey ctermbg=red guibg=red
&lt;&lt;
listcharsには、tab/eol/extends/precedes/nbspも指定できる。
eol/extends/precedesのハイライトグループはNonText、
nbsp/tab/trailのハイライトグループはSpecialKey。


ただし、これだとtabまで目立ってしまう。う～ん。
** 追記その2 Vim最終版
autocmd WinEnterっつーのがあるのね。
これで末尾のスペースだけを目立たせることができるだろう。
&gt;&gt;
highlight WhitespaceEOL ctermbg=red guibg=red
match WhitespaceEOL /\s\+$/
autocmd WinEnter * match WhitespaceEOL /\s\+$/
&lt;&lt;

** 追記その3 emacsでのdevelock

ひろせさんがdevelock.elを紹介してくださっています。
- [http://d.hatena.ne.jp/hirose31/20070904/1188837366:title]

develockについては、以下のサイトも参考になるかと思います。
同ページ内には、プログラミングに便利な設定が他にも紹介してありますよ！
- [http://www.bookshelf.jp/soft/meadow_42.html#SEC634:title]
</body>
<comments>
<comment>
<username>kasahi</username>
<body>コメントありがとうございました。早速、ご参考にして、vimrcに追記させていただきました！autocmd WinEnterというのがあるのですね、勉強になります。</body>
<timestamp>1188831393</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>kasahiさんのおかげで、僕も勉強させていただきました！&lt;br&gt;有用だとかなりうれしいです。流行らせてください！！！</body>
<timestamp>1188833036</timestamp>
</comment>
<comment>
<username>naoya_nakazawa</username>
<body>さっそく設定したのですが、TAB と全角スペース版がありました。http://www.kakura.jp/pg/#highlight-tab-space-mode</body>
<timestamp>1190645925</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>おおおー。ご紹介ありがとうございます！！！</body>
<timestamp>1190665016</timestamp>
</comment>
</comments>
</day>
<day date="2007-08-24" title="">
<body>
*1187957730*[Senna]Senna 2.0がやってくる!
Sennaの公式ページに、Senna 2.0についての解説文書が登場しました。
- [http://qwik.jp/senna/senna2.html:title]


実は数日前から登場していたのですが、
随時加筆中でした。


そろそろ内容が固まってきたので、ここでも告知します。
とはいえ、まだまだ文法が変わったりする可能性は結構あったりしますよ…

*1187964523*[雑談]ファイナルファンタジー・クリスタルクロニクル リング・オブ・フェイト

僕がプログラマになる上で大きな影響を与えたと思う、
KAMIさんこと紙山満さんがディレクタ（！）を務めた
ファイナルファンタジー・クリスタルクロニクル リング・オブ・フェイトが発売されたらしいので、
みんな買うといいと思う。

[asin:B000BQUU30:detail]

♪遥かなるっ！おがすたっ！


あ、あとスクエニといえば、僕は赤尾実さんのファンです。と言っても誰もわかんないよね…
とりあえずSPC700をマンセーして、明日のDjango勉強会に備えるか。
</body>
<comments>
<comment>
<username>mir</username>
<body>わくわく</body>
<timestamp>1187961452</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>どきどき。</body>
<timestamp>1187964742</timestamp>
</comment>
</comments>
</day>
<day date="2007-08-26" title="">
<body>
*1188142918*[技術メモ][Senna][Django]Django勉強会 Disc 4での資料を公開します
Django勉強会 Disc 4で発表させていただいた資料を公開します。
今回は構成とかグダグダ＆Djangoの話が少なくてすみませんすみません…
-[http://tasuku.suenaga.name/pub/senna/django-ja-disc4-senna.pdf:title=DjangoでSenna 2.0!(PDF注意)]

Senna 2.0を用いたWikipedia検索はリポジトリに公開しています。
- [http://svn.razil.jp/django-wikipedia/branches/senna:title=Senna2.0でのWikipedia検索@Django]
Tritonn版はこちら
- [http://svn.razil.jp/django-wikipedia/trunk:title=TritonnでのWikipedia検索@Django]

公式の場でSenna 2.0について話すのは初めてだったのですが、
やはり説明のための構成を練らないといけないですね…
なぜSchemeを採用したか、というのは皆さん興味を持たれるようです。
</body>
</day>
<day date="2007-09-07" title="">
<body>
*1189148398*[PHP][Django]DjangoのテンプレートエンジンをPHPに移植してみた。
ブラジルのPHP仕事をひさびさにやることになった。
そこで思ったこと。テンプレートエンジンを使いたいよ…
しかも、Djangoみたいに継承ができるやつを。


というわけで、よさげなテンプレートエンジンを探してみようか、
と思ったんだけど、PHPテンプレートエンジン多すぎっす。調べる気失せるっす。
- [http://gigazine.net/index.php?/news/comments/20060803_php_template_engine/:title]


rhacoのテンプレートエンジンはDjango風らしいけど、
テンプレートエンジンだけ使う方法を調べるまで至らなかった…
- rhacoの公式サイト: [http://www.rhaco.org/:title]


じゃあ、自分で書いちゃう！？書いちゃう！？
…
書いちゃった！！
その名も&lt;del datetime=&quot;2007-09-10T14:52:38+09:00&quot;&gt;GunyaTemplate。ダサいので名前募集中です。&lt;/del&gt;
ブラジル社長によってmumuという名前が授けられました！
(EbiTemplateとかMaitakeTemplateという案も出ましたが、目を逸らしてスルーした)


最初はスクラッチで書いていたけど、
途中でDjangoの実装をモロパクりしだしました。

** 入手方法

以下のURLから入手できます。
- http://svn.razil.jp/mumu/trunk/mumu.php

** 使い方
PHPからは以下のように呼びます。
&gt;|php|
require_once('mumu.php');
$t = MuParser::parse_from_file('test.tpl');
echo $t-&gt;render(array('val1' =&gt; 'aaa', 'val2' =&gt; 'bbb'));
||&lt;
まず、MuParser::parse_from_file()にテンプレートファイル名を渡します
(MuParser::parse()にテンプレートの文字列そのものを渡してもOK）。
次に、その返り値のrenderメソッドを呼ぶと、渡したPHPの連想配列の内容を用いて置換されたテンプレート文字列が返ってきます。
あとは、それをechoするなりしてください。

テンプレートファイルの書き方などは、だいたい以下のドキュメントを参照してください。
ただし、いくつかのタグやフィルタはサポートしていません。
- michilu.com(最新): [http://michilu.com/django/doc-ja/templates/:title=テンプレート作者のための Django テンプレート言語ガイド]
- ymasuda.jp(michilu.comが落ちてたら): [http://ymasuda.jp/python/django/docs/templates.html:title=テンプレート作者のための Django テンプレート言語ガイド]

** サポートしているタグ/フィルタ/特殊変数

タグ
- {% include &quot;filename&quot; %} (変数名指定は対応してないです)
- {% extends &quot;filename&quot; %} (変数名指定は対応してないです)
- {% block blockname %} {% endblock %}
- {% for item in items %} {% endfor %} (reversed対応してないです)
- {% cycle val1,val2 %} (変数名指定して後で参照するのは対応してないです)
- {% if cond %} {% else %} {% endif %}
- {% debug %}
- {% now &quot;format&quot; %}
- {% filter filter1|filter2 %} {% endfilter %}
- {# comment #}

フィルタ
- addslashes
- length
- escape
- stringformat:&quot;format&quot;
- urlencode
- linebreaksbr

特殊変数
- forloop.counter     : 現在のループ回数番号 (1 から数えたもの)
- forloop.counter0    : 現在のループ回数番号 (0 から数えたもの)
- forloop.revcounter  : 末尾から数えたループ回数番号 (1 から数えたもの)
- forloop.revcounter0 : 末尾から数えたループ回数番号 (0 から数えたもの)
- forloop.first       : 最初のループであれば true になります
- forloop.last        : 最後のループであれば true になります
- forloop.parentloop  : 入れ子のループの場合、一つ上のループを表します
- block.super         : 親テンプレートのblockの中身を取り出す。内容を追加する場合に便利。

** 現行の問題点
include/extendsなどで相対パスのチェックとかそういうのをサボっているので危険です。
include/extendsなどで無限ループがあるとマズいです。
エラーが激烈不親切です。
エラーハンドリングをサボっているところがあります。
とかいろいろ問題あるよ。

** パッチやツッコミ募集中
デバッグろくにしてないので、
問題点あったらツッコミお願いします。
テストスイートも書いてません。


DjangoにあるけどGunyaTemplateで実装してないタグとかフィルタを実装したら、
ここのコメント欄とかいろんな手段で僕に連絡をくれると嬉しいです。


PHPでオブジェクト指向のプログラムを書くのが始めてなので、
おかしなことをしている可能性が大です。指摘ください。
オブジェクトを代入したら、オブジェクトの参照が代入されるのかオブジェクト全コピーになるのかとかよく分かってません。

</body>
<comments>
<comment>
<username>mir</username>
<body>た、たのしそうーー！</body>
<timestamp>1189153624</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>外部仕様が固まっているので結構ガリガリ書けました。&lt;br&gt;あとは、実際につかいつつ細かい部分を直していきたいですね。</body>
<timestamp>1189153674</timestamp>
</comment>
<comment>
<username>MiCHiLU</username>
<body>うわーい！</body>
<timestamp>1189173192</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>おお！喜んでくれる人がいるとは！！うれしい！&lt;br&gt;多重forループとかマズそうだと今気づいた…サーセンｗｗ</body>
<timestamp>1189184568</timestamp>
</comment>
</comments>
</day>
<day date="2007-09-18" title="">
<body>
*1190119456*[雑談][Senna]大阪の講演に呼ばれた。
「システム制御情報学会セミナー2007」というセミナーで、
「鮮度と精度を重視した全文検索エンジンSenna」
という題で講演することになりました。
- http://www.iscie.or.jp/seminar.html

この文章を書いているだけで手に汗をぶわっってかくほどの緊張ですよ。
有料ですが、お近くの方はどうぞ。
まだスライド資料は1枚も作っていないです…

*1190119457*[PHP][Django]冗談で作ったテンプレートエンジンだが
半分冗談で作った、Django風PHPテンプレートエンジンMuMu。


社内でユーザがついたので、ちょっと手を入れてキャッシュをつけてみた。
パースしたテンプレートをシリアライズして保存するだけだけどね。
テンプレートあてはめ後のキャッシュが欲しいところ。


ドキュメントも一応書いてみた。
- http://qwik.jp/mumu/


あとは、newformsを&lt;del datetime=&quot;2007-09-18T21:44:16+09:00&quot;&gt;パクって&lt;/del&gt;参考にしてフォームバリデーションを作るかね。
MTVのMV部分は作る気はさらさらないけど…


[追記]EthnaのrendererをMuMuにする方法が公開されていました。
- [http://d.hatena.ne.jp/riaf/20070918:title]
地味にはやらせていこう。
</body>
<comments>
<comment>
<username>たけし</username>
<body>ひやかそうかと思ったらたけぇ。</body>
<timestamp>1190127604</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>関東で無料のときに来なさい。</body>
<timestamp>1190133585</timestamp>
</comment>
<comment>
<username>nani</username>
<body>すごいじゃん</body>
<timestamp>1190361540</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>安さん、僕ガンバルよ！！！</body>
<timestamp>1190370827</timestamp>
</comment>
</comments>
</day>
<day date="2007-10-24" title="">
<body>
*1193202260*[Senna]システム制御情報学会セミナー2007の発表資料
システム制御情報学会セミナー2007にて、
「鮮度と精度を重視した全文検索エンジンSenna」という題で発表させていただきました。


発表の際にプロジェクターに映した資料について、
システム制御情報学会のご厚意により公開の許可を得られましたので、
公開させていただきます。
- http://qwik.jp/senna/publication.download/senna-iscie-blog01.pdf


SennaQLについての話をもうちょっとしたほうがよかったのかなぁ。。

*1193202261*[ブラジル]WEB+DB PRESS Vol.41に未来検索ブラジルの面々が登場
WEB+DB PRESS Vol.41の2ページから5ページあたりに載っているようです。


高林さんの記事が1ページ目にあるのですが、
それをめくると「Googleに勝ちたいからです！」なる文面が載っているという
素晴らしい編集がなされています！うひひ。
</body>
<comments>
<comment>
<username>mir</username>
<body>おぉ、拝見しました～。これは素晴らしい資料ですね。</body>
<timestamp>1193204093</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>レッスンレッスン。&lt;br&gt;http://salsaconsul.livedoor.biz/</body>
<timestamp>1193204263</timestamp>
</comment>
<comment>
<username>mir</username>
<body>ほ、本気みたいですね！！か、覚悟しておいてくださいよ～</body>
<timestamp>1193211018</timestamp>
</comment>
<comment>
<username>kdmsnr</username>
<body>インタビューにお付き合いいただき、ありがとうございました;-)</body>
<timestamp>1193313301</timestamp>
</comment>
<comment>
<username>co-saka</username>
<body>見ました！　⊂二二二（ ＾ω＾）二⊃　ブーン</body>
<timestamp>1193378606</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>&gt;kdmsnrさま&lt;br&gt;いえいえいえいえ！お越しくださりありがとうございました！&lt;br&gt;&lt;br&gt;&gt;co-sakaさま&lt;br&gt;⊂二二二二二二二二二二二二二二二二二（ ＾ω＾）二二二二二二二二二二⊃</body>
<timestamp>1193379518</timestamp>
</comment>
<comment>
<username>inao</username>
<body>ありがとうございました。次も楽しみですー。</body>
<timestamp>1193379939</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>&gt;inaoさま&lt;br&gt;こちらこそ、ありがとうございました&lt;br&gt;次もその次も永遠によろしくお願いしたい昨今です！</body>
<timestamp>1193380370</timestamp>
</comment>
<comment>
<username>studio15</username>
<body>見ましたよー。&lt;br&gt;みんなどんな椅子とＰＣで開発をやっているのか気になったので目を凝らしまくりでした。</body>
<timestamp>1193740796</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>&gt;studio15さま&lt;br&gt;おお！！僕はDellのSC430上のWindowsから同じくSC430上のDebianに繋いで開発しています。SC430に刺さるビデオカードを探すのがめんどいので、モニターはシングル。キーボードはreal forceです。&lt;br&gt;椅子は、オカムラの…名前忘れました。椅子の上で体育すわりをして開発してます。椅子のよさを生かしてませんね。</body>
<timestamp>1193857811</timestamp>
</comment>
<comment>
<username>sakaik</username>
<body>これは詳しい！みんなに紹介しちゃいます！　81枚、、、いったい何分持ち時間あったんですか？＾＾；</body>
<timestamp>1194329708</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>&gt;&gt;sakaikさん&lt;br&gt;持ち時間は１時間１０分ほどなので、まあ１枚１分くらいにはなっていると思います！&lt;br&gt;とはいいつつ、長いですよね。。</body>
<timestamp>1194606923</timestamp>
</comment>
</comments>
</day>
<day date="2007-10-25" title="hillbig hentai">
<body>
*1193302473*[Tokyo Cabinet]Tokyo CabinetのPythonバインディングを書いている人いますか？
いないんだったら書く。
書いたあとにカブっていることが分かると悲しいから。。

** 追記
お待たせしております。。手を挙げたのに作業遅くて申し訳ないです。
PHP版の完成とid:shnさまのコードに触発されて今超絶書き中です。。

↓ここで書き中。。たぶんハッシュDBはほとんどできた。次B-tree。
- [http://svn.razil.jp/pytc/trunk/:title=PyTCのリポジトリ]

** 追記2

B+treeにおいて、同一キーで複数の値を返す時の仕様について悩む。
IDLでは特に触れていない。
PHP bindingsでは、getallというメソッドを別途設けて、
それはtcbdbget4に接続されている。

Perl/Ruby bindingsを読んで参考にするか。。。

今はopenがクラスメソッドになっていますが、
tuneなどの対応のため、将来はopenはインスタンスメソッドとなる予定です。
その代わりに、newにpathとomodeを渡すと、インスタンス作成＆tcxdbopenをする予定です。
</body>
<comments>
<comment>
<username>jbking</username>
<body>SWIG?Pyrex?</body>
<timestamp>1193309514</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>淡々とCで書こうかと思ってます！&lt;br&gt;Pyrex面白そうですよね。</body>
<timestamp>1193310256</timestamp>
</comment>
<comment>
<username>Voluntas</username>
<body>期待:-)</body>
<timestamp>1193326703</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>うひひ。書き始めたらそれなりに大変だった。</body>
<timestamp>1193378107</timestamp>
</comment>
<comment>
<username>ishimoto</username>
<body>はじめまして&lt;br&gt;&lt;br&gt;Pyrex使いましょうよ。書き上げたと思ったら都合により用無しになってしまった&lt;br&gt;放置プロジェクト python-qdbmモジュール はPyrexで書いてます。同じ平林氏のDB&lt;br&gt;ですから、結構参考になったりするかも。&lt;br&gt;&lt;br&gt;http://svn.sourceforge.jp/cgi-bin/viewcvs.cgi/trunk/test/?root=qdbm-python</body>
<timestamp>1193829936</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>おおお。参考にします！&lt;br&gt;実用性やメンテナンス性より、趣味優先で書いていますよ！</body>
<timestamp>1193857543</timestamp>
</comment>
<comment>
<username>rsky</username>
<body>PHP5.2以降専用のPHPバインディング書いています。&lt;br&gt;ハッシュデータベースとB+木データベースはクラスにして、エンコード関連のユーティリティを関数として製作中。</body>
<timestamp>1193993576</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>&gt;rksyさま&lt;br&gt;どもども。いつもお名前を拝見しております！&lt;br&gt;今度ご飯でも！&lt;br&gt;&lt;br&gt;ユーティリティの名前空間をどこに置くかはちょっと悩みますよね。</body>
<timestamp>1193994787</timestamp>
</comment>
<comment>
<username>rsky</username>
<body>兵庫県民なんですが、東京に遊びに行った際にはぜひ！&lt;br&gt;&lt;br&gt;んで、PHP (5.3未満) には名前空間というものがないので悩むことなくCの関数名そのままでやっちゃいました。&lt;br&gt;Pythonだとファイルの配置で名前空間が決まりますから、悩むところですね。</body>
<timestamp>1194088951</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>&gt;rskyさま&lt;br&gt;akiさんも関西なんですよねー。こちらにいらっしゃる際はぜひぜひお声かけください！&lt;br&gt;&lt;br&gt;名前空間ですが、staticなメンバ関数だけを収容するUtil系のクラスをでっちあげて&lt;br&gt;関数名のかぶりを少なくしたほうがいいのかなあ、と悩んだりするのでした。</body>
<timestamp>1194104751</timestamp>
</comment>
<comment>
<username>rsky</username>
<body>PHP版できました！ http://d.hatena.ne.jp/rsky/20071110/1194639624&lt;br&gt;Utilクラスのアイデアをパクってます。;-)&lt;br&gt;&lt;br&gt;akiさんとは去年のオープンソース関西で初顔合わせをしました。もうあれから一年。</body>
<timestamp>1194640648</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>&gt;&gt;rskyさま&lt;br&gt;おおお！さすがです！&lt;br&gt;&lt;br&gt;Specification of Tokyo Cabinetのページに載っている順番に&lt;br&gt;何も考えずに実装していたのですが、その方針だと飽きてしまったので（笑&lt;br&gt;rskyさまのPHP bindingsとmikioさまのIDLを見つつ実用主義でいきたいと思います。</body>
<timestamp>1194706673</timestamp>
</comment>
<comment>
<username>shn</username>
<body>ども，お久しぶりです.アダチです．&lt;br&gt;&lt;br&gt;差し出がましいようですが，ちょっと入り用だったのでハッシュDBの方だけ書いてみました．&lt;br&gt;http://sklave.jp/200711150425/&lt;br&gt;淡々とCで書いてしまいました．&lt;br&gt;もしよろしければぐにゃらさんのコードとマージさせてください．</body>
<timestamp>1195069013</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>&gt;&gt;shnさま&lt;br&gt;お久しぶりです！！&lt;br&gt;&lt;br&gt;ヤバい、プレイがバレとる！（笑&lt;br&gt;マージします！！</body>
<timestamp>1195072482</timestamp>
</comment>
<comment>
<username>mikio</username>
<body>&gt; B+treeにおいて、同一キーで複数の値を返す時の仕様について悩む。&lt;br&gt;&gt; IDLでは特に触れていない。&lt;br&gt;&lt;br&gt;IDLでは「これはさすがにどの言語でもインプリするだろ」というメソッドのみを入れています。そうすることで、「IDLにほぼ準拠してます」と言いやすくして、モチベーションを上げるという狙いがあります。&lt;br&gt;PerlとRubyではgetlistとして実装してますけど、まあ別にそのレベルのブレは許容範囲と思ってます。順序つき集合のデータ構造を「リスト」と呼ばないで「ベクター」とか「イニュメレイション」とか呼ぶ言語もあるかもしれませんし。</body>
<timestamp>1195393995</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>&gt;&gt;mikioさま&lt;br&gt;Ruby bindingsを見て、getlistで実装しました。&lt;br&gt;その言語で使う場合に使いやすく、なおかつIDLになるべく準拠する方針でやるのがいいと思ってます。</body>
<timestamp>1195399894</timestamp>
</comment>
</comments>
</day>
<day date="2007-11-22" title="">
<body>
*1195719123*[Wikipedia]Wikipediaにアップされている画像を取ってくる方法
Wikipedia英語版であれば、
- ftp://www.wikigadugi.org/wiki/torrents/
にあるtorrentsファイルから画像一式を落としてくることができる。


でも、日本語版のtorrentsファイルは用意されていないんだな。


そういう時には、Wikix。こいつを使えば画像をごっそり持ってくることができる。
- http://meta.wikimedia.org/wiki/Wikix
ご利用は計画的に。
</body>
</day>
<day date="2007-11-23" title="生類　あやなみのレイ">
<body>
*1195850560*[Tokyo Cabinet][Python]pytc-0.1 - Tokyo Cabinet Python bindings公開

お待たせしました。Tokyo CabinetのPython bindingsを公開します。
sourceforgeで公開を予定していましたが、
pypiで公開することにします。
- http://pypi.python.org/pypi/pytc/

リポジトリはCodeReposにあります。
- http://svn.coderepos.org/share/lang/python/pytc/

** 使い方(適当)

HDB/BDBとも、永続化できるdictみたいな感じで使えます。

簡単な使い方(hash database)
&gt;|python|
import pytc

db = pytc.HDB('hdb.db', pytc.HDBOWRITER | pytc.HDBOCREAT)
db['niku'] = 'umai'
print db['niku']

db['ra-men'] = 'kuitai'
print db['ra-men']

for key in db:
  print 'key:', key, ' value:', db[key]
||&lt;

簡単な使い方(B+ tree database)
&gt;|python|
import pytc

db = pytc.BDB('bdb.db', pytc.BDBOWRITER | pytc.BDBOCREAT)
db['niku'] = 'umai'
print db['niku']

db['ra-men'] = 'kuitai'
print db['ra-men']

for key in db:
  print 'key:', key, ' value:', db[key]
||&lt;

複雑な使い方については、配布パッケージ内のtestsの中にあるテストスクリプトを参考にしてください。
「pydoc pytc」でメソッドを一覧できます。


現状では、Pythonのオブジェクトを保存したい場合には、
cPickle/pickleでのシリアライズ/デシリアライズは自前でやってね方針です。


今後の予定：
- iteritems()、iterkeys()、itervalues()をちゃんと実装。
- 定数をHDB/BDBの下に移すかもしれません。
- ドキュメントちゃんと書く

*1195884798* [Tokyo Cabinet][Python]pytcとそれ以外のkey-value型DBとのパフォーマンス比較
「傀儡師の館」にて、PythonからBerkeley DB、GDBM、QDBM、Tokyo Cabinet、CDBの４つを使った場合での
パフォーマンス比較がなされています。
Tokyo Cabinet、結構CDBに肉薄していていい感じですね。

- [http://plaza.rakuten.co.jp/kugutsushi/diary/200711220000/:title=Python のいろいろな方法でキーと値の保存と検索をやってみようかと(2)]

</body>
</day>
<day date="2007-11-24" title="ロックマン５のダイブマンステージで「あはん　いやん　そこはだめよ">
<body>
*1195915489*[gcc]gccでatomicな64bit setを実現したい
gccでatomicに64bitの値を代入したい。
一応、以下のようなコードで実現はできるんだけど。。

&gt;|c|
#include &lt;stdio.h&gt;
#include &lt;stdint.h&gt;

#define SEN_SET_64BIT(p,v) \
  __asm__ __volatile__ (&quot;1:\n&quot; \
                            &quot;\tmovl (%0), %%eax\n&quot; \
                            &quot;\tmovl 4(%0), %%edx\n&quot; \
                            &quot;\tlock; cmpxchg8b (%0)\n&quot; \
                            &quot;\tjnz 1b\n&quot; \
 : \
 : &quot;D&quot;(p), &quot;b&quot;(*(((uint32_t *)&amp;(v))+0)), &quot;c&quot;(*(((uint32_t *)&amp;(v))+1)) \
 : &quot;ax&quot;, &quot;dx&quot;, &quot;memory&quot;);

int
main (int argc, char *argv[]) {
  uint64_t a = 0x0123456789abcdefLL, b = 0;
  SEN_SET_64BIT(&amp;b, a);
  printf(&quot;%016llx\n&quot;, b);
}
||&lt;

同じマクロを、実際使いたいプログラムに組み込むと、
&gt;&gt;
error: can't find a register in class 'BREG' while reloading 'asm'
&lt;&lt;
とgccに怒られてしまう。


以下のブログエントリに書かれている、The atomic_ops projectでの問題と同じなのかな。
- [http://lucille.atso-net.jp/blog/?p=269:title=64-bit Lock-free queue implementation]


gccの__sync系関数を使いたいものの、gcc 4.1以降なんだよねえ。
悩む。

** 情報リンク集

- [http://my.execpc.com/~geezer/osd/gotchas/index.htm:title]
- [http://gcc.gnu.org/ml/gcc-help/2007-03/msg00420.html:title]

** [追記]できた。
gccがどーしてもebxを使いたいらしいから、esiを犠牲にすることに。

&gt;|c|
#include &lt;stdio.h&gt;
#include &lt;stdint.h&gt;

#define SEN_SET_64BIT(p,v) \
  __asm__ __volatile__ (&quot;\txchgl %%esi, %%ebx\n&quot; \
                            &quot;1:\n&quot; \
                            &quot;\tmovl (%0), %%eax\n&quot; \
                            &quot;\tmovl 4(%0), %%edx\n&quot; \
                            &quot;\tlock; cmpxchg8b (%0)\n&quot; \
                            &quot;\tjnz 1b\n&quot; \
                            &quot;\txchgl %%ebx, %%esi\n&quot; \
 : \
 : &quot;D&quot;(p), &quot;S&quot;(*(((uint32_t *)&amp;(v))+0)), &quot;c&quot;(*(((uint32_t *)&amp;(v))+1)) \
 : &quot;ax&quot;, &quot;dx&quot;, &quot;memory&quot;);

int
main (int argc, char *argv[]) {
  uint64_t a = 0x0123456789abcdefLL, b = 0;
  SEN_SET_64BIT(&amp;b, a);
  printf(&quot;%016llx\n&quot;, b);
}
||&lt;

こんなんでいいのか…でもこれでコンパイル通るようになった。謎だ。

</body>
</day>
<day date="2007-11-30" title="">
<body>
*1196442968*[偽プログラマ列伝]最近趣味のプログラミングが進まない言い訳をしてみる
プログラマとして経験を積むにつれて、
万に一つしか起こらないようなエラー処理・例外処理などを丁寧に書くようになり、
それが趣味のプログラミングにも影響を及ぼしてきて、
正常系の処理のロジックを書くスピードが遅くなり、
その遅さがイヤになって趣味のプログラミングをだんだんやめてしまう現象に
誰か名前をつけてください。

**[追記]
コメント欄でのツッコミの結果、
「黙って手を動かせ」という結論になりました。やるど！
</body>
<comments>
<comment>
<username>coji</username>
<body>あるある</body>
<timestamp>1196443988</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>ひろゆきくんのソースを見て、&lt;br&gt;イヤミとか全くなく、うらやましくてたまらないんです。。</body>
<timestamp>1196444718</timestamp>
</comment>
<comment>
<username>koizuka</username>
<body>tasukuchan現象</body>
<timestamp>1196445673</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>お、オレだけかい！！</body>
<timestamp>1196488276</timestamp>
</comment>
<comment>
<username>moudoku</username>
<body>受験上京時の宿泊ホテルにおける有料ビデオ課金寸止めザッピングシステムの受注依頼はこちらでよろしいのでしょうか？&lt;br&gt;self-complacentlyなプログラムしか書けない私にとっては、贅沢、いやオサレな悩みに思えるのですが、&lt;br&gt;フミヤートＴシャツあたりを着ると無駄な嫉妬心から、いささかやる気がでるかも知れませぬ。</body>
<timestamp>1196513986</timestamp>
</comment>
<comment>
<username>mikio</username>
<body>「老化」</body>
<timestamp>1196516320</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>&gt;moudokuさま&lt;br&gt;おお。この口調は！&lt;br&gt;今や、フミヤートTシャツではなく&lt;br&gt;ハットリ君の顔にパーマンと書いてあるTシャツに嫉妬心を覚えるお年頃で。&lt;br&gt;悩みはしていないんですが、自然とそうなっちゃっているのに違和感がありますね。&lt;br&gt;&lt;br&gt;&gt;mikioさま&lt;br&gt;う。ストレートに核心を。&lt;br&gt;mikioさんガンガン書いてるからなあ。&lt;br&gt;ちょっくら若返りの湯にでも入ってきますよ。</body>
<timestamp>1196520051</timestamp>
</comment>
<comment>
<username>to_take</username>
<body>あれは才能であり病理。</body>
<timestamp>1196719955</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>才能は欲しいが病気はイヤだ。&lt;br&gt;といいつつ、このエントリを書いたおかげで&lt;br&gt;ガンガン書けるようになって結構上機嫌なのさ。</body>
<timestamp>1196760955</timestamp>
</comment>
</comments>
</day>
<day date="2007-12-03" title="">
<body>
*1196699619*[Senna]第5回？密教文献情報処理研究会というのがあるそうです
密教文献(TEI文書として)と全文検索。
- [http://www.koyasan-u.net/131/etp:title]
&gt;&gt;
最近，SennaやHyperEstraierなど多くの新しい全文検索エンジンが登場しています。それらはMecabによる分かち書きやN-Gramなどをサポートする最新のシステムですが，はたして，送りがなや返り点の付く漢文や最近ようやく実用レベルになってきたユニコードチベット文字の処理には適しているのでしょうか？
&lt;&lt;
ほへー。ユニコードチベット文字は、合字についてはNFKCによる正規化ででなんとかなるかもしれない。


送り仮名と返り点はどんなクエリが与えられて、
どういう結果が返ってくるのが望ましいのだろうか。


対象領域の知識が少なくてショボーン。

*1196664104*[php][mumu]mumuのバナー
find.2ch.netにmumuのバナーが出ていた。
[f:id:tasukuchan:20071203153807g:image:right]
なんだこのコピーは…（笑）


mumuは、こないだパフォーマンスを計ったところちょっと芳しくなかったので、
php extensionとする予定です(pecl脳)。目指せblitz。
- [http://alexeyrybak.com/blitz/blitz_en.html:title]
</body>
</day>
<day date="2007-12-06" title="">
<body>
*1196913865*[Subversion]Subversion to Subversion migration
CodeReposやsourceforgeなどのSubversionレポジトリに
既存のSubversion管理のリポジトリを移したい。
でも、移転先のSubversionリポジトリの物理ファイルには触れない。
つまり、svnadmin dumpはできるけどsvnadmin loadはできない。


こんなときに各リビジョンの変更履歴とコメントだけを移したいんだけど
どうしたらいいのかな、
と思ったらちゃんと記事があった。
- [http://subtech.g.hatena.ne.jp/miyagawa/20071105/p1:title]


mumuを移転しようかと思ってます。

** [追記]
移転は大好評のようでした！
#codereposで凄惨なリンチを受けたことは口外しちゃダメって言われたよ！
</body>
</day>
<day date="2007-12-10" title="">
<body>
*1197297374*[宣伝][Senna][全文検索]WEB+DB PRESS Vol.42にSennaの記事が掲載されます。
WEB+DB PRESS Vol.42にSennaの記事を書きました。
- [http://gihyo.jp/magazine/wdpress/archive/2008/vol42:title]


今回の記事は、TritonnやLudiaのような他のDBMSを利用するのではなく、
SennaQLという独自のクエリ言語をPHP経由で利用する場合の
サンプルコードが載っています。


というわけで、発売までにSennaの新版をリリースしたいところ。。。
間に合うか！いや、間に合わないとマズいぞ。


岡野原さんによるSuccinctなデータ構造＆全文索引の基礎の記事もあるので、
全文検索マニア（？）の人は100冊くらい買うとよいと思います。


ニコ動の記事にもSennaの話がちらっと出ているという噂。
</body>
<comments>
<comment>
<username>mir</username>
<body>どきどき。。</body>
<timestamp>1197333942</timestamp>
</comment>
<comment>
<username>shinno</username>
<body>どもどもー。ニコ動で使わせてもらってますー。</body>
<timestamp>1197335934</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>&gt;mirさま&lt;br&gt;わくわく。。&lt;br&gt;&gt;shinnoさま&lt;br&gt;どもどもども。正規化とかちゃんとやっててすごいなあ。。&lt;br&gt;と常々思ってます。</body>
<timestamp>1197343554</timestamp>
</comment>
<comment>
<username>inao</username>
<body>ありがとうございます！&lt;br&gt;特集タイトルに「最新Senna対応」ってついてるです :-)</body>
<timestamp>1197384131</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>&gt;inaoさま&lt;br&gt;こちらこそ、ありがとうございます！&lt;br&gt;最新。。ドキドキ。り、りりーすしないと！</body>
<timestamp>1197431775</timestamp>
</comment>
<comment>
<username>mercysluck</username>
<body>買ったよ～。&lt;br&gt;SennaQL初めて試してみました。</body>
<timestamp>1198730422</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>&gt;mercyさま&lt;br&gt;どもども！&lt;br&gt;SennaQLまだまだ完成度が低くてドキドキ…</body>
<timestamp>1198734756</timestamp>
</comment>
</comments>
</day>
<day date="2007-12-12" title="">
<body>
*1197475864*[Python]Python Unconference 1でLTに参加してきた
Python Unconference 1というイベントで、
LTに参加してきました。


その際の発表資料をアップしておきます。
- [http://tasuku.suenaga.name/pub/pytc/Python-unconference01-cextension.pdf:title=PyTCで学ぶPython C拡張の書き方]


Pythonから既存のライブラリを呼びたい方はぜひ参考にしてみてください。
口を酸っぱくして言っておきますが、普通はPyrexを使いますからね…


**[追記]スライド中パフォーマンスについて
スライドで紹介したパフォーマンス測定は
「傀儡師の館.Python」から引用したものです。
- [http://plaza.rakuten.co.jp/kugutsushi/diary/200711220000/:title]


このパフォーマンスは、
おそらく各DBが設定できる各種パラメータを
カリカリにチューンして測定したものではありません。


特にHDBについては、最初にHashのbucketサイズを大きくしておくことによって
パフォーマンスが大きく伸びると考えられます。


各DBでパラメータチューンを行った上での実験データを
mikioさん本人が公開されています。
この資料を参考にしてくださーい！
- [http://tokyocabinet.sourceforge.net/benchmark.pdf:title=Tokyo Cabinet ベンチマークテストのレポート]


一応念のため追記。
こういうパフォーマンス比較資料は一人歩きしやすいので。
</body>
<comments>
<comment>
<username>elecsta</username>
<body>すげー面白かったです。&lt;br&gt;マクロ使いまくりソースに大変ワラいました。</body>
<timestamp>1197525545</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>マックロくろすけ出ておいでぇ～（裏声で&lt;br&gt;&lt;br&gt;でも、マクロゴリゴリ使うと意外と楽に書けるんですよこれが。&lt;br&gt;C bindingsを出力するPythonコードを書くっていうのも&lt;br&gt;いいかもしれません。&lt;br&gt;&lt;br&gt;まあ、それ何てPyrex！？と言われるに違いないのですが。</body>
<timestamp>1197530400</timestamp>
</comment>
<comment>
<username>jbking</username>
<body>Pyrexでメタプログラミングができるのが理想、、、</body>
<timestamp>1197601980</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>C/C++の柔軟性のなさはマクロやテンプレートなどの&lt;br&gt;メタプログラミングフレームワーク（と言っていいのかな…）&lt;br&gt;が必要になったわけですが、&lt;br&gt;ある程度自由度のあるPythonでメタプログラミング志向の&lt;br&gt;フレームワークを作るっていう情熱がすごいなあ、と&lt;br&gt;Pyrexを見て思いました。</body>
<timestamp>1197602398</timestamp>
</comment>
</comments>
</day>
<day date="2007-12-13" title="">
<body>
*1197532822*[ブラジル]サーバ26台
DELLのサーバ26台が届いた。全部メモリ8Gらしい。
- [http://blog.livedoor.jp/razil/archives/51331286.html:title]


そろそろサーバ台数が200台を超えるのかな？
やっと重い腰を上げてXenの勉強を始めてみるか。。。


id:Voluntas曰く「VMWareいいよVMWare」ということらしいのだが。


昔以下のようなエントリを書いたが、
- [http://d.hatena.ne.jp/tasukuchan/20061002/1159760511:title=]
時代は過ぎたもので、もうカテゴリ7のケーブルが出ているらしい。


というわけで、カテゴリ7のケーブルを買ってみることにした。
Amazonで買いたいところなんだけど、在庫がないことが多くて困る。
- &lt;a href=&quot;http://click.linksynergy.com/fs-bin/click?id=Wh2RI53e8DY&amp;offerid=138153.14685&amp;type=2&amp;subid=0&quot; &gt;カテゴリ7LANケーブル（ワインレッド・2m）&lt;/a&gt;&lt;IMG border=0 width=1 height=1 src=&quot;http://ad.linksynergy.com/fs-bin/show?id=Wh2RI53e8DY&amp;bids=138153.14685&amp;type=2&amp;subid=0&quot; &gt;
</body>
<comments>
<comment>
<username>mir</username>
<body>Xenお奨めですよ～。コンパイル速度もそれほど落ちないので案件ごととかにvm作ると楽です^^</body>
<timestamp>1197540017</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>おおー。nkjmさんの記事読んでがんばろっかなー。&lt;br&gt;http://www.atmarkit.co.jp/flinux/rensai/xen01/xen01a.html&lt;br&gt;&lt;br&gt;資料メモ：&lt;br&gt;http://itpro.nikkeibp.co.jp/article/COLUMN/20060621/241362/ &lt;br&gt;http://www.redhat.com/docs/manuals/enterprise/RHEL-5-manual/ja-JP/Virtualization/index.html</body>
<timestamp>1197540572</timestamp>
</comment>
<comment>
<username>yappo</username>
<body>nkjmさんの記事はいいっすお＾＾&lt;br&gt;続きがすごく楽しみ</body>
<timestamp>1197563804</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>実は、YappoさんがXenはじめたっていうのを見て&lt;br&gt;「おっしゃ僕もそろそろ」と思ったんです。&lt;br&gt;&lt;br&gt;早速セットアップ開始。</body>
<timestamp>1197602497</timestamp>
</comment>
<comment>
<username>かのう</username>
<body>200台もあるんですか～～～～。すご～～～。&lt;br&gt;管理にはHinemosをよろしくお願いします。m(_ _)m</body>
<timestamp>1197612491</timestamp>
</comment>
<comment>
<username>kzk</username>
<body>そんなにサーバー有ったんすね・・・&lt;br&gt;200台で動く分散Sennaにwktk！</body>
<timestamp>1197623305</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>かのうさま&gt;&lt;br&gt;古いサーバは何台か処分する予定です。&lt;br&gt;のたりのたりと管理しますよ！&lt;br&gt;&lt;br&gt;kzkさま&gt;&lt;br&gt;知らない間に増殖していました。。&lt;br&gt;&lt;br&gt;分散Senna、wkwkして待っていてください！&lt;br&gt;非分散バージョンもね…（今Schemeでテストを書き中</body>
<timestamp>1197623443</timestamp>
</comment>
</comments>
</day>
<day date="2007-12-20" title="">
<body>
*1198164602*[雑談]同好の士を発見！
今日の懇親会では、ファンKLabを結成することが出来て感無量。
是非細々と活動を続けていきましょう！＞会員のみなさん


土曜日も飲み会だ。
井戸のように深い胃袋だったらいいんだけど、
もうさすがに飲みすぎな予感。
ええ加減、休肝日を設けないと。。。


そして、Ｔシャツに悪い言霊の言葉を書いちゃった。
素敵なメンバーによる素敵な言葉の中で浮いてた。
後に残る記念品だし、冗談でも良くないね。反省中です…
*1198124767*[技術メモ][雑談]技術イベントだらけ。
天下一カウボーイ大会が意外と真面目そうなイベントになっている件。
- [http://onosendai.jp/championship2007/cowboychampionship.html:title]
もっとユルい感じだと思っていた。。。


という今日は、WEB+DB PRESS Tech Meetingに行ってきます。
こちらは事前に「堅そう」だと分かっているので安心。
- [http://gihyo.jp/event/2007/tech-meeting:title]


Soozyカンファレンスのネタも仕上げないと！
- [http://soozy.org/?SoozyConference4:title]


酒徳カンファレンスで
- [http://labs.unoh.net/2007/12/post_111.html:title]
「FlashのSocket通信を用いたmemcachedとの直接通信」とかを発表したいけど
45分話す内容を準備できそうにない。。LTだったら資料作りが楽でいいな。。
</body>
<comments>
<comment>
<username>perezvon</username>
<body>LT枠空いているので、是非お願いします</body>
<timestamp>1198147133</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>&gt;&gt;perezvon&lt;br&gt;早速申し込みました！</body>
<timestamp>1198163817</timestamp>
</comment>
</comments>
</day>
<day date="2007-12-21" title="">
<body>
*1198212893*[Senna][Tritonn][Ludia]TritonnとLudiaの記事を書きました。
Tritonn/Ludiaの導入と、実用上気をつけることを記事にまとめてみました。
- [http://gihyo.jp/dev/column/01/database/2007/122101:title]
なんか間違ったこと言ってたらごめんなさい…＞Tritonn/Ludiaの方々


そういえば、ブラジルへの会社訪問の記事がgihyo.jpにも上がっています。
- [http://gihyo.jp/dev/serial/01/company-visit/000401:title]
- [http://gihyo.jp/dev/serial/01/company-visit/000402:title]
- [http://gihyo.jp/dev/serial/01/company-visit/000403:title]
来年もブラジルをごひいきに宜しくお願いいたします＞関係各位

**[追記]Ludiaのところ間違ってた。。。
というわけで、訂正依頼を出します。。ううう。。。
</body>
</day>
<day date="2007-12-25" title="">
<body>
*1198574310*[雑談][技術メモ][Tokyo Cabinet]名は体を表す
Bepp Tokyoという名前を思いついた。名前を思いついただけで満足した。
誰か実装する人がいたら、受けはmemcachedプロトコルで宜しく。
</body>
</day>
<day date="2007-12-28" title="">
<body>
*1198831101*[ブラジル]守多保神社オープン
年末らしく、参拝は守多保神社でどうぞ。
- [http://game.moritapo.jp/jinja/:title=守多保神社]
</body>
</day>
<day date="2007-12-31" title="">
<body>
*1199105717*[Python][PHP][Mobile]PHPで高速に携帯ゲートウェイのIPから携帯キャリアを判別する

**[追記]id:hetimaに指摘された、32bitアーキテクチャでの問題を修正。大感謝。

携帯電話からのWebアクセスゲートウェイのIPアドレスから、
携帯キャリアを判別したい場合がある。


通常は、id:tokuhiromによる
Net::CIDR::MobileJP(WWW::MobileCarrierJP)を使うといいと思う。
- [http://dsas.blog.klab.org/archives/51117561.html:title]
- [http://d.hatena.ne.jp/tokuhirom/20071207/1196989588:title]
YAMLが出力されるので、さまざまな環境で利用ができるよ！


今回、PHPで携帯キャリアを判別したいと思ったんだけど、
PHPでYAMLを読んでその中身をすべて検査するなんてやだいやだい！
と沸き立つような強い衝動が。


というわけで、cidr-mobilejpというPythonスクリプトを書いた。
- 入手元: http://svn.coderepos.org/share/lang/python/cidr-mobilejp/trunk/scrape.py
各携帯キャリアのページからCIDR情報をスクレイピングして、
その情報を元に携帯キャリアを(たぶん高速に)判別するPHPスクリプトを出力します。


DoCoMoについてはメールゲートウェイなどの余計なIPアドレスが入っちゃってますが、
実害ないでしょう。


id:tomisimaが書いていたスクリプトを基に、
AirHPhone対応を施したりいろんな改造をしました。
- [http://d.hatena.ne.jp/tomisima/20070903/1188836400:title]
パフォーマンスは計って遅かったら泣くから計らない。
ip2longが遅い可能性が大いにあるんだよなー…

** 特徴1: CIDRでは別箇表示されるが、隣接したIPアドレス領域の扱い
CIDRではサブネットマスクでの範囲指定しかできないため、
ip2longやinet_atonが返す数値が隣接していても
ばらばらに記載しなければいけない場合があります。


cidr-mobilejpでは隣接したIPアドレス領域をまとめることによって
判別処理の高速化を図っています。

** 特徴2: 二分探索
PHPのip2long()を用いてIPアドレス文字列を数値化し、
二分探索で携帯キャリアを判別するようにしています。

** 出力されたスクリプト
こんなスクリプトが出力されます。
以下のURLに出力されたスクリプトを置いておきます。

- http://svn.coderepos.org/share/lang/python/cidr-mobilejp/trunk/ip2mobile.php

&gt;|php|
&lt;?php
/*
This script is generated by scrape.py at 2010-07-27 17:53:08.
http://svn.coderepos.org/share/lang/python/cidr-mobilejp/trunk/scrape.py
*/
function ip2mobile($ip) {
  $n = sprintf('%u', ip2long($ip));

  if ($n &lt; 1914044160) {
    if ($n &lt; 1868151808) {
      if ($n &lt; 1036427264) {
        if ($n &lt; 1036419072) {
          if ($n &lt; 1031078144) {
            if ($n &gt;= 998712960 &amp;&amp; $n &lt;= 998713087) {
              return 'ezweb';
            }
          } else if ($n &lt;= 1031078159) {
            return 'ezweb';
          } else {
            if ($n &gt;= 1031078432 &amp;&amp; $n &lt;= 1031078447) {
              return 'ezweb';
            }
          }
        } else if ($n &lt;= 1036421631) {
          return 'airhphone';
        } else {
          if ($n &lt; 1036421888) {
            if ($n &gt;= 1036421732 &amp;&amp; $n &lt;= 1036421735) {
              return 'airhphone';
            }
          } else if ($n &lt;= 1036421895) {
            return 'airhphone';
          } else {
            if ($n &lt; 1036422016) {
            } else if ($n &lt;= 1036422063) {
              return 'airhphone';
            } else {
              if ($n &gt;= 1036422144 &amp;&amp; $n &lt;= 1036423167) {
                return 'airhphone';
              }
            }
          }
        }
      } else if ($n &lt;= 1036429055) {
        return 'airhphone';
      } else {
        if ($n &lt; 1036803072) {
          if ($n &lt; 1036449792) {
            if ($n &gt;= 1036429312 &amp;&amp; $n &lt;= 1036431359) {
              return 'airhphone';
            }
          } else if ($n &lt;= 1036451839) {
            return 'airhphone';
          } else {
            if ($n &lt; 1036779520) {
            } else if ($n &lt;= 1036779775) {
              return 'airhphone';
            } else {
              if ($n &gt;= 1036780032 &amp;&amp; $n &lt;= 1036781439) {
                return 'airhphone';
              }
            }
          }
        } else if ($n &lt;= 1036804095) {
          return 'airhphone';
        } else {
          if ($n &lt; 1867943552) {
            if ($n &gt;= 1867943232 &amp;&amp; $n &lt;= 1867943487) {
              return 'ezweb';
            }
          } else if ($n &lt;= 1867943743) {
            return 'ezweb';
          } else {
            if ($n &lt; 1867943872) {
            } else if ($n &lt;= 1867943935) {
              return 'ezweb';
            } else {
              if ($n &gt;= 1867944704 &amp;&amp; $n &lt;= 1867944735) {
                return 'ezweb';
              }
            }
          }
        }
      }
    } else if ($n &lt;= 1868152831) {
      return 'docomo';
    } else {
      if ($n &lt; 1913928192) {
        if ($n &lt; 1913926656) {
          if ($n &lt; 1913925888) {
            if ($n &gt;= 1913925888 &amp;&amp; $n &lt;= 1913926143) {
              return 'airhphone';
            }
          } else if ($n &lt;= 1913926399) {
            return 'airhphone';
          } else {
            if ($n &lt; 1913926144) {
            } else if ($n &lt;= 1913926655) {
              return 'airhphone';
            } else {
              if ($n &gt;= 1913926400 &amp;&amp; $n &lt;= 1913926911) {
                return 'airhphone';
              }
            }
          }
        } else if ($n &lt;= 1913927423) {
          return 'airhphone';
        } else {
          if ($n &lt; 1913927424) {
            if ($n &gt;= 1913927168 &amp;&amp; $n &lt;= 1913927679) {
              return 'airhphone';
            }
          } else if ($n &lt;= 1913927935) {
            return 'airhphone';
          } else {
            if ($n &lt; 1913927680) {
            } else if ($n &lt;= 1913928191) {
              return 'airhphone';
            } else {
              if ($n &gt;= 1913927936 &amp;&amp; $n &lt;= 1913928447) {
                return 'airhphone';
              }
            }
          }
        }
      } else if ($n &lt;= 1913928703) {
        return 'airhphone';
      } else {
        if ($n &lt; 1913929472) {
          if ($n &lt; 1913928704) {
            if ($n &gt;= 1913928448 &amp;&amp; $n &lt;= 1913928959) {
              return 'airhphone';
            }
          } else if ($n &lt;= 1913929215) {
            return 'airhphone';
          } else {
            if ($n &lt; 1913928960) {
            } else if ($n &lt;= 1913929471) {
              return 'airhphone';
            } else {
              if ($n &gt;= 1913929216 &amp;&amp; $n &lt;= 1913929727) {
                return 'airhphone';
              }
            }
          }
        } else if ($n &lt;= 1913929983) {
          return 'airhphone';
        } else {
          if ($n &lt; 1913929984) {
            if ($n &gt;= 1913929728 &amp;&amp; $n &lt;= 1913930239) {
              return 'airhphone';
            }
          } else if ($n &lt;= 1913930495) {
            return 'airhphone';
          } else {
            if ($n &lt; 1913930240) {
            } else if ($n &lt;= 1913930751) {
              return 'airhphone';
            } else {
              if ($n &gt;= 1913930496 &amp;&amp; $n &lt;= 1913930751) {
                return 'airhphone';
              }
            }
          }
        }
      }
    }
  } else if ($n &lt;= 1914044191) {
    return 'airhphone';
  } else {
    if ($n &lt; 3414870784) {
      if ($n &lt; 2037376768) {
        if ($n &lt; 1990165664) {
          if ($n &lt; 1989727936) {
            if ($n &gt;= 1914044160 &amp;&amp; $n &lt;= 1914044191) {
              return 'airhphone';
            }
          } else if ($n &lt;= 1989727999) {
            return 'ezweb';
          } else {
            if ($n &gt;= 1990165248 &amp;&amp; $n &lt;= 1990165375) {
              return 'ezweb';
            }
          }
        } else if ($n &lt;= 1990165695) {
          return 'ezweb';
        } else {
          if ($n &lt; 1990165952) {
            if ($n &gt;= 1990165760 &amp;&amp; $n &lt;= 1990165887) {
              return 'ezweb';
            }
          } else if ($n &lt;= 1990166015) {
            return 'ezweb';
          } else {
            if ($n &lt; 2037375744) {
            } else if ($n &lt;= 2037375871) {
              return 'ezweb';
            } else {
              if ($n &gt;= 2037375904 &amp;&amp; $n &lt;= 2037375935) {
                return 'ezweb';
              }
            }
          }
        }
      } else if ($n &lt;= 2037376895) {
        return 'ezweb';
      } else {
        if ($n &lt; 2098989824) {
          if ($n &lt; 2070736352) {
            if ($n &gt;= 2070736128 &amp;&amp; $n &lt;= 2070736159) {
              return 'softbank';
            }
          } else if ($n &lt;= 2070736383) {
            return 'softbank';
          } else {
            if ($n &lt; 2089987584) {
            } else if ($n &lt;= 2089988095) {
              return 'docomo';
            } else {
              if ($n &gt;= 2098987008 &amp;&amp; $n &lt;= 2098989311) {
                return 'airhphone';
              }
            }
          }
        } else if ($n &lt;= 2098991615) {
          return 'airhphone';
        } else {
          if ($n &lt; 3405602816) {
            if ($n &gt;= 3404050432 &amp;&amp; $n &lt;= 3404051455) {
              return 'docomo';
            }
          } else if ($n &lt;= 3405602847) {
            return 'softbank';
          } else {
            if ($n &lt; 3405603040) {
            } else if ($n &lt;= 3405603071) {
              return 'softbank';
            } else {
              if ($n &gt;= 3414864896 &amp;&amp; $n &lt;= 3414865407) {
                return 'docomo';
              }
            }
          }
        }
      }
    } else if ($n &lt;= 3414871039) {
      return 'docomo';
    } else {
      if ($n &lt; 3548299392) {
        if ($n &lt; 3534288384) {
          if ($n &lt; 3532785600) {
            if ($n &gt;= 3532169472 &amp;&amp; $n &lt;= 3532169727) {
              return 'docomo';
            }
          } else if ($n &lt;= 3532785663) {
            return 'softbank';
          } else {
            if ($n &lt; 3533263872) {
            } else if ($n &lt;= 3533264127) {
              return 'docomo';
            } else {
              if ($n &gt;= 3533264384 &amp;&amp; $n &lt;= 3533264895) {
                return 'docomo';
              }
            }
          }
        } else if ($n &lt;= 3534288895) {
          return 'airhphone';
        } else {
          if ($n &lt; 3534684544) {
            if ($n &gt;= 3534314496 &amp;&amp; $n &lt;= 3534316543) {
              return 'airhphone';
            }
          } else if ($n &lt;= 3534684671) {
            return 'softbank';
          } else {
            if ($n &lt; 3538321632) {
            } else if ($n &lt;= 3538321647) {
              return 'ezweb';
            } else {
              if ($n &gt;= 3541231616 &amp;&amp; $n &lt;= 3541233663) {
                return 'airhphone';
              }
            }
          }
        }
      } else if ($n &lt;= 3548299519) {
        return 'airhphone';
      } else {
        if ($n &lt; 3682439424) {
          if ($n &lt; 3681328384) {
            if ($n &gt;= 3681288704 &amp;&amp; $n &lt;= 3681292287) {
              return 'airhphone';
            }
          } else if ($n &lt;= 3681328511) {
            return 'ezweb';
          } else {
            if ($n &lt; 3681328640) {
            } else if ($n &lt;= 3681328671) {
              return 'ezweb';
            } else {
              if ($n &gt;= 3681328680 &amp;&amp; $n &lt;= 3681328687) {
                return 'ezweb';
              }
            }
          }
        } else if ($n &lt;= 3682439551) {
          return 'ezweb';
        } else {
          if ($n &lt; 3682440192) {
            if ($n &gt;= 3682439680 &amp;&amp; $n &lt;= 3682439695) {
              return 'ezweb';
            }
          } else if ($n &lt;= 3682440319) {
            return 'ezweb';
          } else {
            if ($n &lt; 3715563520) {
            } else if ($n &lt;= 3715566079) {
              return 'airhphone';
            } else {
              if ($n &gt;= 3724885632 &amp;&amp; $n &lt;= 3724886015) {
                return 'ezweb';
              }
            }
          }
        }
      }
    }
  }
  return 'pc';
}
?&gt;
||&lt;

** まとめ
PerlとかPythonとかPHPが入り混じってよくわかんね（笑）と思われると予想しますが、
出力されたPHPのソースはコピペで使えます。
是非ご利用くださーい。

*1199105718*[Python]PyTC 0.3リリース
MacPortsの人はeasy_installでの直インストールを試してみるといいよ。

</body>
<comments>
<comment>
<username>hetima</username>
<body>http://jp.php.net/manual/ja/function.ip2long.php&lt;br&gt;（32bitアーキテクチャでは）ip2long()の返り値は「多くの IP アドレスは負の整数値にな」る模様で、unsignedに変換しないと正常に比較できませんでした。&lt;br&gt;$n = sprintf(’%u’, ip2long($ip));&lt;br&gt;などとすれば正しい結果を得られるようになりました。</body>
<timestamp>1199762580</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>&gt;hetimaさま&lt;br&gt;ありがとうございます！！&lt;br&gt;おおおー。そうだそうだ。zval的にそうなりそうですね。&lt;br&gt;64bitアーキテクチャ常用なので気づきませんでした！&lt;br&gt;修正します！</body>
<timestamp>1199764824</timestamp>
</comment>
</comments>
</day>
<day date="2008-01-08" title="パコス メイド シンプル">
<body>
*hiroyuki_yokoyama_takashi*[ブラジル]弊社取締役の髪型が変です。

[f:id:tasukuchan:20080107213527j:image]
横山たかしに劇似ｗｗ
- [http://www.shochikugeino.co.jp/profile/data/profile_72.html:title=横山たかし(左)]

*php_senna_keywordlink*[senna]Sennaではてなキーワード自動リンクを実装する 

** [注意]このエントリは[http://labs.unoh.net/2008/01/keyword-autolink-using-php-and-mecab.html:title=PHPとMecabでキーワード自動リンクを実装する]のパクリです。

こんにちは、末永です。
今年もどうぞよろしくお願い致します。

Webサービスを開発していると、特定のキーワードを自動でURLリンクにする処理が必要になることがあると思います。今回は、このキーワード自動リンク機能を全文検索エンジンSennaを使って実装する方法を紹介したいと思います。

** 1. Sennaインストール
MeCabのインストールは必要ないので、こんな感じでインストールしてください。
&gt;|sh|
$ ./configure --prefix=/usr --without-mecab
$ make
$ sudo make install
||&lt;

** 2. 辞書を作る
テキストファイルに、改行区切りでキーワードを記述したファイルkeyword.txtを作成します。
ただし、文字コードはEUC限定ですぞ。
Wikipediaのタイトル一覧なんかを持ってくるのもいいでしょう。
gzipされたUTF-8なので、解凍＆nkfでコンバートしましょう。
- http://download.wikimedia.org/jawiki/20071121/jawiki-20071121-all-titles-in-ns0.gz


Sennaをコンパイルしたディレクトリに移動して、
以下のコマンドを打ちます。
&gt;|sh|
$ test/hatenapo keyword.dic ins &lt; keyword.txt
||&lt;

** 3. キーワードリンクを確認
キーワードを付与する対象のarticle.txtというファイルを用意します。
2.と同じディレクトリで以下のように実行します。

&gt;|sh|
$ test/hatenapo keyword.dic sel &lt; article.txt
||&lt;

はてなキーワードがリンクされて出てきます！

** 問題点1: PHPじゃない…

SennaのPHPバインディングをid:rskyが作っているのですが、
sen_symへのインターフェースがない…


sen_symへのインターフェースがあればPHPから使えて、元記事の完パクリが出来たんだけどなあ。

** 問題点2: 文字コードがEUCのみ

hatenapo.cのsen_enc_euc_jpをsen_enc_utf8なんかに全て置換すればOK。

** まとめ
パクリきれなかった。非常に残念…

</body>
<comments>
<comment>
<username>to_take</username>
<body>微妙に上気してるところがはたきたくなるよね。</body>
<timestamp>1199832760</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>酒を飲んでない段階でこの顔だからねー。</body>
<timestamp>1199853663</timestamp>
</comment>
<comment>
<username>yirxs</username>
<body>すごいいわれよう。。</body>
<timestamp>1199873574</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>真実だからしょうがない。。</body>
<timestamp>1199991271</timestamp>
</comment>
</comments>
</day>
<day date="2008-01-09" title="">
<body>
*read_fountainhead*[雑談]年末ゆったり
今年の年末は実家に帰ってゆっくりしていたのですが、
その間にいろんなコードが書けて自分でもちょっとびっくりした。


そして、ひさびさに小説を１冊読みきることができた。
[asin:4828411321:detail]
僕はセコハン人間のほうだなあと思った。
未来検索ブラジルはロークのような人も働ける会社ですので、
応募待ってるよっ！


今年もいろんな小品をここでリリースしようと思っています。
皆様、宜しくお願いいたします。

*web_kokusanryoku*[ブラジル]「ウェブ国産力 日の丸ITが世界を制す」って本が出るらしい
[asin:4756150950:detail]
第一章で弊社が取り上げられてるらしい。わーぱちぱち。
&gt;&gt;
第一章　未来検索ブラジルはグーグルの夢を「見ない」
ダジャレな名前の、まじめな会社
&lt;&lt;
そうそう！真面目な会社なんですよ！意外とね…
というわけで、1000冊くらい買うといいよ！
</body>
</day>
<day date="2008-01-17" title="">
<body>
*libevent_senna_suggest*[libevent][senna]Google Suggestのようなものを高速に実現するサーバsuggested
Google Suggestのようなものを高速に実現するサーバsuggestedというものを書いてみた。
が、しばらく放置していた。とりあえず公開してみる。

** 特徴

- epollやkqueueを使っていてネットワーク部分が速い
- Sennaを使っていてSuggest部分が速い
- Sennaを使って正規化している。「トン」とか「ミリバール」(組み文字)とか「Ｗｉｋｉ」(全角)とかでも検索可能

** 置き場
CodeResosに置いてあります。
- http://svn.coderepos.org/share/lang/c/suggested/trunk

一応、2008/01/17バージョンの全ソースコードを貼っておこう。
&gt;|c|
#include &lt;sys/types.h&gt;
#include &lt;sys/time.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;err.h&gt;

#include &lt;sys/queue.h&gt;
#ifndef TAILQ_FOREACH
#define TAILQ_FOREACH(var, head, field) \
  for ((var) = ((head)-&gt;tqh_first); \
    (var); \
    (var) = ((var)-&gt;field.tqe_next))
#endif /* LIST_FOREACH */
#include &lt;event.h&gt;
#include &lt;evhttp.h&gt;

#include &lt;senna/senna.h&gt;
/* copy from senna/str.h */
typedef struct {
  const char *orig;
  size_t orig_blen;
  char *norm;
  size_t norm_blen;
  uint_least8_t *ctypes;
  int16_t *checks;
  size_t length;
  int flags;
  sen_ctx *ctx;
  /* sen_encoding encoding; */
} sen_nstr;
sen_nstr *sen_nstr_open(const char *str, size_t str_len,
                        sen_encoding encoding, int flags);

#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

#define PORT 8000 /* port number listened */

sen_sym *tags;
char gbuf[SEN_SYM_MAX_KEY_SIZE];

static char *
chomp(char *string)
{
  int l = strlen(string);
  if (l) {
    char *p = string + l - 1;
    if (*p == '\n') { *p = '\0'; }
  }
  return string;
}

static int
do_insert(const char *filename)
{
  if (!(tags = sen_sym_create(filename, 0, 0, sen_enc_utf8))) {
    fprintf(stderr, &quot;sym create failed\n&quot;);
    return -1;
  }
  while (!feof(stdin)) {
    char *cstr;
    sen_nstr *s;
    if (!fgets(gbuf, SEN_SYM_MAX_KEY_SIZE, stdin)) { break; }
    cstr = chomp(gbuf);
    s = sen_nstr_open(cstr, strlen(cstr), sen_enc_utf8, 0);
    sen_sym_get(tags, s-&gt;norm);
  }
  return 0;
}

void
generic_handler(struct evhttp_request *req, void *arg)
{
  const char *s;
  sen_nstr *prefix;
  struct evbuffer *buf;
  if (!(buf = evbuffer_new())) {
    err(1, &quot;failed to create response buffer&quot;);
  }
  evhttp_add_header(req-&gt;output_headers, &quot;Content-Type&quot;,
                    &quot;text/plain; charset=UTF-8&quot;);
  /* get parameter */
  s = evhttp_decode_uri(evhttp_request_uri(req)) + 1;
  prefix = sen_nstr_open(s, strlen(s), sen_enc_utf8, 0);
  if (!prefix-&gt;norm_blen) {
    goto exit;
  }
  /* return tags */
  {
    sen_set *s;
    sen_id *tid;
    sen_set_cursor *c;
    if (!(s = sen_sym_prefix_search(tags, prefix-&gt;norm))) {
      /* no entry found */
      goto exit;
    }
    if (!(c = sen_set_cursor_open(s))) {
      err(1, &quot;failed to sen_set_cursor_open&quot;);
    }
    {
      unsigned int nent;
      sen_set_info(s, NULL, NULL, &amp;nent);
      evbuffer_add_printf(buf, &quot;%u\n&quot;, nent);
    }
    while (sen_set_cursor_next(c, (void **)&amp;tid, NULL)) {
      int tag_len = sen_sym_key(tags, *tid,
                                gbuf, SEN_SYM_MAX_KEY_SIZE);
      evbuffer_add(buf, gbuf, tag_len - 1);
      evbuffer_add(buf, &quot;\n&quot;, 1);
    }
    sen_set_cursor_close(c);
    sen_set_close(s);
  }
  evhttp_send_reply(req, HTTP_OK, &quot;OK&quot;, buf);
  return;
exit:
  evbuffer_add(buf, &quot;0\n&quot;, 2);
  evhttp_send_reply(req, HTTP_OK, &quot;OK&quot;, buf);
}

int
main(int argc, char **argv)
{
  struct evhttp *httpd;

  if (argc &lt; 2) {
    puts(&quot;usage: suggested tag-dic&quot;);
    return 1;
  }

  sen_init();
  if (!(tags = sen_sym_open(argv[1]))) {
    fprintf(stderr, &quot;create dictionary...\n&quot;);
    do_insert(argv[1]);
    fprintf(stderr, &quot;dictionary created !!\n&quot;);
  }
  event_init();
  if (httpd = evhttp_start(&quot;0.0.0.0&quot;, PORT)) {
    evhttp_set_gencb(httpd, generic_handler, NULL);

    event_dispatch();

    evhttp_free(httpd);
  } else {
    fprintf(stderr, &quot;cannot bind port %d&quot;, PORT);
  }
  sen_sym_close(tags);

  sen_fin();
  return 0;
}
||&lt;

** ビルド
Sennaとlibeventが必要です。インストールしておきましょう。

&gt;|sh|
make
||&lt;
でsuggestedというものができます。

** 使い方

UTF-8で、Suggest対象にしたい文字列が改行区切りで入っているファイルwordlistを準備します。
以下のようにして初回起動を行います。
&gt;|sh|
./suggested dictonary &lt; wordlist
||&lt;

一回辞書を作成すれば、二度目以降は辞書名のみを指定して起動できます。
&gt;|sh|
./suggested dictonary
||&lt;

suggestedは、ポート8000をLISTENしています。
以下のようなURLにアクセスすると、
&gt;&gt;
http://サーバのIPアドレス(ホスト名):8000/文字列
&lt;&lt;
パスに指定された文字列をキーに、
単語リストからの前方一致検索を行った結果を返します。
１行目は総件数、それ以外は結果の単語です。
パスに指定する文字列は、UTF-8でエンコードしてください。


ためしに、Wikipediaの単語一覧を辞書としたサーバを立ててみました。
遊んでみてください。
- [http://210.135.99.72:8000/wiki:title=テストサーバで遊ぶ]
落ちていても気にするな。

** ToDo
- encodingをutf-8以外にも対応
- forkくらいする
- JavaScriptによるクライアント側のコードを書く
- コマンドラインでポート番号くらい指定できるようにする
- 付加情報の保持
- 付加情報によるソート

** まとめ
CodeReposに置いてあるのでどんどん手を入れてください！！

</body>
<comments>
<comment>
<username>アモニックパスカル</username>
<body>はじめまして。アモニック　パスカルと申します。&lt;br&gt;Ｃ＋＋又はＪＡＶＡも出来ますか？</body>
<timestamp>1200850853</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>&gt;&gt;アモニックパスカルさん&lt;br&gt;どもー！はじめまして。&lt;br&gt;C++だったらいけると思います。&lt;br&gt;JavaだとJNI使うのかな…</body>
<timestamp>1200889329</timestamp>
</comment>
</comments>
</day>
<day date="2008-01-22" title="">
<body>
*senna_1_1_0*[Senna]Senna 1.1.0リリース
Senna 1.1.0をリリースしました！(GREEで)
落ちるバグとか治っているので是非入れ替えを…

*1201003872*[PHP]PHP Extensionを書く勉強会に参加中

PHP Extension勉強会に参加しました。
さすが肉好きのPHPer、
懇親会のロウリーズ・ザ・プライムリブではみんな大食いしていました（嘘

** 参考

- [http://gihyo.jp/dev/serial/01/php-module:title]
- [http://d.hatena.ne.jp/tasukuchan/20070228/pear_codegen_senna:title]

** php_printfについて

php_printfは長さを引数で指定できます。よって、
&gt;|php|
php_printf(&quot;Hello &quot;);
PHPWRITE(str, str_len);
php_printf(&quot;!&quot; PHP_EOL);
||&lt;
は
&gt;|php|
php_printf(&quot;Hello %.*s !&quot; PHP_EOL, str_len, str);
||&lt;
とスッキリ書けますぞ、たぶん。

</body>
</day>
<day date="2008-01-27" title="">
<body>
*flash_javascript_perl*[Flash][JavaScript][Perl]グニャラは大変なFlashを描いていきました

今週末は2つの勉強会に参加・発表させていただきました！
ステキな発表の場を設けていただいてありがとうございます！！


両方ともActionScript/Flashについて（？）の発表です。
それぞれ発表資料を公開させていただきます。


** Flash + JavaScriptでmemcachedと直接通信 @ さかとくカンファレンス
ActionScript3上で、Socketを用いてmemcachedとの通信を行うモジュールを書きました。
さらに、そのモジュールをJavaScriptから呼べるようにしました。


get/setしかサポートしてないですし、
全体的に設計とコーディングが小汚いです。
ちょっと恥ずかしいけど、
CodeReposにアップしているので適当に直してもらえると嬉しいです…


プログラム本体・発表資料は以下に置いております。
- [http://svn.coderepos.org/share/lang/actionscript/memcached-client/trunk:title=CodeReposのレポジトリパス]
- [http://tasuku.suenaga.name/pub/presentation/as3_memcached/as3-memcached.pdf:title=発表資料(PDFです)]

** Perlへの愛憎 @ Soozy Conference 4
Soozy Conference 4では以下の資料を発表させていただきました。
ブログでは生のFlashファイルで動画を見ることができます。
(たまに表示できないようです。表示されない場合はしばらく待ってリロードください）
&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftasuku.suenaga.name%2Fpub%2Fpresentation%2Fperl_dis%2Fsoozy-20080127last.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=480&amp;amp;h=360&amp;amp;title=Soozy+Conference+4&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;


ニコニコ動画にもアップしました。
- [http://www.nicovideo.jp/watch/sm2164173:title=グニャラは大変なPerlをDISっていきました(ニコニコ動画)]
</body>
</day>
<day date="2008-02-04" title="">
<body>
*1202112965*[Senna]最もタメになる「初心者用言語」はSennaQL！

地味に反響のないSenna 1.1.0ですが、
SennaQLという新しい問い合わせ言語が搭載されています。


我々の調査の結果、
なんとSennaQLは以下のページで挙げられている
Schemeの特徴を全て満たしていることが判明しましたっ！！！
- [http://d.hatena.ne.jp/hayamiz/20080204/1202108447:title=最もタメになる「初心者用言語」はScheme!]
&gt;&gt;
Schemeで豊かな表現力を身につける
参照透明できれいな心をそだてる
括弧はこわくない＞＜
Schemeは上を目指せる！
&lt;&lt;
これはみんなSennaQLを学ばないといけないですね！！

** SennaQLのおためし方法
Senna 1.1.0以降をインストールしたあとに、
&gt;&gt;
% senna filename.db
&lt;&lt;
と実行すれば、対話的環境でSennaQLを試すことができます。


SennaQLで簡単な計算をやってみましょう。
&gt;|scheme|
&gt; (+ 1 1)
2
&gt; (define a 3)
a
&gt; (define b (+ a 1))
b
&gt; (define (abs x)
&gt;   (if (&lt; x 0)
&gt;       (- x)
&gt;       x))
abs
&gt; (abs -100)
100
||&lt;
ほら、簡単でしょう？（by ボブ）

** SennaQLでリモートのサーバに計算させてみよう
&gt;&gt;
% senna -s filename.db
&lt;&lt;
と実行すればSennaサーバを立てることができます。
デフォルトではport 10041をlistenします。

&gt;&gt;
% senna -c senna.example.com
&lt;&lt;
と実行すれば、senna.example.comのSennaサーバに接続することができます。


ネットワーク時代にも対応したSennaQL！（当たり前か）

** 初心者にやさしいSennaQL！
SennaQLはプレースホルダ機能を実装しています。
よって、文字列のエスケープなどをする必要がありません。
安全安心初心者にやさしいねっ！！！

&gt;|scheme|
&gt; (display ?)
&gt; oreore
oreore#t
&gt; (display ?)
&gt; &quot;test&quot;
&quot;test&quot;#t
||&lt;

** jsonも出力できるSennaQL！
jsonってWeb 2.0っぽいよね！！
SennaQLではJSON出力ができます。


以下のようなsxmlっぽい式を与えると、
それをjsonで出力してくれます。
ブラボー！！！(味っ子)

&gt;|scheme|
&gt; (disp
&gt;   '(:html
&gt;      (:head (:title &quot;sxml&quot;))
&gt;      (:body
&gt;        (@ (:bgcolor &quot;blue&quot;)
&gt;           (:text    &quot;white&quot;))
&gt;        (:center (:b &quot;Hello.&quot;))))
&gt;   :json)
[&quot;html&quot;, [&quot;head&quot;, [&quot;title&quot;, &quot;sxml&quot;]], [&quot;body&quot;, {[&quot;bgcolor&quot;, &quot;blue&quot;]: [&quot;text&quot;, &quot;white&quot;]}, [&quot;center&quot;, [&quot;b&quot;, &quot;Hello.&quot;]]]]
#t
||&lt;
** SennaQLで全文検索をしてみよう
[http://qwik.jp/senna/store_tutorial.html:title=詳しくはこちらのページを…]


上記ページを試してみる前に１点注意。
sennaコマンドを実行するときに、
作成するSenna内データベースのエンコーディングを指定する必要があります。
例えば、エンコーディングutf8でSenna内データベースを初期化するには、
&gt;&gt;
% senna -e utf8 /tmp/bookmark.db
&lt;&lt;
とする必要があります。


エンコーディングが違うと検索結果がおかしくなる可能性が充分にあるのでご注意を！

** SennaQLは今後どうなるの？

Sennaは、バージョン1.1.0系で以下の作業を行う予定です。
- 次期バージョンでのAPIを固める
- SennaQLを使ったサービスをブラジル内で開発するのに併せて
-- 全文検索エンジンに対するクエリ言語として必要な機能を実装する
-- 安定性を上げる。バグ直す。
-- パフォーマンスを測定し、SennaQLが足を引っ張っていないか調べる
- SennaQLを直接書かなくても全文検索ができるAPIの開発


SennaQLはSchemeとしては機能は足りないので、
是非是非パッチ希望です。

</body>
</day>
<day date="2008-02-15" title="">
<body>
*ruby_mysql_fastcgi_lost_connection*[Ruby][FastCGI]FastCGIでRubyのスクリプトを動かしたとき、Lost connection to MySQL server during queryと怒られる件について
Rubyを最近書いていなくて忘れそうだったので、次の仕事はRubyを使って書くことにしてみました。
lighttpdを使ったことがなかったので、次の仕事はlighttpdを使うことにしてみました。
という非常にいい加減な理由でlighttpd + Ruby on FastCGIでWebアプリケーションを書き始めてみたのさ。Railsは使ってないけど。


アプリケーションを書き始めたときは、
[http://fauna.rubyforge.org/svn/memcached/trunk/:title=libmemcachedのRuby binding]や
[http://www.kuwata-lab.com/erubis/:title=Erubis]と[http://cgiext.rubyforge.org/:title=CGIExt]の採用を決めて喜んでいたりと、
とても平和な毎日を送っていたのでした。
（kuwata-labラブ、でも[http://www.kuwata-lab.com/tenjin/:title=Tenjin]は使ってないけどさ…


** 破滅
しかし、サクサクとアプリケーションを書き進めてリビジョン25くらいに達したとき、
今まで快調に動いていたWebアプリが突然例外を吐き始めたのだ！！！


例外の内容は、
&gt;&gt;
Lost connection to MySQL server during query
&lt;&lt;
うおおお。


FastCGIのプロセスの最初でMySQLのセッションを作成して、
それをプロセスが生きている間ずっと使いまわしていたのなら、
何かの拍子でconnectionが切れたのだと判断できよう。


でも、毎回コネクションを張るようにしてたんだよね…
しかも、FastCGIではなくCGIなら例外を吐かないんだよね…
おかしいなあ。

** Google先生に尋ねる
こんな時はGoogle先生だねっ！！！
- [http://blog.s21g.com/articles/214:title=Railsを使っていて「Lost connection to MySQL server during query」に遭遇したら]
- [http://idm.s9.xrea.com/ratio/2006/04/08/000406.html:title=Lost connection to MySQL server during query]
ふーむ、なんかみんな困ってそうだけど原因不明な雰囲気。


** 原因調査/再現コード
腹をくくって小１時間ほど調査したところ、原因を発見。
単なるtypoだった…
Lost connectionってエラー文字列に惑わされていた。
でも、これなかなか気づかないよ。
というわけで、誰かの役に立つかもしれないのでエントリを書いてみた。


以下再現コード。
ポイントは、存在しないインスタンス変数を特攻む（ブッコむ）ところ。
&gt;|ruby|
require 'fcgi'
require 'mysql'

class OreSql
  def initialize
    @dbh = Mysql.new('localhost', 'gunyarakun', 'perldaisuki', 'dbsoft')
  end

  def query(*params)
    st = @dbh.prepare('SELECT ?')
    st.execute(*params)
  end
end

FCGI.each {|fcgi|
  fcgi.out.print &quot;Content-Type: text/plain\r\n\r\n&quot;
  begin
    ore = OreSql.new
    ore.query(@aaa) # 存在しないインスタンス変数を特攻む（ブッコむ）
    fcgi.out.print 'OK ssu'
  rescue Exception =&gt; e
    fcgi.out.print e.message
  end
  fcgi.finish
}
||&lt;

ちなみに、FCGI.eachに渡したブロックの中身をFCGI以外の環境で評価すると、
&gt;&gt;
warning: instance variable @aaa not initialized
&lt;&lt;
ってwarningは出るけど'OK ssu'までたどり着く。


ちょっと追いかけが足りないけど、とりあえず問題が解決したからよかったよかった。

** まとめ
&lt;span style=&quot;font-weight:bold;&quot;&gt;結論：Lost Connectionと言われた場合でも単なるタイポとかの場合があるから、自分のコードをチェックするといいよ！&lt;/span&gt;


原因を追究したのはRails環境ではないので、
Rails環境(やActiveRecord)では実際何が起こっているかはわからんです。
もしかしたら、似たような原因なのかもしれない。違うと思うけど…

</body>
<comments>
<comment>
<username>soundkitchen</username>
<body>特攻む（ブッコむ）に懐かしさを感じますw</body>
<timestamp>1203104472</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>&gt;&gt;soundkitchenさま&lt;br&gt;朝っぱらからｗｗ</body>
<timestamp>1203104600</timestamp>
</comment>
</comments>
</day>
<day date="2008-02-29" title="">
<body>
*1204270348*[ruby][tidy]Debianのlibtidy-ruby1.8がすぐ落ちてくれる件について
scrAPIにも使われているlibtidy-rubyですが、
DebianのtestingだとSEGVで落ちてくれるようです。

原因はコレ↓
- http://rubyforge.org/tracker/index.php?func=detail&amp;aid=10007&amp;group_id=435&amp;atid=1744
</body>
</day>
<day date="2008-03-19" title="Tamarinたまらん">
<body>
*1205920675*[MySQL][Tritonn][Senna]MySQL + Sennaで実現する全文検索とMySQL Enterprise Monitor 日本語版プレビュー
住商情報システム主催で、MySQL+Sennaの紹介を含んだセミナーが開催されるそうです。
- [http://www.scs.co.jp/event/2008/0326_mysql/index.html:title=MySQL + Sennaで実現する全文検索とMySQL Enterprise Monitor 日本語版プレビュー]


興味のある方は是非是非ご参加くださーい。
*1205920676*[PostgreSQL][Ludia][Senna]Ludia 1.5.0ワクテカ

PostgreSQL 8.3対応のLudia 1.5.0が今月中に出る(ことを目標にしている)ようです。
- [http://d.hatena.ne.jp/ludia/20080311:title=Ludia 1.5.0]

ドキドキ。
</body>
</day>
<day date="2008-03-27" title="">
<body>
*1206635350*[Senna][Ludia]Ludiaパフォーマンス・チューニング・セミナをやるらしい
Ludiaパフォーマンス・チューニング・セミナというセミナをやるそうです。
- http://lists.sourceforge.jp/mailman/archives/ludia-users/2008-March/000205.html
- http://d.hatena.ne.jp/ludia/20080326

さて、演習問題サンプルを解けるでしょうか！？
</body>
</day>
<day date="2008-05-25" title="">
<body>
*1211732953*[nicopedia]ニコニコ大百科リリース
[http://dic.nicovideo.jp:title=ニコニコ大百科]という、ニコニコ動画版Wikipediaとも説明すべきサイトをリリースしました。
[http://www.nicovideo.jp/watch/sm3398283:movie]

5/25 25:25:25公開という設定になっております。
社会人になってから、初めての外部向けWebサイト構築がこれだよ！


ミドルウェア開発が本業（？）なので、
ミドルウェアばっかりに凝ってしまいました…あはは…


- lighttpd
- ruby(ほとんどのロジック、Pythonにしとけばよかった… FastCGI経由)
- MySQL(DBサーバ)
- Senna(自動キーワードリンク)
- repcached(セッション保持用memcached、EeePCでLVS frontと一緒に動いている)
- Tritonn(検索)
- libeventのevhttp(API用Webサーバ)
- Varnish(API用WebサーバのHTTPアクセラレータ)


他にも、各ページの閲覧数ランキングのために、Tokyo Tyrantを投入予定です。
</body>
<comments>
<comment>
<username>Eclipse01</username>
<body>新装開店おめでとうございます。&lt;br&gt;また、私のブログへのコメント、および障害修正ありがとうございました。&lt;br&gt;これからも、暇を見つけては少しずつ記事を書いていきますので、よろしくお願いします。</body>
<timestamp>1211749685</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>&gt;&gt;Eclipse01&lt;br&gt;どもども！記事期待してますよー！&lt;br&gt;僕もマイページ的なものを早く実装しないと…</body>
<timestamp>1211778447</timestamp>
</comment>
</comments>
</day>
<day date="2008-05-28" title="">
<body>
*1211969190*[Senna]ツッコめ！全文検索エンジンSennaの新しいAPIについての素案。
みんな、[http://lists.sourceforge.jp/mailman/archives/senna-dev/2008-May/000883.html:title=［Senna-dev 884］]のメールは読んだかな！？
[http://qwik.jp/senna/DBAPI.html:title=全文検索エンジンSennaの新しいAPIについての素案]がついに公開されました。


今までのAPIのほとんどを刷新するという
大改造！劇的ビフォーアフター的API群です（APIの匠）。


んで、この新しいAPI群で何ができるようになるのでしょうか。
簡単に言うと、
「Sennaは、データベースになります！」


といいつつも、全文検索機能を充実させるために、
データベース的機能を強化した、という感じになっておりますぞ。

** データベース機能

新しいSennaでは、複数のテーブルというものを持つことができます。
テーブルは、複数のレコードを持つことができます。
レコードは、複数のカラムを持つことができます。
カラムは、ある型のデータを保持します。
一般的なRDBMSの２次元表をまずはイメージしてください。

*** ポイント1. レコードごとにカラムが追加できる

Sennaの新しいAPI群では、レコード毎にカラムを追加することができます。
というわけで、二次元表ではなく、穴あきの二次元表をイメージするとよいでしょうか。

もちろん、あるカラムでの絞込みやソート、グループ化などの操作も行うことができます。

*** ポイント2. 外部参照が高速

いわゆる外部参照が高速に行える実装となっております。
具体的にいうと、カラムに保持する型として、他のテーブルそのものを指定することができます。
このように指定されたカラムは、他のテーブルへの参照を保持します。

*** ポイント3. 強力なフック

テーブル・カラムを参照もしくは更新するタイミングで、
任意の関数を呼び出すことができます。
トリガーのようなものです。
この関数で、値をフィルタしたり、値を横取りしたり、
そもそもイベントそのものを握りつぶしたりすることができます。


以上の３つのポイントが大きな特徴となっております。


それ以外にも、テーブルのタイプが3つあったり、
テーブルを物理ファイルにマップするか、メモリ上だけに作るか選べたり…
などいろいろ特徴がありますが、
大雑把に説明するとこんな感じです。

** 全文検索インデックスの拡張

今までのSennaでは、
主にsen_indexという型についての操作を行うことによって、
全文検索インデックスへの操作を行っていました。


sen_indexは、内部的には以下の3つの構造から成り立っています。
- 文書ID表
- 語彙表
- 転置インデックス


文書ID表は、Senna内部での文書ID番号と、外部での文書IDとの対応付けをするための表です。
外部での文書IDの実例として、
TritonnであればMyISAMのレコード位置、
Ludiaであればtuple idが挙げられます。


語彙表とは、文書内に登場する単語がすべて登録され、それぞれに語彙ID番号が対応付けされている表です。
N-gramを語彙とするのであれば、1または2文字の文字列が語彙表に登録され、
MeCabで切り分けられた形態素を語彙とするのであれば、形態素が語彙表に登録されます。


転置インデックスとは、
語彙ID番号ごとに検索データを保持するデータ構造です。
ある語彙を含む文書について、Senna内部での文書ID番号の列を語彙ごとに保存しています。
(本当はもうちょっと情報を保持しているのですが、説明の簡単化のため省略)


この３つの構造を用いることによって、全文検索を行うことができます。
具体的には、
「検索キーワード」→
「検索キーワードの語彙ID番号」→
「Senna内部での文書ID番号の列」→
「外部での文書ID番号の列」
のように順番に表を引くことにより、検索結果の文書ID群を得ることができるわけです。


Sennaの新APIでは、ID表と語彙表について、Sennaデータベースのテーブルを用いることができます。
転置インデックスのみ、inv index columnという特殊なカラムが用意されています。


ID表と語彙表が一般的なテーブルとなったということは、
それぞれのレコードに好きなカラムを追加できるということです。


ID表にカラムを追加することにより、こんなことが出来るようになるでしょう。
- 日付カラムを追加して、その日付での高速な絞込み・ソート・グループ化
- 無効化フラグを追加して、検索結果から即時に除外をする
…つまり、
- 文書ごとに複数の属性値が保存できる
- 属性値で絞込み・ソート・グループ化ができたり、フックを用いてさまざまな操作を行ったりできる。
の２つの併せ技で出来ることが増えるというわけなのです。


語彙表にカラムを追加することによって、こんなことが出来るようになるでしょう。
- query式を用いた場合でもTF-IDFによるスコア計算を可能に
- 検索ストップワードなどの実現
- ある語彙に関してのスコアだけを上下する操作
- 文書登録日別の語彙の総出現数をカラムに追加して、バズワードの検出
…つまり、
- 語彙ごとに複数の属性値が保存できる
- 属性値で絞込み・ソート・グループ化ができたり、フックを用いてさまざまな操作を行ったりできる。
の２つの併せ技で出来ることが増えるというわけなのです。


夢が広がりまくりんぐですねー。


** 悩み深きAPI設計…
弊社SennaチームはAPIの設計に悩んでいるのです。
大体、こんなことで悩んでおります。
- パフォーマンスが発揮できるように…
- 実用的なように…
- いろんな言語でバインディングを書きやすいように…
- API仕様が安定するように…


というわけで、
- このAPIじゃこういうアプリケーションが書きにくい
- このAPIじゃこういう言語だとバインディングが書きにくい
- そもそもこういう機能が欲しい
などというツッコミを大募集しております。
senna-devメーリングリストやブログなどで、
是非是非ツッコみまくってください！！！
高速で実用的で柔軟で安定した検索エンジンを目指してるんじゃい！！


というわけで、お待ちしぃ～てぇ～いまぁ～すぅ～ ﾁｬﾘﾗﾘﾗﾘﾗﾘﾗﾝ（by 日本直販
</body>
</day>
<day date="2008-06-02" title="">
<body>
*1212416261*[Ruby][MySQL]x86_64環境でRubyからMySQLのクエリを実行するときの問題が示す根本的な問題…
ニコニコ大百科というサービスをリリースしたわけですが、
開発言語を選定する際に
「最近書いてなくて忘れかけてるし、部下も書けるし、
　たまにはRubyで書いてみようじゃないか。」
とテキトーに決めたことをちょっと後悔。


特にRubyの[http://www.ruby-lang.org/ja/man/html/base64.html:title=base64]に関しては
+ マニュアルの使用方法の項目にはencode64などの関数を直に使う方法が書いてあるが、生で使うと怒られる(encode64 is deprecated; use Base64.encode64 instead)。
+ Base64.encode64()を使うと、今度は途中とお尻に勝手に改行が入る。マニュアルには書いていない挙動（るびまには書いてあるが）。Base64.encode64().split.joinなどをして改行を除去する必要がある。
+ さらに、urlsafeなエンコードをしようとすると、Base64.encode64().split.join.tr('+/', '-_')とする必要がある。
と正直ちょっとイラっとした。
Pythonだとurlsafe_b64encode()という関数がある。これはこれでやりすぎ感はあるけど、実用的。
その他にもCGIモジュール周りも結構手を入れたりして、
足周りを確保する作業を多く行いました。


Ruby、ロジックは非常に書きやすい言語なんだけどなー。
クラスの拡張なども非常にキレイかつ書きやすく出来てしまうので、
手元で問題を修正して満足しちゃって、
本家までパッチが上がらないのかもしれない。
ツッコミビリティの問題かなあ。


んで、そんなのはどうでもいいんだけど、
先日、サービスをちょっと高級なサーバにお引越ししたのです。
その際に、以下の擬似コードが動かなくてかなりあせった。

&gt;|ruby|
require 'mysql'
require 'pp'
my = Mysql.connect(host, name, pass, db, port)
st = my.prepare('SELECT ?')
st.execute(0xffffffff)
pp st.fetch
||&lt;

原因は、サーバのOSがi386版からx86_64版に変わったから。


x86_64版Rubyでは、0xffffffffはFixNumになります(irbで0xffffffff.classを見てみよう)。
基本、sizeof(long)*8-1ビットに収まる符号付数値の場合はFixNumになるみたいですね。
MySQL/Rubyのst_execute関数内で、渡されたパラメータの型によって分岐する部分があります。
FixNumなので、case T_FIXNUMのところにコードが遷移するわけです。
んで、そこでFIX2INTを呼んでいるんですねー。
sizeof(int)は4なので、符号を入れると1ビット足りない。
よって、integer 4294967295 too big to convert to `int' と怒られてしまうのだ。


この問題、ip2longした数値をカラムに入れるときに発覚しました。
パッチを書きたいところですが、
他のサービス修正で手が回らない…どこかにパッチ落ちてないかなあ。
FIX2INTをFIX2LONGにすればいいのかな…


んで、バグは直せば済むのでよいのです！
このようなすぐに見つかってもよさそうなバグが
MySQLとの接続モジュールに残っているということで、
「本当にみんなサーバサイドでRubyを使っているんだろうか」
とちょっと不安になったりしたのでした…
x86_64版のOSは今や珍しくなくなってきましたし…

** 追記

パッチ書いたお。
BigNumで64ビットフルに使っている場合に、is_unsignedを立てるとかいう処理はしていないけどね。
tmtmさんにもメールしよ→お返事きた。対応いただけるみたい。ヤッター！

&gt;|diff|
--- mysql.c.in.orig     2008-06-03 14:28:44.000000000 +0900
+++ mysql.c.in  2008-06-03 14:31:16.000000000 +0900
@@ -1367,14 +1367,21 @@
     if (argc &gt; 0) {
         memset(s-&gt;param.bind, 0, sizeof(*(s-&gt;param.bind))*argc);
         for (i = 0; i &lt; argc; i++) {
+            long num;
             switch (TYPE(argv[i])) {
             case T_NIL:
                 s-&gt;param.bind[i].buffer_type = MYSQL_TYPE_NULL;
                 break;
             case T_FIXNUM:
-                s-&gt;param.bind[i].buffer_type = MYSQL_TYPE_LONG;
                 s-&gt;param.bind[i].buffer = &amp;(s-&gt;param.buffer[i]);
-                *(int*)(s-&gt;param.bind[i].buffer) = FIX2INT(argv[i]);
+                num = FIX2LONG(argv[i]);
+                if (num &lt;= INT_MAX &amp;&amp; num &gt;= INT_MIN) {
+                    s-&gt;param.bind[i].buffer_type = MYSQL_TYPE_LONG;
+                    *(int*)(s-&gt;param.bind[i].buffer) = (int)num;
+                } else {
+                    s-&gt;param.bind[i].buffer_type = MYSQL_TYPE_LONGLONG;
+                    *(LONG_LONG*)(s-&gt;param.bind[i].buffer) = num;
+                }
                 break;
             case T_BIGNUM:
                 s-&gt;param.bind[i].buffer_type = MYSQL_TYPE_LONGLONG;
||&lt;

</body>
<comments>
<comment>
<username>yirxs</username>
<body>あのとき再現しないと思ったら、プレースホルダだったのね。。おつおつ。。</body>
<timestamp>1212431855</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>そそ。当面はアプリ側でしのごうと思っている。</body>
<timestamp>1212460804</timestamp>
</comment>
</comments>
</day>
<day date="2008-07-06" title="たまには備忘録らしく">
<body>
*1215344211* [xml][libxml2][c]XMLをHTTPで取得して、XPathで指定された中身をC言語で取り出す方法
タイトル通り。必要に迫られて…
libxml2はAPIの数がオニのようにあります。泣きそうです。

** 注意：ルートノードが１つの文書しか対応していません。

根性不足で、URLからxmlDocPtrを得られるAPIを見つけられなかったため、
xmlTextReaderPtrで最初のノードを読み、
xmlTextReaderExpandで強引に子ノードを取ってこさせています。


大変ダサいので、libxml2ウィザードの方の降臨を願う。

&gt;|sh|
gcc -o test -I/usr/include/libxml2 test.c -lxml2
||&lt;

&gt;|c|
#include &lt;stdio.h&gt;
#include &lt;libxml/xpath.h&gt;
#include &lt;libxml/xmlreader.h&gt;

#define URL &quot;http://www.nicovideo.jp/api/getthumbinfo/sm9&quot;
#define XPATH &quot;/nicovideo_thumb_response[@status='ok']/thumb/title/text()&quot;

int
main(int argc, char *argv[])
{
  int ret;
  xmlDocPtr doc;
  xmlNodeSetPtr nodes;
  xmlXPathContextPtr ctx;
  xmlTextReaderPtr reader;
  xmlXPathObjectPtr xpobj;

  if ((reader = xmlNewTextReaderFilename(URL))) {
    // FIXME: now only one root node is supported
    ret = xmlTextReaderRead(reader);
    xmlTextReaderExpand(reader);
    if ((doc = xmlTextReaderCurrentDoc(reader))) {
      if ((ctx = xmlXPathNewContext(doc))) {
        if ((xpobj = xmlXPathEvalExpression(
                       (xmlChar *)XPATH, ctx))) {
          if (!xmlXPathNodeSetIsEmpty(xpobj-&gt;nodesetval)) {
            xmlNodePtr node = xmlXPathNodeSetItem(xpobj-&gt;nodesetval, 0);
            if (node-&gt;content) {
              printf(&quot;%s\n&quot;, node-&gt;content);
            }
          }
          xmlXPathFreeObject(xpobj);
        }
        xmlXPathFreeContext(ctx);
      }
      xmlFreeDoc(doc);
    }
    xmlFreeTextReader(reader);
  }
  xmlCleanupParser();

  return 0;
}
||&lt;

</body>
</day>
<day date="2008-07-15" title="幹部の真壁です（ニュー・ファラオ）">
<body>
*1216069836*[flex][偽プログラマ列伝]Flexでキーボードイベントを取得するのに詰まる
Flex 3でコントロールのfocus関係なしにキーボードの入力を取得するには、
http://livedocs.adobe.com/flex/3_jp/html/help.html?content=events_11.html
http://www.adobe.com/cfusion/communityengine/index.cfm?event=showdetails&amp;productId=2&amp;postId=304
の２つの方法があります。


前者は、applicationに対してaddEventListenerする方法。
後者は、stageに対してaddEventListenerする方法。
stageはcreationComplete時にはセットされておらず、
applicationComplete時には取得できるので注意。


…といいつつ、以下のようなコードでイベントが取れなくて
２時間くらい悩んだ。
&gt;|javascript|
...
  application.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);
...
private function keyDownHandler(evt:KeyboardEvent):void {
  Alert.show('' + evt.keyCode);
}
||&lt;
原因は、keyDownHandlerってものが普通にUIComponentにもあって、
そっちを参照しに行っていたから。
ギギギギギギギ

</body>
</day>
<day date="2008-07-20" title="やっぱ葛原さんだよねぇ">
<body>
*1216540942*[Senna][全文検索]検索エンジンの歴史的意義と未来
弊社森（オラの上司）が大阪市立大学で発表をしてきました。
発表資料は以下からどぞー。
- [http://qwik.jp/senna/publication.download/future-search.pdf:title=検索エンジンの歴史的意義と未来]


発表の前半は、コミュニケーション技術の歴史を踏まえ、
多対1のコミュニケーション技術として検索エンジンを捉える試みです。
発表の後半は、コミュニケーション技術としての検索エンジンが
現在どのような課題を抱えているか、
本来検索エンジンとはどうあるべきか、について語られています。


発表者の森と、
「検索エンジンは情報を減らすための技術だから面白い」と
盛り上がって話した記憶があります。
(ちばてつやの看板がある渋谷の中華料理店で)
大変面白い資料ですので、是非一読をオススメいたします。

*1216540943*[lighttpd]lighttpdでモジュールを書く際に気をつけること
lighttpdのモジュールを書くことを覚えてしまったせいで、
ついついlighttpdのモジュールで仕事を進めてしまうクセがつきました。
「なんでもおもっど」状態です。


全パスに対するアクセス数をTokyoCabinetに記録したり、
特定のパスに対してはmemcachedから値を取得したり、
Sennaで特定のキーワードにリンクを付与したり、
まあ、やりたい放題です。パフォーマンスも出てます。
ああ毛が立っちゃう。


lighttpdのbufferやarrayを使えば、
メモリリークなどに悩まされることはほぼありません。
意外と安定して開発・稼動できたので正直ビックリしています。
まあ、cookieをパースしたりする便利関数がないので、
そこらへんは根性で書く必要はあります。
どうにかしてくれよ（そろそろ飽きてきた）。


lighttpdのモジュールの欠点は、
ビルドシステムがちゃんとしていないという点です。
- [http://trac.lighttpd.net/trac/wiki/HowToWriteALighttpdPlugin:title=lighttpdプラグインの書き方(英語)]
上のサイトを見ると、/srcにモジュールのソースコードを入れて
Makefile.amを書き換えろ、みたいなことが書いてあると思いますが、
あれだけ入れるんじゃねえよお、という話ですね。


lighttpd本体とlighttpdモジュールを切り離して開発する場合には、
以下の点に気をつけようぜ。
- lighttpdのソースディレクトリの/と/srcをincludeしないといけません。
- lighttpdはconfigureしておく必要があります。
- 通常lighttpdはoff_tが64bitという前提でconfigureされます。
  モジュールのoff_tも64bitにしておかないと、
  情報をやりとりする構造体イメージと変数マッピングがズレて泣きます。


あと、lighttpdのtracサイトは常時重めなので、
ローカルに保存して参照するとよいです。

*1216540944*[Senna][nicopedia]SennaのTracが公開されております。
そういえば（安定剤）、lighttpのTracサイトで思い出しましたが、
SennaのTracが稼動し始めました。


まだ情報が少ないですが、Ticketを切って開発を進めていこうと思っています。
宜しくお願いいたします。
- [http://dev.razil.jp/senna/:title=SennaのTrac]


ちなみに、
以前から公開しているニコニコ大百科のTracですが、
まったくToDoが減る気配がありません。（・３・）ｱﾙｪｰ
- [http://dev.razil.jp/nicopedia/:title=ニコニコ大百科のTrac]
</body>
</day>
<day date="2008-09-01" title="">
<body>
*1220277772*[ニコニコ大百科]ピコカキコ機能リリース。
ニコニコ大百科でMMLでメロディを書き込める「ピコカキコ」機能をリリースしました。
JASRACと音楽著作物利用許諾についての契約を結んでいるので、
JASRAC管理楽曲についても投稿可能です。


はてなのMML記法(メロディ再生記法)と互換性があるので、
今までに投稿したMMLについても再投稿どうぞー！
(FlMMLを使っているから当たり前ではあるんですが…)


JASRACとの契約締結にあたって、
[http://mml.g.hatena.ne.jp/bbs/5:title=はてなMML部でJASRACに利用許諾申請してみたいのですが]
の議論が大変参考となりました。ありがとうございました！！


というわけで、頑張ってねー！。わくわく。
http://d.hatena.ne.jp/satoru_net/20080901/1220253796


ちなみに、ピコカキコと同じバイナリは
Google codeとCodeReposとlibsparkを回ればビルドできます。
</body>
<comments>
<comment>
<username>tekisuke</username>
<body>はじめまして！&lt;br&gt;ライブラリとしてはあんまり充実していないFlMMLなんですけど、こんなところでも使っていただけて嬉しい限りです。&lt;br&gt;ありがとうございます～。</body>
<timestamp>1220371433</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>ピコ心を満たしてくれるライブラリありがとうございますー！&lt;br&gt;ガンガン使い倒していきまーす。&lt;br&gt;mid2flmmlという、いいかげんウェアも作ってみました。</body>
<timestamp>1220440087</timestamp>
</comment>
</comments>
</day>
<day date="2008-09-03" title="">
<body>
*mid2flmml*[flmml][hatena][nicopedia]MIDIファイルをはてなのメロディ記法やピコカキコに変換する(mid2flmml)
ニコニコ大百科でMMLで音楽を投稿できるサービスを始めたはいいが、
MMLって難しいですよねー。
というわけで、MIDIからMMLへの変換をするソフトを作ってみた。


mid2mmlというソフトウェアがあるが、やはりFlMMLとは文法がちょっと違う。
- [http://aeroz.net/az/az_down.htm:title=あずねっと mid2mml配布ページ]


こういうのを書くときにはPythonで。
各種ライブラリが充実しているし、
あとでWin32用のフロントエンドを付けたくなったときもすぐ出来るし。
[http://wiki.python.org/moin/PythonInMusic:title=PythonInMusic]
今回は、midi.pyというパブリックドメインなSMFパーサを使いました。


適当にドラえもんの魔境編中盤のnsfをnsf2midiして、それをmid2flmmlで変換してみた。
Ticks-&gt;n分音符の変換がやはり難しい。というか、割り切れてないからズレるのは当然だな。
全体を把握してのテンポ調整なんかをしないとダメだなー。
とはいえ、音階はちゃんと取れていていい感じ。
&gt;|mml|
T30
@V127O4B68R160A68R160&lt;E68R160&gt;B34R80A68R160&lt;E68R160&gt;B68R160B68R160A68R160&lt;E68R160&gt;B34R80A68R160&lt;E68R160&gt;B68R160B68R160A68R160&lt;F+68R160C+34R80&gt;A68R160&lt;F+68R160C+68R160&gt;B68R160A68R160&lt;F+68R160C+34R80&gt;A68R160&lt;F+68R160C+68R160&gt;A68R160G68R160&lt;D68R160&gt;A34R80G68R160&lt;D68R160&gt;A68R160A68R160G68R160&lt;D68R160&gt;A34R80G68R160&lt;D68R160&gt;A68R160A68R160G68R160&lt;E68R160&gt;B34R80G68R160&lt;E68R160&gt;B68R160A68R160G68R160&lt;E68R160&gt;B34R80G68R160&lt;E68R160&gt;B68R160B68R160A68R160&lt;E68R160&gt;B34R80A68R160&lt;E68R160&gt;B68R160B68R160A68R160&lt;E68R160&gt;B34R80A68R160&lt;E68R160&gt;B68R160B68R160A68R160&lt;F+68R160C+34R80&gt;A68R160&lt;F+68R160C+68R160&gt;B68R160A68R160&lt;F+68R160C+34R80&gt;A68R160&lt;F+68R160C+68R160&gt;A68R160G68R160&lt;D68R160&gt;A34R80G68R160&lt;D68R160&gt;A68R160A68R160G68R160&lt;D68R160&gt;A34R80G68R160&lt;D68R160&gt;A68R160A68R160A68R160A68R160&lt;A68R36A68R160E68R160&gt;A68R160A68R160A68R160A68R160&lt;A68R160A68R160E68R160&gt;A68R40O6F+60R240E60R240F+60R240E60R21&gt;B60R240&lt;D60R240F+60R240E60R240F+60R240E60R21&gt;B60R240&lt;D60R240E60R240D60R240E60R240D60R21&gt;A60R240&lt;C60R240E60R240D60R240E60R240A60R240E60R240D60R240&gt;A60R40&lt;F+60R240E60R240F+60R240E60R21&gt;B60R240&lt;D60R240F+60R240E60R240F+60R240E60R21&gt;B60R240&lt;D60R240E60R240D60R240E60R240D60R21&gt;A60R240&lt;C60R240E60R240D60R240E60R240A60R240E60R240D60R240&gt;A60
;

T30
@V127O4B68R160A68R160&lt;E68R160&gt;B34R80A68R160&lt;E68R160&gt;B68R160B68R160A68R160&lt;E68R160&gt;B34R80A68R160&lt;E68R160&gt;B68R160B68R160A68R160&lt;F+68R160C+34R80&gt;A68R160&lt;F+68R160C+68R160&gt;B68R160A68R160&lt;F+68R160C+34R80&gt;A68R160&lt;F+68R160C+68R160&gt;A68R160G68R160&lt;D68R160&gt;A34R80G68R160&lt;D68R160&gt;A68R160A68R160G68R160&lt;D68R160&gt;A34R80G68R160&lt;D68R160&gt;A68R160A68R160G68R160&lt;E68R160&gt;B34R80G68R160&lt;E68R160&gt;B68R160A68R160G68R160&lt;E68R160&gt;B34R80G68R160&lt;E68R160&gt;B160R68B68R160A68R160&lt;E68R160&gt;B34R80A68R160&lt;E68R160&gt;B68R160B68R160A68R160&lt;E68R160&gt;B34R80A68R160&lt;E68R160&gt;B68R160B68R160A68R160&lt;F+68R160C+34R80&gt;A68R160&lt;F+68R160C+68R160&gt;B68R160A68R160&lt;F+68R160C+34R80&gt;A68R160&lt;F+68R160C+68R160&gt;A68R160G68R160&lt;D68R160&gt;A34R80G68R160&lt;D68R160&gt;A68R160A68R160G68R160&lt;D68R160&gt;A34R80G68R160&lt;D68R160&gt;A68R160A68R160A68R160A68R160&lt;A68R36A68R160E68R160&gt;A68R160A68R160A68R160A68R160&lt;A68R160A68R160E68R160&gt;A68R68O6D60R240C60R240D60R240C60R21&gt;G60R240B60R240&lt;D60R240C60R240D60R240C60R21&gt;G60R240B60R240&lt;C60R240&gt;A+60R240&lt;C60R240&gt;A+60R21F60R240A60R240&lt;C60R240&gt;A60R240&lt;C60R240E60R240C60R240&gt;A60R240F60R40&lt;D60R240C60R240D60R240C60R21&gt;G60R240B60R240&lt;D60R240C60R240D60R240C60R21&gt;G60R240B60R240&lt;C60R240&gt;A+60R240&lt;C60R240&gt;A+60R21F60R240A60R240&lt;C60R240&gt;A60R240&lt;C60R240E60R240C60R240&gt;A60R240F60
;

T30
@V90O5E32R96F+32R96G32R96B32R96&lt;E16R48E32R96E32R96D+20R68&gt;B60R240&lt;D+20R68&gt;B60R240&lt;D+60R240E60R240F+60R240E60R240D+32R19&gt;D32R96E32R96F32R96A32R96&lt;D16R48D32R96E32R96C+20R68&gt;A60R240&lt;C+20R68&gt;A60R240&lt;C+32R96&gt;B60R240&lt;C+60R240&gt;A32R19E32R96F+32R96G32R96B32R96&lt;E16R48E32R96E32R96D+20R68&gt;B60R240&lt;D+20R68&gt;B60R240&lt;D+60R240E60R240F+60R240E60R240D+32R19&gt;D32R96E32R96F32R96A32R96&lt;D16R48D32R96E32R96C+60R240D60R240E20R68D60R240C+60R240&gt;A60R240&lt;C+60R240D60R240E60R240F+60R240E60R240D60R240C+60R40O4E60R240D60R240E60R240D60R240D60R240D60R240G60R240G60R240E60R240D60R240E60R240D60R240D60R240D60R240G60R240G60R240&lt;D60R240C60R240D60R240C60R240C60R240C60R240&gt;F60R240F60R240F60R240F60R240F60R240F60R240F60R240F60R240F60R240F60R240E60R240D60R240E60R240D60R240D60R240D60R240G60R240G60R240E60R240D60R240E60R240D60R240D60R240D60R240G60R240G60R240&lt;D60R240C60R240D60R240C60R240C60R240C60R240&gt;F60R240F60R240F60R240F60R240F60R240F60R240F60R240F60R240F60R240F60
;
||&lt;

いつものごとく完成度１割くらいでCodeReposに放りこんでおきました。
- [http://coderepos.org/share/browser/lang/python/mid2flmml/trunk/:title=mid2flmml]
フロントエンドとかnsf/spc対応とかに期待したいところ。ぽこぺん。

</body>
<comments>
<comment>
<username>にゃん</username>
<body>懐かしい、ドラえもん。</body>
<timestamp>1220836179</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>ドラえもん、ひさびさに実機でやりたい。</body>
<timestamp>1220958077</timestamp>
</comment>
</comments>
</day>
<day date="2008-09-11" title="気分が乗らないなぁ…">
<body>
*xml_https_with_c* [xml][libxml2][c]XMLをHTTPSで取得して、XPathで指定された中身をC言語で取り出す方法
某サービスのAPI呼び出しについて、
- API呼び出しをSSL化する
- UserAgentに特定の文字列を入れる
という新しい要件が発生した。


というわけで、
- [http://d.hatena.ne.jp/tasukuchan/20080706/1215344211:title]
を更新。今度はlibcurlを使った。


実用上は、
curlのインスタンスやcurl_responseのバッファなどは使いまわすべきです。


いつものごとくツッコミを待つ。
今頃になって、文字列格納用バッファ関数群がlibxml2にあるような気もしてきた…
&gt;|sh|
sudo aptitude install libxml2-dev libcurl-openssl-dev
gcc -o test -I/usr/include/libxml2 test.c -lxml2 -lcurl
||&lt;
&gt;|c|
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;curl/curl.h&gt;
#include &lt;libxml/xpath.h&gt;

#define URL &quot;https://dokokako.api/&quot;
#define XPATH &quot;/xpath&quot;
#define USER_AGENT &quot;nicowiki&quot;
#define BAIRITU_DON 8

typedef struct {
  char *data;
  size_t length;
  size_t allocated;
} curl_response;

size_t
curl_callback(void *ptr, size_t size, size_t nmemb, curl_response *cr)
{
  if (!size || !nmemb) { return 0; }
  if (!cr-&gt;data) {
    if (!(cr-&gt;data = malloc(size * nmemb * BAIRITU_DON))) {
      return 0;
    }
    cr-&gt;allocated = size * nmemb * BAIRITU_DON;
  } else if ((cr-&gt;length + size * nmemb) &gt;= cr-&gt;allocated) {
    char *b;
    if ((b = realloc(cr-&gt;data, cr-&gt;allocated * 2))) {
      cr-&gt;data = b;
      cr-&gt;allocated *= 2;
    } else {
      free(cr-&gt;data);
      cr-&gt;length = cr-&gt;allocated = 0;
      return 0;
    }
  }
  memcpy(cr-&gt;data + cr-&gt;length, ptr, size * nmemb);
  cr-&gt;length += size * nmemb;
  cr-&gt;data[cr-&gt;length] = '\0';
  return size * nmemb;
}

int
main(int argc, char *argv[])
{
  CURL *curl;
  xmlDocPtr doc;
  xmlNodeSetPtr nodes;
  xmlXPathContextPtr ctx;
  xmlXPathObjectPtr xpobj;
  curl_response cr = {NULL, 0, 0};

  if ((curl = curl_easy_init())) {
    curl_easy_setopt(curl, CURLOPT_URL, URL);
    curl_easy_setopt(curl, CURLOPT_TIMEOUT, 3);
    curl_easy_setopt(curl, CURLOPT_NOSIGNAL, 1);
    curl_easy_setopt(curl, CURLOPT_WRITEDATA, &amp;cr);
    curl_easy_setopt(curl, CURLOPT_USERAGENT, USER_AGENT);
    curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, curl_callback);
    if (curl_easy_perform(curl) != CURLE_OK || !cr.data) {
      return;
    }
    curl_easy_cleanup(curl);
  }
  if ((doc = xmlParseDoc((xmlChar *)cr.data))) {
    if ((ctx = xmlXPathNewContext(doc))) {
      if ((xpobj = xmlXPathEvalExpression(
                     (xmlChar *)XPATH, ctx))) {
        if (!xmlXPathNodeSetIsEmpty(xpobj-&gt;nodesetval)) {
          xmlNodePtr node = xmlXPathNodeSetItem(xpobj-&gt;nodesetval, 0);
          if (node-&gt;content) {
            printf(&quot;%s\n&quot;, node-&gt;content);
          }
        }
        xmlXPathFreeObject(xpobj);
      }
      xmlXPathFreeContext(ctx);
    }
    xmlFreeDoc(doc);
  }
  xmlCleanupParser();
  free(cr.data);

  return 0;
}
||&lt;

</body>
</day>
<day date="2008-09-22" title="">
<body>
*nicodic_development*[ニコニコ大百科]ニコニコ大百科開発ブログはじめました。
ニコニコ大百科の開発関連についてはブログ分けました！
- [http://d.hatena.ne.jp/nicodic:title]


EeePCをサーバとして使い倒す方法や、
libeventのevhttpとvarnishの組み合わせ、
repcachedを使う上でlibmemcachedに当てなければいけないパッチ、
Rubyのlibmemcached bindingsに当てるパッチなどの情報については、
上記ブログに書いていこう…かと思ったのですが…


上記ブログはサービス寄りのほうがいいかな、
と今考えを改めました…
というわけで、どちらのブログもよろしくお願いいたします！

*senna_2_0_beta_comming_soon*[Senna]Senna 2.0の展望と、Tritonnで問題が発生している人向け情報
Senna 2.0βのリリースが見えてきました。
去年の夏に出すと言っていましたが、紆余曲折あっての現状です。


ライバルのTokyo Cabinet/Tokyo Dystopiaについては、
ストレージと全文検索インデックスを分割する方向性です。
- [http://alpha.mixi.co.jp/blog/?p=219:title]


今までのSennaはTokyo Dystopiaに近いものでしたが、
Senna 2.0では逆にHyper Estraierのほうに近づく感じになっています。
それぞれ特色が出て面白いですねー。
今回は転置インデックス部分にもかなり手が入っているので、
Senna/Lucene/Tokyo Dystopiaのパフォーマンス比較もやってみたいと思います。
（とはいえ、パフォーマンス比較はそれぞれのライブラリに精通しないと意味のある情報が出せないので、大変ではありますね…）


Senna 2.0 + MySQL 5.1用にプラガブルSennaストレージエンジンも開発中です。
後付バイナリインストールができるとかなり運用上楽ですしね。


Senna 2.0のテストについて、今回はクリアコードさんが協力くださっています。
テストには、クリアコードさんが作っているテストフレームワーク「Cutter」を使っています。
早めからバグが潰せていい感じです。
- [http://www.clear-code.com/blog/2008/7/25.html:title]
- [http://www.clear-code.com/blog/2008/8/25.html:title]


さて、将来の話はここまで。


現在Tritonn/Sennaを運用している方から、
「落ちるんだけど…」とツッコミいただくことがあります。
ツッコミが貰えて、すごく嬉しいですね。
使っていただいていることが分かりますし、
不具合を直す機会にもなります。


というわけで、Tritonn導入時の問題解決に役立つリストを書いてみました。
すぐ解決したいねん、という人は、住商情報システムのサポートサービスをどぞー
- [http://www.scs.co.jp/mysql/support.html#+senna:title]

** Tritonnが落ちるのですが
以下の項目を１つ１つチェックしてみてください。
*** 最新版を使っていない
Tritonnの最新版をお使いください。
旧バージョンには、テンポラリテーブルが削除される場合に落ちる不具合などがあります。
最新版は、COUNT(*)と2indとの組み合わせでカウントがおかしい問題があるようですが、
そろそろ直した版を出すってid:mirさんが言ってたお！

Senna/Tritonnとも現在出ている最新版は安定版なので、
基本アップグレードしたほうが安定します。

- [追記]
SHOW SENNA STATUSで落ちるのは、
TritonnとSennaのバージョン差異が原因です。
Tritonnで指定しているバージョンのSennaを使うことをオススメします。
（最新版では起こらないと思います）


Sennaの昔のバージョンは、
高負荷の場合に落ちつつしかもその後更新がロックする問題がありましたが、
その問題は現在修正されています。

*** 自前でビルドしている
以前からTritonnをお使いいただいている方は、
自前でMySQLでパッチを当ててTritonnを導入されていると思います。


しかし、現在は自前ビルドはオススメしておりません。
配布されているバイナリを使うことをオススメいたします。
*** OSがi386である
amd64/em64t版のOSをお使いください。


SennaはmmapというAPIを多用しているので、
論理空間不足にかなり敏感です。
落ちなくするようにすることもやろうと思いますが、
論理空間不足での運用は、パフォーマンスがかなり落ちると思います。

- [追記]32bit版OSでの制限についての詳細と回避策
概算で、Sennaのインデックスの数 * 256M &gt; 2Gとなると危険水域です。


一時的にでもSennaのインデックスの数が上記を超えるとマズいです。
たとえば、別名テーブルを作成してからrenameする、というような運用だと、
インデックスの数が運用状態の２倍となります。


回避策としては、
- INITIAL_N_SEGMENTSを減らす(上記の256Mは、INITIAL_N_SEGMENTSに比例します)
- Sennaのインデックスの数を減らす
- コンテンツ分割をする
などがあります。


MySQLのレプリケーション運用の場合には、
スレーブごとにインデックスを付与することができます。
それでインデックスを分割するというのが運用的に楽だと思います。
が、em64t対応CPUが普及し、em64t版OSも枯れてきた現状では、
em64t版OSに変えるのが将来的にはオススメできるでしょう。


インデックスの数が多く、コンテンツの量が多い場合には、
物理メモリも十分な量が必要です。
でも、まずは十分な論理空間の確保が先決です。

*** 上記のどれにも当てはまらんぞコラ！
落ちたときに、mysqlのlogに
&gt;&gt;
0809xx  5:xx:xx - mysqld got signal 11;
&lt;&lt;
といったログが出ると思います。
そこに、
&gt;&gt;
Stack range sanity check OK, backtrace follows:
0xdeadbeef
0xcafebabe
0x09286322
&lt;&lt;
といった16進数値の羅列が出ていませんか？
Tritonnで配布しているバイナリを使っていれば、
この数値の羅列から、不具合の場所を大体特定することができます。


というわけで、この16新数値の羅列をTritonn-devやSenna-devメーリングリストなどに投げていただければ幸いです。
すでに多くの不具合は修正されているため、
残りの不具合についてはかなりのレアケースであることが考えられます。
よって、ツッコミをいただかないと、なかなか修正が出来なかったりするのです…


というわけでレッツツッコミ。４９４６。

** CentOS 5.2でTritonnの最新版のrpmの導入に失敗します！
akiyan.comのブログを見て、導入方法を書かねば…と思い僕も実際試してみました。
- [http://www.akiyan.com/blog/archives/2008/09/tritonnmysqlsen.html:title]

しかし、Tritonnで配っているrpmを導入すると、
&gt;&gt;
/etc/init.d/mysql start
&lt;&lt;
が失敗するんですね。僕の手元の環境でも再現しました。
Tritonn作者であるid:mirさんにお伝えしておきました。


ちなみに、libmysqlclient.soが見つからない問題は、
mysql-devel的なパッケージをどこからか持ってくることによって解決することが出来ると思います。
が、これについてもtritonn側で配布してくれたら親切だとは思います。
</body>
</day>
<day date="2008-10-06" title="">
<body>
*ruby_eventmachine_sendmail*[Ruby]Rubyでeventmachineを使って高速にメールを送る
またまた某サービスで、今度はメールを送るという要件が発生。
しかも、ユーザごとに異なった内容を送るというもの。


テンプレートはErubisを使うとして、
メール送信はどのライブラリを使おう。tmailかなぁ？
とGoogle検索すると、eventmachineってものがあるらしい。
Rubyから非同期でガンガンSMTPサーバに接続できるようです。ひゃっほい！


というわけで、ためしにeventmachineを使って
メールを送信するテストコードを書いてみた。
一応並列に20個コネクションを張っている…はず。
テストが怪しいので、ご利用時は検証のこと。
eventmachineの挙動全く理解してねっす。
eventmachineにはSMTP clientだけでなくSMTP serverの実装もあるので、
テスト時にはそれを使うといいと思う。


ちなみに、EM::Protocols::SmtpClient.sendでGoogle検索したら
2件くらいしか引っかからない…
情報少ないなぁ。
&gt;|ruby|
#!/usr/bin/ruby
# UTF-8前提です
$KCODE = 'u'

require 'nkf'
require 'eventmachine'

class SendMailWithEventMachine
  attr_reader :successes, :errors

  def send_mail(domain, host, port, starttls, from, queue_threshold, &amp;blk)
    @successes = 0
    @errors = 0
    @on_queue = 0
    @all_queued = false

    @domain = domain
    @host = host
    @port = port
    @starttls = starttls
    @from = from

    EM.run {
      queue_threshold.times {
        send_mail_queue(blk)
      }
    }
  end

  private

  def send_mail_queue(blk)
    unless @all_queued
      if data = blk.call
        if (smtp = EM::Protocols::SmtpClient.send :domain =&gt; @domain,
          :host =&gt; @host,
          :port =&gt; @port,
          :starttls =&gt; @starttls,
          :from =&gt; @from,
          :to =&gt; [data[:to]],
          :header =&gt; {'To' =&gt; data[:to],
                      'Subject' =&gt; NKF.nkf('-jW --mime', data[:subject])},
          :body =&gt; NKF.nkf('-jW', data[:body]),
          :verbose =&gt; false)
          @on_queue += 1
          smtp.callback {|r|
            @on_queue -= 1
            @successes += 1
            send_mail_queue(blk)
          }
          smtp.errback {|e|
            @on_queue -= 1
            @errors += 1
            send_mail_queue(blk)
          }
        end
      else
        @all_queued = true
      end
    end
    if @all_queued and @on_queue == 0
      EM.stop_event_loop
    end
  end
end

mails = [{
  :to =&gt; 'victim1@example.com',
  :subject =&gt; 'さっき天一で',
  :body =&gt; '無料券使ったら',
},
{
  :to =&gt; 'victim2@example.com',
  :subject =&gt; '並盛だけですと言われ',
  :body =&gt; 'きちんと抗議したよ！',
}]

i = 0
sm = SendMailWithEventMachine.new
sm.send_mail(
  'example.com', 'mx1.example.com', 25, false, 'spammer@example.com', 20) {
  # mysqlのfetch_rowなどを想定
  next if i &gt;= mails.length
  i += 1
  mails[i - 1]
}
||&lt;

</body>
</day>
<day date="2008-10-08" title="">
<body>
*brazil_good_design*[ブラジル][Senna]グッドデザイン賞を受賞しました。
未来検索ブラジルが検索エンジン開発において(!)グッドデザイン賞を受賞したようです。
- [http://www.g-mark.org/search/Detail?id=34960&amp;sheet=outline&amp;lang=ja:title]


みんなも、オープンソース開発をしてグッドデザイン賞をもらおう！


あ、あとブラジルはIT技術者募集中です。
- デザイナ HTML/CSS
- ウェブアプリ開発 PHP/JavaScript/Ruby/Cのうち2つ以上
- フラッシュ開発 ゲーム/ツール
- Senna開発 C/Scheme/Rubyのうち2つ以上

詳しくはこのページへ、とリンクをつけたときに気づいたけど、
このページ恥ずかしいんだよな…
- [http://b.razil.jp/recruit.html:title=未来検索ブラジル:スタッフ募集]
</body>
<comments>
<comment>
<username>mecois</username>
<body>ページ先の満面の笑みが眩しい。。。</body>
<timestamp>1223725867</timestamp>
</comment>
</comments>
</day>
<day date="2008-10-10" title="">
<body>
*subversion_in_wabisabi*[Subversion]Subversionクライアントだけをソースからインストールする(清貧な感じで)
複数台へのデプロイをするときに、
各マシンでsvn updateをして、
最新版のファイルをSubversionのリポジトリから入手する手法があります。
でも、これって各マシンにSubversionを入れないといけないんだよね。
portsも入れていない（わざとだけど）FreeBSDにいろいろと入れるのは大変めんどーい！


というわけで、http経由でSubversionのサーバからsvn checkout/updateできればいいや、
という目的のためのインストール方法のメモ。


neonはインストールする必要はなく、subversionのディレクトリ下に入れておくだけでよいようです。
&gt;|sh|
fetch http://www.webdav.org/neon/neon-0.28.3.tar.gz
fetch http://subversion.tigris.org/downloads/subversion-1.5.2.tar.bz2
tar xvfz neon-0.28.3.tar.gz
tar xvfj subversion-1.5.2.tar.bz2
mv neon-0.28.3 subversion-1.5.2/neon
cd subversion-1.5.2
./configure --includedir=/usr/local \
 --without-berkeley-db \
 --without-apache \
 --without-apxs \
 --without-swig \
 --with-ssl \
 --disable-nls
make
make install
||&lt;
includedirはたぶんいらないと思います。必要に応じてつけてください。
さらに何もない環境であれば、--with-sslを--without-sslにしたほうがいいかもしれません。
たぶんhttpsは使えなくなると思うけど…


neonがない場合、httpのURLでリポジトリを指定すると「Unrecognized URL scheme」と怒られてしまいます。
neonは入れましょう。

</body>
</day>
<day date="2008-10-16" title="">
<body>
*memcached_timemachine_problem*[memcached]memcachedを愚弄する１つの方法
某サービスでセッション情報を保持するために利用している
memcached(repcached)に障害が起こった。
ちゃんと追えていないけど、おそらく以下のような原因。他の人がハマらないように。

** 障害発生まで
- memcached(repcached)の中には揮発したらそれなりにマズい情報が入っている。
- repcachedサーバ２台のOS入れ替えをしていて、１台は再起動が成功した。
- １台目のサーバへ２台目のサーバからのレプリケーションが完了したのをstatsのcurr_itemsにて確認した。
- よって２台目を再起動するものの、起動しなくなった。

この時点では、１台は生きているから後でデータセンターいこうっと、という気軽な気持ちだった…

** 現象
生きている１台目のサーバで、以下のような現象が起こった…

- 値をsetする際に、ある閾値以上のexptimeを指定すると即expireされる。
- その閾値はなぜか刻々と減っていく
- memcachedでstatsコマンドを発行した結果のuptimeが4294954584とかのありえない値に
- でもdate +&quot;%s&quot;とかでサーバのUNIX timeチェックしてもまったく問題なし
- 俺大パニック

再起動に成功して、レプリケーションもすんだはずのサーバが謎の挙動を！
ウワーン…


tcpdumpやtelnetでプロトコルをチェックしたところ、
exptime周りの挙動がおかしいことが判明。
パニくってmemcachedの再起動とかをしてみたが状況変わらず。
exptimeを0にして仮対応した。
２台目死んだ状態で再起動したので、情報は揮発。しゅん。


死んだサーバの復旧のため、データセンターに向かう。とぼとぼと。

** 予想した発生メカニズム
データセンターで死んだサーバを再起動。普通に起動した…が、時間が9時間ズレている！
ということは、こんな感じで問題が起こったのかな。

- サーバのBIOS画面での時刻は、localtime(JST)になっている。
- Debianのtimezone設定はAsia/Tokyo。
- /etc/default/rcSでUTC=yesとなっていたが、NTPで時刻合わせする設定をしていたので稼働中は時刻がちゃんと設定されているように見えていた。
- /etc/init.d/memcachedでmemcached(repcached)が自動起動するようになっていた。


- 時刻が本来よりも9時間進んだ状態でサーバ起動
- memcached自動起動
- 「しばらくしてから」NTPサーバの時刻あわせが動き、時刻が9時間戻る。
- memcached大パニック

** 解決方法
- /etc/default/rcSでUTC=noとする
- もしくは、BIOSで設定する時間をUTCにする。

** 結論
- memcachedは起動後にサーバの時間が戻ると、ものっそ怪しい挙動になる。
- セッション情報は結構大事。永続化を検討すべき。特にお絵かき掲示板系はローカル保存ができない場合にはセッションが失われたらかなりマズい。
- repcachedで障害が！とTwitterでつぶやいたら即効開発者の方たちにチェックされていた。たぶん上記のような原因でした、騒いでごめんなさい…（これが主に言いたい）
</body>
</day>
<day date="2008-10-18" title="">
<body>
*memcached_relative_time*[memcached]memcachedを時刻巻き戻りに強くしてみる
昨日のダサい失敗エントリが注目を集めているようで恥ずかしいお…
今後ダサい失敗で困らないために、memcachedのパッチを書いてみようと思った。
時間が巻き戻った瞬間に障害が出るのはしょうがないけど、
巻き戻ったあとにその影響が残り続けるのは嬉しくない。


昨日起きた現象を考えるに、
「memcached内部での時間は、絶対時間で保持しているのではなく起動時間からの相対時間で保持されている」のだろう、と予想していた。実際そうみたい。


current_timeという変数に、現在の起動時間からの相対秒が記録されている（set_curent_time()）。
realtime()では、各種コマンドで与えられるexptimeを起動時間からの相対秒に変換している。
&gt;|c|
#define REALTIME_MAXDELTA 60*60*24*30
typedef unsigned int rel_time_t;

/* time-sensitive callers can call it by hand with this, outside the normal ever-1-second timer */
static void set_current_time(void) {
    struct timeval timer;

    gettimeofday(&amp;timer, NULL);
    current_time = (rel_time_t) (timer.tv_sec - stats.started);
}

static rel_time_t realtime(const time_t exptime) {
    /* no. of seconds in 30 days - largest possible delta exptime */

    if (exptime == 0) return 0; /* 0 means never expire */

    if (exptime &gt; REALTIME_MAXDELTA) {
        /* if item expiration is at/before the server started, give it an
           expiration time of 1 second after the server started.
           (because 0 means don't expire).  without this, we'd
           underflow and wrap around to some large value way in the
           future, effectively making items expiring in the past
           really expiring never */
        if (exptime &lt;= stats.started)
            return (rel_time_t)1;
        return (rel_time_t)(exptime - stats.started);
    } else {
        return (rel_time_t)(exptime + current_time);
    }
}
||&lt;
まず思いつく手法は、rel_time_t型の変数について、全部絶対秒に変える手法。
time_tの型である__TIME_T_TYPEはlong intか。
絶対時間を採用するとLP64ではサイズが2倍になる。これは使えねー。
そもそも、絶対秒にすると修正点が多すぎる。


というわけで、set_current_timeを以下のように変えてみた。
時間の巻き戻りを検出したら、検出時の時間を起動時間に設定する、という超泥縄。
分岐予測も効くから実行速度への影響も少なげ。
2秒ずらしているのは、相対時間0が特別な意味を持つためっす。

&gt;|c|
/* time-sensitive callers can call it by hand with this, outside the normal ever-1-second timer */
static void set_current_time(void) {
    struct timeval timer;

    gettimeofday(&amp;timer, NULL);
    if (timer.tv_sec &lt; stats.started) {
      stats.started = timer.tv_sec - 2;
    }
    current_time = (rel_time_t) (timer.tv_sec - stats.started);
}
||&lt;


時間さえきっちり設定していれば、
- 揮発するとそれなりにマズい
- 永続化するほどでもない
- 高スループットが要求される
- ネットワーク越しで参照したい
情報について保持するために、repcachedは適していますよ！！
(これが主に言いたい)

</body>
<comments>
<comment>
<username>hellear</username>
<body>どうも初めまして、お邪魔します。幽興亭地獄耳と申します。&lt;br&gt;先日は僕のブログにおこし頂きまして誠にありがとうございます。&lt;br&gt;当方プログラムの事は全くわかりませんが、&lt;br&gt;先日のニコニコペインタの件の記事にレスをさせて頂きました。&lt;br&gt;お仕事の方、これからも影ながら応援させていただきます。</body>
<timestamp>1224515913</timestamp>
</comment>
</comments>
</day>
<day date="2008-10-22" title="">
<body>
*libxml_ruby_memory_leaks*[ruby]libxml-rubyでメモリリークしている気がする
libxml-rubyでメモリ使用量がじわじわと増えていく。
以下のようなコード。使い方の間違いとかについてツッコミ求む。
&gt;|ruby|
require 'xml/libxml'

doc = XML::Document.new()
doc.root = XML::Node.new('root')
root = doc.root
root &lt;&lt; child = XML::Node.new('child')
(1..100000).each {|i|
  a = XML::Node.new('dummy')
  child.prev = a
  a.remove!
  GC.start
}
||&lt;
Hpricotはメモリリークするのでlibxml-rubyに乗り換えたんだけど、
世の中そうそう楽できるようには出来てないのね…
- [http://code.whytheluckystiff.net/hpricot/ticket/48:title=Hpricotのメモリリークについて]


明日ちゃんと追おう。

** [追記]修正されました。
修正してもらいました(rev. 647) 。再現コードと、不完全でもいいからパッチがあるとやはり動きが早い。

</body>
</day>
<day date="2008-11-02" title="">
<body>
*senna_normalize_patch_for_fullwidth_tidle*[Senna]SennaでWAVE DASH(～)とFULLWIDTH TILDE(～)を同一視する
Sennaでは、UTF-8の文字列を正規化しています。
たとえば、「?」は「ミリバール」に、「AbRACADAbra」は「abracadabra」に、「ﾊﾗﾍｯﾀＺＯ」は「ハラヘッタZO」に変換されます。
これで、文字のゆれに対応した検索ができるわけです。


さて、某サービスでWAVE DASH(～)とFULLWIDTH TILDE(～)を同一視してほしい、
という要望が届きました。
そういうときはlib/nfkc.cをいじるとよいです。


lib/nfkc.cのいじり方について説明します。このソースコードは自動生成されていますので、直にいじるのはちょっと大変です。
lib/nfkc.c自動生成のためのプログラムは、util/unicode/以下に入っています。
util/unicode/icudump.cに以下のようなパッチを当てれば、FULLWIDTH TILDEを全てWAVE DASHに変換するようになります。
あくまで全角チルダのみ変換されて、チルダそのものは変換されないので地球に大変やさしい(?)ですね。

&gt;|diff|
--- /home/tasuku/senna-svn/util/unicode/icudump.c       2008-10-15 20:09:54.000000000 +0900
+++ icudump.c   2008-11-02 14:49:50.000000000 +0900
@@ -75,6 +75,10 @@
   if (rc != U_ZERO_ERROR /*&amp;&amp; rc != U_STRING_NOT_TERMINATED_WARNING*/) {
     return -1;
   }
+  /* normalize full width tilda to wave dash */
+  if (ubuf[0] == 0xff5e) {
+    ubuf[0] = 0x301c;
+  }
   rc = U_ZERO_ERROR;
   nlen = unorm_normalize(ubuf, ulen, mode, 0, nbuf, BUF_SIZE, &amp;rc);
   if (rc != U_ZERO_ERROR /*&amp;&amp; rc != U_STRING_NOT_TERMINATED_WARNING*/) {
||&lt;

lib/nkf.cの自動生成を行うには、util/unicode/nfkc.rbを実行します。
nfkc.rb動作のためには、ICU(開発用のヘッダファイル含む)とRubyが必要です。
Debianですと、libicu-devパッケージをインストールしてください。
nfkc.rbを動作すると以下のような操作を行います。
+ icudump.cからicudumpを作る
+ icudumpを使ってマッピング表を作り、nfkc.cを生成する
生成されたnfkc.cをlibに移動してビルドすればOKです。


今回は１文字だけでしたので直にnfkc.cをいじってもよかったのですが、
ひらがなとカタカナを同一視したい、などの要件がある場合には
icudump.cで置換することをオススメしておきます。


今月あたりに、仮想空間が枯渇したりメモリが枯渇したときの安定度を増した
Senna 1.1.4を出せたらいいなぁ、と考えています。
最後のSenna 1.1系となる予定です。

</body>
</day>
<day date="2008-12-22" title="">
<body>
*sen_memory_exhausted*[Senna]ThinkIT 「徹底比較！検索エンジン」についてツッコミ
&gt;&gt;
Sennaの場合には、文書数を166,512より多くしようとすると、メモリ確保の失敗が原因のsen_memory_exhaustedというエラーが発生し、インデックスに文書を追加できなくなりました。
http://thinkit.jp/article/744/1/
&lt;&lt;
しっかりと反応しておきます。


対象文書サイズが4000000KB(≒4GB)を超えた場合インデックスが作成できないのは、
32bit OSを使っているからだと思われます。
64bit OSを使えば問題なくインデックスが作成できると思います。


あと、LuceneのN-gramの実験をやるんだったら、
SennaのN-gramの実験もやって欲しいなぁ…と思います。


次世代Senna（名称未決定…、名前変えることにしました）では
さらに転置インデックスのサイズが圧縮できるように努力してまーす。
名前が思いつかないのが困り者…


こういうパフォーマンス比較モノ記事は、書くのが非常に難しいです。
各比較対象についての知識と、それぞれでのチューニングのキモを知る必要があるからです。
各種パラメータなどをカリカリにチューニングしないと、そのライブラリに失礼ですから。
また、各検索エンジンが対象としている用途が異なるため、
納得感のある比較が難しいとも思います。
例えばSennaの場合、インデックスの更新と検索が平行して走っているときに
高スループットが出せることを目標としています。
「２ちゃんねる検索」なんかは更新走りっぱなしだし。


単純に言えば、↓こういう話なんですが…
- http://d.hatena.ne.jp/tokuhirom/20081202/1228232190


というわけで、「徹底比較！検索エンジン」記事の今後に期待です！
</body>
</day>
<day date="2009-01-10" title="">
<body>
*think_skype_nicolive*[ニコニコ生放送]Skypeの会議通話をニコニコ生放送する方式を考える
Skypeの会議通話を、ニコニコ生放送（やその他インターネット配信）で配信する方法を手探りしているメモです。Windows/Mac両方での方法をメモしたいです。


Windowsではステレオミキサーを使う方法、
Macでは、Soundflowerというソフトを使う方法がよく紹介されます。
これらのツールはPC内で発生した音全てを拾うため、
配信したくない音まで配信してしまいます(エラー音など)。


というわけで、ステレオミキサーやSoundflowerに頼らない方法を紹介します。
&gt;||
やりたいことの概念図
[マイク]-+-&gt;[Skype]-+-&gt;[モニタ用音声出力(他人の声のみ)]
           |               |
           +----------+-&gt;[配信用出力]-&gt;[ニコニコ生放送]
||&lt;
Skypeの会議通話を配信するためには、２つの問題をクリアしないといけません。それらの問題について、それぞれ解決方法を紹介します。

** 問題点1:
ニコニコ生放送の入力、Skypeの出力ともに
物理的なデバイスとして認識される必要があります。

** 解決方法1: USBサウンドデバイスを使って、ヘッドホン端子とマイクとをつなぎます。
USBで、ヘッドホンとマイク端子を追加できる製品があります。
その製品を購入して、ヘッドホンとマイク端子をケーブルでつなぐという方式です。
１点注意があります。ケーブルは「抵抗入り」を買ってください。

安いUSBサウンドデバイスとケーブルをAmazonで見繕ってきました。

[asin:B001A1PR4M:detail]
[asin:B0000C8Z1C:detail]

** 解決方法2: 仮想サウンドカードを使う
- Windows: [http://www.download.com/Virtual-Audio-Cable/3000-2168_4-10067766.html:title=Virtual Audio Cable]を使う
[http://www.download.com/Virtual-Audio-Cable/3000-2168_4-10067766.html:title=Virtual Audio Cable]というソフトを使えば、
解決方法1と同じことをパソコンの中だけで実現できます。
お金払わないと「金払えー」と怒られる。


まず、Virtual Audio Cableをインストールしてください。
そして、Skypeの音声出力を「Virtual Cable 1」とし、
ニコニコ生放送の音声入力を「Virtual Cable 1」にしてください。
こうすることによって、Skypeの出力を直に配信することができます。

- Mac:詳しくないです…情報求む

** 問題点2:
Skypeでは、自分が話した声が出力されません。

** 解決方法1: 会議通話に、聞くだけのユーザを招待します。
話すためのSkypeとは別に、
発言を行わず、会議通話を聞くだけのSkypeを使う方法です。
&gt;||
概念図
[マイク]-&gt;[Skype(話す用)]-&gt;[モニタ用音声出力(他人の声のみ)]
[Skype(聞く用)]-&gt;[配信用出力]-&gt;[ニコニコ生放送]
||&lt;


パソコンが２台あれば、話は簡単ですね。実は、パソコン１台でもできます。
複数アカウントでのSkypeのログイン方法は、以下のブログを参照ください(Windowsのみ)。
http://share.skype.com/sites/ja/2006/10/26/2instances_of_skype.html


会議通話を聞くだけのユーザの音声出力先を、
- 問題点1の解決方法1を選んだ場合: USBサウンドデバイス
- 問題点1の解決方法2を選んだ場合: Virtual Cable 1
にしてください。

** 解決方法2: マイクの音を横取りするソフトを使う
この方式だと、自分の声が入らないモニタ用出力が難しい気がする。


&lt;del datetime=&quot;2009-01-10T10:27:53+09:00&quot;&gt;マイクの音を横取りして、それを指定のデバイスに出力することができます。
- Windows: Virtual Audio Cableに附属するAudio Repeater
- Mac: [http://rogueamoeba.com/freebies/:title=LineIn]

どちらも、マイクの音を横取りして、指定の出力先に音を出すことができます。

音声出力先は、
- 問題点1の解決方法1を選んだ場合: USBサウンドデバイス
- 問題点1の解決方法2を選んだ場合: Virtual Cable 1
にしてください。
&lt;/del&gt;

</body>
</day>
<day date="2009-01-26" title="">
<body>
*nicovideo_tag_kai2_analysis*[メディア露出][ニコ動分析研究会]ニコニコ動画データ解析発表会でニコニコ大百科の宣伝を行いました（発表資料もあるよ！）
昨日2009年1月25日に、GLOCOMで行われたニコニコ動画データ分析研究発表会で発表を行いました。
- [http://nicovideo.g.hatena.ne.jp/Yoshikawa/20081219/1229678324:title=ニコニコ動画データ分析研究発表会]
USTREAM経由を含め、聴講してくださった方ありがとうございました！


解析の妥当性などのツメが甘いのでジョーク枠とさせていただいたのですが、
ジョークが少ない！ジョークがすべっている！と大変不評で嬉しい限りです。
あと、マイクの音割れがあったようで申し訳ございませんでした。
早口で聞き取りづらく、基本ノープランな発表でしたが、
大体「くぎゅうううううううう」的ななにかで救われた気がします。


発表資料一式のPDFをzipで固めて置いておきました。
ぜひニヤニヤしてみることをオススメします。
- [http://tasuku.suenaga.name/pub/nicovideo/nicovideo_kai2_analysis.zip:title=発表資料一式]


[f:id:tasukuchan:20090126134437p:image]
[f:id:tasukuchan:20090126134438p:image]


- ２タグのANDタグ検索の検索結果数(LGL形式)
- 関連タグネットワークのファイル(XGMML形式)
などが欲しい方は個別にご連絡をー！って、面倒ですよね。
どこかに公開するのでお待ちください。


Voronoi Treemapsを描画するコードについては、CodeReposかgithubに遺棄しておきます。
意外と実装に手間取ったので、捨てるの勿体ないっす。
</body>
<comments>
<comment>
<username>kou</username>
<body>Rabbitじゃない…&lt;br&gt;残念…</body>
<timestamp>1232944543</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>うはー！！&lt;br&gt;&lt;br&gt;RabbitでustreamのIRCを流しながらやりたかったんですが、&lt;br&gt;直前での資料つくりで死亡してました…&lt;br&gt;ショッカーズとして面目ない…</body>
<timestamp>1232944784</timestamp>
</comment>
</comments>
</day>
<day date="2009-02-20" title="">
<body>
*groonga_test_release*[groonga]全文検索エンジンgroongaをテストリリースしました。
全文検索エンジンのgroongaをテストリリースしました。
- [http://groonga.org/:title=groonga]

本日開催された、key-value store勉強会で発表させていただきました。


今まで、Sennaには
- Tritonn経由で使った場合、MySQL側のインデックスとの併用が難しく、Senna本来のパフォーマンスが発揮できなかった。
- 従来のインターフェースでは、トークナイザの切り替えなどの柔軟性がなかった。
といった問題がありました。


groongaは、それに対する返答です。
- 自分でデータベース書けばいいんじゃね？
- 柔軟なAPI用意すればいいんじゃね？
ってことですね。


データベースは、key-valueストアを組み合わせたcolumnストア的な感じになっています。
詳細については、今後別エントリやドキュメントで述べます。


今後は、Sennaはバグ修正のみ行うメンテナンスモードに移行します。

** 実際使ってみよう

今回は、groongaが備える「memcached互換プロトコル対応機能」を使ってみましょう。

groongaは、独自のデータベース・全文検索機能をAPI経由で提供するライブラリです。そのライブラリを使って、memcached互換のデーモンを書いてみたよ、というお話ですね。プロトコルはmemcached互換ながら、データはHDD/SSDに保存されます。


以下のようにインストールします。
今回は、全文検索は行わないため、
MeCabなしでインストールしてみましょう。

&gt;|sh|
&gt; tar xvfz groonga-0.0.1.tar.gz
&gt; cd groonga-0.0.1
&gt; ./configure --without-mecab
&gt; make
&gt; su
# make install
||&lt;

以下のように、groongaデーモンを起動します。
デフォルトでは、ポート番号10041でlistenします。
&gt;|sh|
&gt; groonga -s &lt;データベースファイル名&gt;
||&lt;

Gronngaは、独自プロトコルとmemcached互換プロトコルをサポートしています。
今回は、memcached互換プロトコルを使ってみましょう。
memcachedのバイナリプロトコルをサポートしているクライアントが必要です。


今回は、libmemcachedを直に使ってみます。
livedoorの池邊さんがWEB+DB pressに書いたコードのパクりですが…

&gt;|c|
#include &lt;stdio.h&gt;

#include &quot;libmemcached/memcached.h&quot;

int
main(int argc, char *argv[])
{
  struct memcached_st *memc;
  struct memcached_server_st *servers;
  memcached_return rc;
  char *val;
  size_t val_len;
  uint32_t flags;

  memc = memcached_create(NULL);
  memcached_behavior_set(memc, MEMCACHED_BEHAVIOR_BINARY_PROTOCOL, 1);
  servers = memcached_servers_parse(&quot;127.0.0.1:10041&quot;);
  rc = memcached_server_push(memc, servers);
  if (rc != MEMCACHED_SUCCESS) {
    fprintf(stderr, &quot;Error: %s\n&quot;, memcached_strerror(memc, rc));
    return -1;
  }
  rc = memcached_set(memc, &quot;key&quot;, 3, &quot;value&quot;, 5, 0, 0);
  if (rc != MEMCACHED_SUCCESS) {
    fprintf(stderr, &quot;Error: %s\n&quot;, memcached_strerror(memc, rc));
    return -1;
  }

  val = memcached_get(memc, &quot;key&quot;, 3, &amp;val_len, &amp;flags, &amp;rc);
  if (rc == MEMCACHED_SUCCESS) {
    printf(&quot;val: %.*s\n&quot;, val_len, val);
  }
  if (val) {
    free(val);
  }

  memcached_server_list_free(servers);
  memcached_free(memc);

  return 0;
}
||&lt;

'key'というキーに、'value'という値が設定して、
それの取得ができましたね。
キャッキャッ。

** PHPのセッション維持をgroongaでやってみる

PECLのmemcacheライブラリは、最近バイナリプロトコルをサポートしたようです。
が、試してみたらうまく動かなかったっす。
というわけで、今回は、PECLのmemcachedライブラリを使いました。
libmemcachedのラッパーですね。


PECLのmemcache/memcachedは、
PHPのセッションをmemcachedに保存するための機能を持っており、
php.iniを編集するだけでセッション情報をmemcachedに保存することが可能です。
ただし、memcachedのテキストプロトコルが使われてしまうんですねー…


よって、PHPのセッション維持をmemcachedのバイナリプロトコルを用いて行う
テストプログラムを書きました。
こんなんでうまく動くはずです。

&gt;|php|
&lt;?php
extension_loaded('memcached') || dl('memcached.so') || exit(1);

class MemcachedBinarySession
{
  private static $memcached;
  private static $lifetime;

  public static function open() {
    self::$lifetime = ini_get('session.gc_maxlifetime');
    $m = new Memcached;
    $m-&gt;setOption(Memcached::OPT_BINARY_PROTOCOL, 1);
    $ret = $m-&gt;addServer('localhost', 10041);
    self::$memcached = $m;
    return $ret;
  }

  public static function close() {
    return TRUE;
  }

  public static function read($session_id) {
    return self::$memcached-&gt;get($session_id);
  }

  public static function write($session_id, $session_data) {
    return self::$memcached-&gt;set($session_id, $session_data, self::$lifetime);
  }

  public static function destroy($id) {
    return self::$memcached-&gt;delete($session_id);
  }

  // don't delete.
  public static function gc($max_lifetime) {
    return TRUE;
  }
}

ini_set('session.save_handler', 'user');

session_set_save_handler(array('MemcachedBinarySession', 'open'),
                         array('MemcachedBinarySession', 'close'),
                         array('MemcachedBinarySession', 'read'),
                         array('MemcachedBinarySession', 'write'),
                         array('MemcachedBinarySession', 'destroy'),
                         array('MemcachedBinarySession', 'gc')
                        );

if (session_id() == '') session_start();

if (isset($_SESSION['counter'])) {
  $_SESSION['counter']++;
} else {
  $_SESSION['counter'] = 1;
}
echo '&lt;br/&gt;SessionID: '. session_id() .'&lt;br/&gt;Counter: '. $_SESSION['counter'];
?&gt;
||&lt;

groongaサーバをlocalhostで動かしているサーバに、
上記のスクリプトを置いてみましょう。
ブラウザで確認すると、カウンタが増えていきますねー。
わーい。

** 大事な注意

とりあえず、今日の発表会のためだけにリリースをしてので、
以下のような制限事項があります。


groongaはリポジトリをgithubで公開しています。
http://github.com/groonga/groonga/tree/master
ぜひぜひパッチを！give me patch！！！

- テストリリースのため、APIドキュメントがまったくないです。

APIドキュメントは今必死に書いてます。
memcachedバイナリプロトコル互換APIで遊んでみてね。

- Macでテストしてないっす。kqueueサポートしてないっす。

現在、Linux(amd64)で開発・テストしています。
Macでもテストしてません。
また、kqueueサポートもしていないため、多重度が高いテストをMacやFreeBSDで行うと遅いと思います。

- 言語バインディングがありません。

現在、各種LL言語のためのバインディングがありません。
バインディング大募集中です！

- exptimeは保存されていますが、処理は行っていません。

Tokyo Tyrant等のmemcached互換実装では、flagsやexptimeを無視するものがあります。
groongaでは、flagsやexptimeをきちんと保存しています。
が、exptimeの処理を書いていないので、expireが行われません。
きちんと保存はしているので、あとはexpireの処理の実装が必要です。

とりあえずは、getの際にexptimeを越えていたら値を消す、
的な実装からつけていきたいところです。

- ファイルフォーマットが変わるかもしれません。

テストリリースなので、ファイルフォーマット変わるかもしれません。

- MySQLから使えません。

現在、MySQL経由では利用できません。
これについては、現在…ゲホゲホ　闇の組織がー！！　ぐふっ
というわけで、ご期待あれ。

** まとめ

- Sennaの次世代バージョンのgroongaをテストリリースしました！
- githubでソース公開してます！
- みんなのツッコミ待ってます！

</body>
</day>
<day date="2009-02-22" title="">
<body>
*groonga_db_api_type*[kvs][groonga]groongaデータベースAPIについて概説

groongaにおいて、データベースを扱うためのAPI群について概説します。
groongaは、RDBMSでいうところのテーブル・カラムを扱うAPIを提供します。
テーブルは、内部的にハッシュテーブルもしくはパトリシアトライが基となっています。


それぞれの要素について、どのような操作が行えるかを説明します。

** grn_hash

grn_hashとは、以下の操作を行えるAPI群です。

- 任意のkeyを指定したデータ保存
- 任意のkeyを指定したデータ取得
- 任意のkeyを指定したデータ削除
- カーソルを用いた、全てのkey/valueの取得・設定・削除

内部の実装は、ハッシュテーブルです。
メモリ上に作成することも、ファイルとして作成することもできます。


いわゆる*DBMと同等のことができます。
Tokyo CabinetでいうところのTCHDBですね。

** grn_pat

grn_patとは、以下の操作を行えるAPI群です。

- 任意のkeyを指定したデータ保存
- 任意のkeyを指定したデータ取得
- 任意のkeyを指定したデータ削除
- 与えられた文字列内で、最左最長一致するkeyの検索
- 与えられた文字列と前方一致するkey群の検索
- 与えられた文字列と後方一致するkey群の検索
- 与えられた文字列と前方最長一致検索するkeyの検索
- カーソルを用いた、全てのkey/valueの取得・設定・削除

内部の実装は、パトリシアトライです。
メモリ上に作成することも、ファイルとして作成することもできます。


groongaは、全文検索を目的に開発されています。
Sennaの時代から、全文検索の語彙表を表現するためにパトリシアトライを用いてきました。
ハッシュテーブルとは異なり、keyの前方一致検索や前方最長一致検索を行うことができます。


内部的に半無限文字列をパトリシアトライに追加するオプションがあります。
このオプションを付与すると、
keyの前方一致検索だけでなく、後方一致検索を行うことができます。


「与えられた文字列内で、最左最長一致するkeyの検索」を用いることによって、
はてなキーワードの自動リンク付与のような処理を行うことができます。

** grn_table/grn_column

grn_tableとは、以下の操作を行えるAPI群です。

- 任意のkeyを指定したレコード検索・作成・削除
- 任意のkeyと前方最長一致するレコード検索・作成・削除(オプションによる)
- カーソルを用いた、全てのレコードの取得・削除
- 任意の名前と型を持ったgrn_columnの作成・取得
- 任意のカラム値を用いたソート・上位n件取得
- 任意の外部参照テーブルのカラム値（多重参照も可）を用いたソート・上位n件取得
- 任意の関数を用いたソート・上位n件取得
- 任意のカラム値を用いたグループ化
- 任意の外部参照テーブルのカラム値（多重参照も可）を用いたグループ化
- 任意の関数を用いたグループ化
- テーブル間での和・差テーブルの取得
- 全データの削除
- レコード数の取得

grn_tableの実装は、grn_hashもしくはgrn_patを拡張する形で行われています。
メモリ上に作成することも、ファイルとして作成することもできます。


grn_columnとは、以下の操作を行えるAPI群です。

- 値の取得・設定
- grn_columnが転置インデックス型の場合、インデックスの更新
- 属するgrn_tableの取得

grn_columnの内部の実装は、固定長配列・可変長配列・grn_table・転置インデックスのいずれかです。
メモリ上に作成することも、ファイルとして作成することもできます。
たとえば、ファイルとして作成されたgrn_tableに、メモリ上の一時的なgrn_columnを付与することができます。


grn_tableとgrn_columnについては、
RDBMSでのテーブルを想定していただければイメージがわきやすいと思います。


テーブルにおいて、１つのレコードはただ１つの値を保持することができます(key-value store的な感じ)。
また、１つのレコードは、複数のカラム(grn_col)を持つことができます(RDBMS的な感じ）。
key-value storeの１つのkey-valueペアに対して、カラムが複数個くっついているイメージを持ってください。


grn_hashやgrn_patとは異なり、
ソートやグループ化、集合演算などを行うことができます。
その場合、任意のカラムや関数でソートやグループ化を行えます。


grn_columnは、他のgrn_tableのレコードへの参照保持することができます。
いわゆる外部参照キーを保持するイメージを持ってください。
外部参照先のgrn_tableのカラムを用いたソートやグループ化を高速に行うことができます。


grn_columnは、転置インデックスを保持することができます。
転置インデックスを用いて、高速な全文検索を行うことができます。
詳細については、別稿で述べます。


groongaのmemcachedバイナリプロトコル互換実装では、
flagsやexptime、casなどの値を保存するためにgrn_columnを用いています。

** サンプルコード

groongaパッケージのexampleディレクトリに、kv.cというソースコードがあります。
これは、上記のそれぞれのAPIを用いて、
key-valueの保存・参照を100万回行うサンプルプログラムです。


kvを起動すると、以下のようにusageが表示されます。
&gt;|sh|
usage: kv dbpath [put|get] [col|table|hash|pat|ql] [value_size]
||&lt;

第１引数に、データベース名を指定します。
第２引数に、データの保存ならput、データの取得ならgetを指定します。getの場合には、１度putを行う必要があります。
第３引数に、groongaが持つAPIセットのうちどのAPIセットを用いるかを指定します。
第４引数に、保存する値のサイズを指定します。


このサンプルコードを読めば、
上記の構成部品についてごく基本的な使い方をマスターすることができます。

** まとめ

groongaでは、さまざまなデータ構造に対応したAPIセットがあります。
- keyをハッシュテーブルで保持するgrn_hash
- keyをパトリシアトライで保持するgrn_pat
- keyをgrn_hash/grn_patで保持し、任意個のgrn_columnを持つことができるgrn_table
これらのデータ構造は、メモリ上に作成することもファイルに保存することも可能です。


grn_hashは気軽なkey-value storeとして用いることができます。
grn_patはkeyの前方一致・後方一致が行えるkey-value storeとして用いることができます。
grn_tableは、grn_hash/grn_patを拡張したものです。ただ１つしか持てないvalueに加えて、複数個のcolumnを保持することができます。
またgrn_tableは、grn_hashやgrn_patにないソートやグループ化機能を備えます。

</body>
</day>
<day date="2009-04-17" title="このように かせぐのだ">
<body>
*nicopedia_hardware*ニコニコ大百科のアーキテクチャ

&gt;&gt;
Twitter
mongrelP: @tasukuchan グニャラくーん、ニコ百の鯖がEeePCという話が持ち上がってますがただの監視用ですよね（しんぱいそうなめでみている）
- http://twitter.com/mongrelP/status/1524183917
&lt;&lt;
ニコニコ大百科のアーキテクチャについてメモしておきます。


本当は、このネタでRuby Kaigiに申し込もうと思ったけど、すっかり忘れていたのでエントリを起こしておきます。Rubyあんま関係なかったし。

** 全てのリクエストを受付、セッション情報も保持するEeePC

*** 次世代サーバプラットフォーム EeePC

ニコニコ大百科宛ての全てのリクエストは、全てEeePCに送られます。
実物の写真を載せておきます。
[f:id:tasukuchan:20080422203014j:image]
EeePCは2台稼動しており、１台はホットスタンバイです。


EeePCは、SSDとUPSを備えた次世代サーバプラットフォームです。
メンテナンスの際、キーボードやモニタをつなぐ必要もありません。
また、各種Linuxの導入情報が充実しています。
メモリ増設などを行っても５万未満で調達を行うことができます。
消耗品として扱えるため、減価償却の必要もありません。
ラック内占有体積も少ないです。
というわけで、サーバにオススメだと思うのですが、あんまり受け入れられないんですよねー…

&gt;|aa|
　　　　　　　　＿＿＿_
　　　　　　 ／ ＼　　／＼　キリッ
.　　　　　／　（ー） 　（ー）＼
　　　　／　　 ⌒（__人__）⌒ ＼　　　＜EeePCは、SSDとUPSを備えた
　　　　|　　 　　　|r┬-|　　　　| 　　　　 次世代サーバプラットフォーム
　　　　 ＼　　　　 `ー'´　　 ／

　 　 　ｸｽｸｽ　 ＿＿＿
　　　　　　　／　　 　 　＼
　　　　 　／ノ　　＼　　 u. ＼　！？
　　　　／ （●） 　（●） 　　　＼
　　　　|　 　（__人__）　 　　u. 　 |
　 　　 ＼　u.｀ ⌒´　 　　　　／
　　　　ノ　　　　　　　　　　　＼
　 ／´　　　　　　　　　　　　 　　ヽ
　|　　　　ｌ　　　　　　　　　　　　　　＼
　ヽ　　　 -一''''''&quot;~~｀`'ー--､　　　-一'''''''ー-､.
　　ヽ ＿＿＿＿(⌒)(⌒)⌒)　)　　(⌒＿(⌒)⌒)⌒))

ﾜﾗﾜﾗ
　　　　　 　　　＿＿＿_
　　　　　　　／　　 　 　＼！？？
　　　　 　／　　u　　 ノ　　＼
　　　　／ 　　　　 u （●）　　＼
　　　　|　 　　　　　　　（__人__）|
　 　　 ＼　　　　u　　　.｀ ⌒／
　　　　ノ　　　　　　　　　　　＼
　 ／´　　　　　　　　　　　　 　　ヽ
　|　　　　ｌ　　　　　　　　　　　　　　＼
　ヽ　　　 -一''''''&quot;~~｀`'ー--､　　　-一'''''''ー-､.
　　ヽ ＿＿＿＿(⌒)(⌒)⌒)　)　　(⌒＿(⌒)⌒)⌒))
||&lt;

注意点として、
- メモリは増設する。
- LANも必要ならばUSBで増設する。
- ログ関係はほとんど止めておく。
- ext3だったら、noatimeを設定しておく。
- 液晶のバックライトは消しておく。
- どうしてもファイルに何かを一時的に書き出したいときには、tmpfsを使う。
って感じでしょうか。
あとは、最近リリースされたLinuxディストﾘビューションならすんなり導入できるでしょう。


このEeePCは、PLANEXのUSB LANコネクタを付けてあります。
Amazonで3,000円くらいで買いました。
メモリも、EeePC用のテキトーなのを数千円で買いました。

*** EeePC上で動いているサービス

- LVSフロント(keepalived)
- repcached

LVSフロントが後ろに控えるWebサーバにリクエストを振り分けます。Webサーバとは、USB LANケーブルを通じて内側のLAN経由で接続されます。また、Webサーバはセッション情報をはじめとしたデータを、memcached互換サーバであるrepcachedに保存します。


repcachedは、弊社で開発しているgroongaに置き換え予定です。groongaでは、memcachedのバイナリプロトコル互換のサーバ機能を有します。(casとかflagsも対応する)

** 安価だがバランスのとれたPowerEdge 860

*** Webサーバ

Webサーバは、DellのPowerEdge 860です。もちろん10万円未満で調達したものです。10万超えると、消耗品じゃなくなって減価償却必要になっちゃうからです。OSは、Debianのtestingです。Webサーバは３台存在し、LVSフロントからリクエストが振り分けられます。

httpdは、lighttpd 1.4.19です。mod_nicodhという、ニコニコ大百科専用のlighttpdモジュールを組み込んでいます。mod_nicodhは、C言語で簡単なアクセスハンドリングなどを行うモジュールです。ニコニコミュニティ掲示板の認証なども、mod_nicodhで処理します。


ニコニコ大百科は、ほとんどのコンテンツが静的になるように注意深く設計してあります。動的な要素が欲しい場合でも、Cookie/AJAXなどを用いてローカルで動的にページを生成できるようにします。たとえば、ニコニコ大百科の右メニューはログイン時・非ログイン時で表示が変わりますが、これはCookieの「login」という値を見てブラウザ側が動的に生成します。


静的なページは、ファイルとして保存されています。lighttpdは、そのファイルをそのまま返したり、gzip圧縮したりして返します。非常にシンプルで、かつパフォーマンスも悪くありません。


静的なページがファイルで保存されていなかったり、全体が動的なページがリクエストされたりした場合には、mod_nicodhで判定を行い、FastCGI経由でRubyに処理を渡します。FastCGIは、プロセスがWebサーバと分かれるのでハンドルしやすいです。ただ、プロセスが複数立ち上がるので、mmapなどをして論理空間・物理空間の浪費を防ぐ必要があります。


ニコニコ大百科はRubyを使って構築した、と言うと「Railsなんですね～」とよく言われます。しかし、Railsは使っていません。ニコニコ大百科専用に、テキトーなフレームワークを書き起こしました。


FastCGIのハンドリング部分は、fcgiモジュールを使って書いています。また、Ruby標準のcgiモジュールは使わず、桑田誠さんがリライトしたcgi/cgiextモジュールを改造して使っています。テンプレートエンジンは、桑田誠さんのErubisを使っています。O/Rマッパは、テーブルごとに手で書いています。今であれば、FastCGIのハンドリング部分はRackを使いたいところですね。


ニコニコ大百科には、キーワードの自動リンク機能があります。以下のエントリにもあるように、Sennaは高速にキーワードの自動リンクを生成することができます。
- http://d.hatena.ne.jp/hsiomaneki/20051216
キーワードリンクを行うRubyモジュールをC言語で書いて、利用しています。


静的なコンテンツで、キャッシュファイルが存在しない場合には、それを生成します。次回から、同じコンテンツに対するリクエストはlighttpdのみで処理されます。


Rubyを用いたのは、当時Rubyをほとんど使ってなかったので復習のために使いたかったのと、同僚にRubyが書ける人がいたからです。Rubyは遅いといわれますが、実用上困っていません。遅い部分は、C言語で書いたlighttpdのモジュールやRubyのモジュールが処理しているためです。むしろ、Hpricotのメモリリークや、libxml-rubyのメモリリークやバグや仕様変更、libmemcachedのRubyバインディングの挙動に悩まされました。今だったらNokogiri使えっていう話なんでしょうけど…


ちなみに、webサーバの種別は、Apache Baseball Armyにしてあります。
- http://toolbar.netcraft.com/site_report?url=http://dic.nicovideo.jp

** DBサーバ

DBサーバも、DellのPowerEdge 860です。もちろん10万円未満で調達したものです。OSは、FreeBSD 7.0です。弊社では、多くのデータベースサーバがFreeBSDで稼動しています。RDBMSは、MySQL 5.0 + Tritonnを使っています。マスタ１台＋スレーブ１台の構成です。


SELECTを含めた、ほとんどのリクエストは「マスタ」に対して行われます。Webサーバでは、生成したhtmlなどを静的なファイルでキャッシュするため、マスタに対してリクエストを送ってもパフォーマンス上全く差し支えないし、レプリケーション遅れを気にする必要がないからです。


スレーブのみに、全文検索用のインデックスを付与したテーブルが存在します。スレーブは、主に全文検索クエリ用に用いています。


「データベースにリクエストが届いた時点で負け」という思想で、データベースについては目立ったチューニングは行っていません。負荷的にはまだ余裕があります。

*** APIサーバ

APIサーバは、libeventのevhttpというWebサーバ機構を用いて全てC言語で書かれています。Sennaとlibmysqlにリンクしています。APIサーバは、物理的にはWebサーバと同じです。ポートを分けています。


ニコニコ動画のwatchページでは、動画タイトルとタグの横に「百」「？」というマークが出ます。動画のタイトル/タグそれぞれ１つずつに対して存在するかどうか確認するリクエストが行われます。ニコ動のwatchページのPVの数倍のリクエストが来ることになります。


その他、ニコニコ動画の検索ページに大百科の記事のサマリーを出したり、ニコニコ市場に大百科の記事を出したり、さまざまなAPIを実装しています。


昔のバージョンのlibeventでは、evhttpが高負荷時に挙動が怪しかったです。というわけで、evhttpを使って書いたWebサーバに対して、リバースプロキシとしてVarnishでキャッシュを行っています。Varnishでは、これまたC言語を用いて拡張を行っています。


Varnishのキャッシュサーバは２台存在します。これもまた、DellのPowerEdge 860で、OSはFreeBSDです。キャッシュサーバは同僚に書かせました。


現在のevhttpは高負荷時の挙動が安定してきているので、直にリクエストを受けてもいいのかもしれません。

** まとめ

EeePCすばらしい。

</body>
<comments>
<comment>
<username>グニャラー</username>
<body>液晶のバックライトってどうやってオフにするのでしょうか？</body>
<timestamp>1239968609</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>EeePCユーテリティみたいなものを入れたら、&lt;br&gt;EeePCのショートカットキーがLinuxでも有効となります。&lt;br&gt;それでショートカットキーを用いて液晶のバックライトの照度を最低まで下げました。&lt;br&gt;オフにはなってないかもしれないですねー…</body>
<timestamp>1239972890</timestamp>
</comment>
<comment>
<username>棒</username>
<body>ｅｅｅｂｏｘあたりで代用できないのかしら</body>
<timestamp>1239983338</timestamp>
</comment>
<comment>
<username>kouithi</username>
<body>&gt;ｅｅｅｂｏｘあたりで代用できないのかしら&lt;br&gt;それだと&lt;br&gt;&gt;SSDとUPSを備えた次世代サーバプラットフォームです。&lt;br&gt;&gt;メンテナンスの際、キーボードやモニタをつなぐ必要もありません。&lt;br&gt;のSSD以外が１つで完結しないから魅力半分以下じゃない？</body>
<timestamp>1239990990</timestamp>
</comment>
<comment>
<username>hdknr</username>
<body>ちなみに単体で１０万円下っても、クラスタ構成等にしてトータルで１０万超えると税務署チェックが入ったときに説明を求められて課税対象になったりします。&lt;br&gt;案件を分解して経費扱いさせる、たとえばメモリは別案件とか、そうゆうことを沢山やっていると目を付けられますので注意。&lt;br&gt;&lt;br&gt;ということは些細なことなほど面白い記事で参考にさせてもらいました。</body>
<timestamp>1239999957</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>&gt;棒さん、kouithiさん&lt;br&gt;UPSは結構でかいですねー。&lt;br&gt;keepalivedの機能で、「全サーバが死んだ場合にのみリクエストを返すサーバ」が設定できるのです。&lt;br&gt;そこで、「メンテ中」表示ができるので、ラック全停電した場合にもちょっと安心ですね。僕は設定してないですが…&lt;br&gt;&lt;br&gt;&gt;hdknrさん&lt;br&gt;実は、WebサーバはEeePC経由でなくてもそれぞれリクエストが受けられるようにしてあります。というわけで、システムとして一体ではなく、独立していると主張しますよ！主張が通らなくても、トータルの金額が少ないのはキャッシュ的に嬉しいですしね。&lt;br&gt;&lt;br&gt;メモリについては、サーバが動作する最低限度の容量はサーバ側と一体として処理しています。それに対するメモリ追加は、耐用年数を延ばすわけでもなく、サーバ間のメモリ差し替えもよくやっているので、別案件として主張しますよ！とはいえ、最近メモリやっすいので、トータルで10万未満の調達も普通に可能ですね。もちろん、H/Wベンダーにメモリをつけさせず、自分で買って差し込むわけですが…&lt;br&gt;&lt;br&gt;少額資産の損金算入もトータル300万円では厳しいですし、リース税制もクソになったし、ほんとサーバの調達がやりづらい世の中になりました。30万円だったらかなり自由度のある調達が出来るんですが…だいたい、サーバの償却期間が長すぎですYO！</body>
<timestamp>1240013791</timestamp>
</comment>
<comment>
<username>素朴な疑問です</username>
<body>EeePCでlvsってどのくらいパフォーマンス出るんでしょうか。&lt;br&gt;100Mくらいは余裕だったりするのかな。。。</body>
<timestamp>1243236208</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>現在全くパフォーマンスに困っていないです。&lt;br&gt;もちろん、DSRというのも影響しているでしょう。&lt;br&gt;NATだとやはり厳しいのではないでしょうか。</body>
<timestamp>1243240041</timestamp>
</comment>
</comments>
</day>
<day date="2009-04-19" title="">
<body>
*request_for_libmemcached_binary_protocol_document*[libmemcached]【指令】Brianを捕獲せよ
ほぼ私信のようなエントリです。


やっと以下のバグが直って、個人的にはほっとしているところのlibmemcachedです。
- http://lists.tangent.org/pipermail/libmemcached/2009-February/000621.html
- http://lists.tangent.org/pipermail/libmemcached/2009-April/000698.html
- http://cvs.tangent.org/libmemcached/rev/d4f1e92c62b7
libmemcached-rubyはMEMCACHED_BEHAVIOR_CACHE_LOOKUPSフラグを「有効」にしていて、このパッチなしでは動かないという悲しい状態でした。libmemcachedもlibmemcached-rubyもどっちもどっちという感じですが…


今、Groongaのmemcached binary protocol互換サーバのデバッグ中です。だけれども、binary protocolのドキュメントだけでは実装ができません。
- [http://github.com/dustin/memcached/blob/f6e095954c73052827b7af8cccdd3637f40887fa/doc/protocol-binary.xml:title=2009/4/19時点でのmemcached binary protocol]
たとえば、キーがすでに存在してaddが失敗したときに、「Key exists」を返せばいいのか、「Invalid arguments」を返せばいいのか、「Item not stored」を返せばいいのかこのドキュメントだけではわかりません。


こういうときは、実装を見るのもよいですが、元となったテキストプロトコルを参照するとよいでしょう。
- [http://github.com/dustin/memcached/blob/f6e095954c73052827b7af8cccdd3637f40887fa/doc/protocol.txt:title=2009/4/19時点でのmemcached text protocol]
を見ると…
&gt;&gt;
- &quot;NOT_STORED\r\n&quot; to indicate the data was not stored, but notbecause of an error. This normally means that thecondition for an &quot;add&quot; or a &quot;replace&quot; command wasn't met.
&lt;&lt;
ふむ。ということは、キーがすでに存在してaddが失敗したときには「Item not stored」を返すとよさそうですね。
さっそく実装、そしてlibmemcachedを使ってテスト…　むむむ、プロトコルエラー！？なんでだなんでだ。

&gt;|c|
    switch (header.response.status) 
    {
    case PROTOCOL_BINARY_RESPONSE_KEY_ENOENT:
      rc= MEMCACHED_NOTFOUND;
      break;
    case PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS:
      rc= MEMCACHED_DATA_EXISTS;
      break;
    case PROTOCOL_BINARY_RESPONSE_E2BIG:
    case PROTOCOL_BINARY_RESPONSE_EINVAL:
    case PROTOCOL_BINARY_RESPONSE_NOT_STORED:
    case PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND:
    case PROTOCOL_BINARY_RESPONSE_ENOMEM:
    default:
      /* @todo fix the error mappings */
      rc= MEMCACHED_PROTOCOL_ERROR;
      break;
    }
||&lt;
んぺぺ！（舌を噛み切る


というわけで、今週MySQL U.C.にいく人はBrianを捕まえてここの部分を実装させてきてください！
絶対だぞ！
あとbinary protocolのドキュメントに、どんなエラーのときどんなコードを返せばいいかを記述するのもヨロシク。

</body>
</day>
<day date="2009-04-23" title="">
<body>
*windows_64bit_atomic_store*[技術メモ]Windows@i386でのatomic 64bit store
Windows@i386でのatomic 64bit store。_InterlockedCompareExchange64を使ったほうがいいのかな？だいたい、ちゃんと動作してるのかしら…ツッコミ求む。

&gt;|c|
#include &lt;windows.h&gt;
#include &lt;stdio.h&gt;

#define int32_t INT32
#define uint32_t UINT32
#define int64_t INT64
#define uint64_t UINT64

void
atomic_set_64bit(uint64_t *p, uint64_t v)
{
  uint32_t v1, v2;
  v1 = *(((uint32_t *)&amp;(v))+0);
  v2 = *(((uint32_t *)&amp;(v))+1);
  __asm {
  _set_loop:
    mov esi, p
    mov ebx, v1
    mov ecx, v2
    mov eax, dword ptr [esi]
    mov edx, dword ptr [esi + 4]
    lock cmpxchg8b qword ptr [esi]
    jnz  _set_loop
  }
}

int
main(int argc, char *argv)
{
  uint64_t i = 0x0123456789abcdefULL, j = 0xfedcba9876543210ULL;
  printf(&quot;%08llx\n&quot;, i);
  printf(&quot;%08llx\n&quot;, j);
  atomic_set_64bit(&amp;i, j);
  printf(&quot;%08llx\n&quot;, i);
}
||&lt;

</body>
</day>
<day date="2009-05-09" title="">
<body>
*notify_events_to_many_clients*[技術メモ][xmpp][amqp]ニコニコ大百科アラートでのメッセージキュー設計について。

お風呂でメモ。

** 要件

ニコニコ大百科で起こったイベントのうち、
ユーザが指定したものだけを通知するクライアントアプリケーションを作成したい。

なお、すべてのイベントは漏れなくユーザに伝わることとし、
すべてのユーザに送られる情報は同一とする。
イベントが起こった「直後」にイベントが通知されることが望ましい。
計算負荷・ネットワーク負荷が軽い方法がよい。
サーバ側はRuby、クライアント側はPythonを用いる。

さて、どのような通信方式でデータをやりとりすべきか。

** RSS/ATOM

まず考えられるのが、RSSやATOMなどの採用。クライアント側でもライブラリなどがあってお手軽。
- feedのエントリ数が固定だと、pollingの間にすべてのイベントが流れてしまう恐れがある。
- よって、feedのエントリ数は可変とし、一定の時間内に起こったイベントを全て記録することとする。
- 一定の時間内に起こったイベントを全て記録すると、feed内のエントリ数が増える。
- そうしたらファイルサイズが大きくなってネットワーク負荷がかかる。
- 漏れをなくす方法として、たとえばTwitterのpublic timeline取得APIのsince_idパラメータのように、取得したい情報の位置をクライアントから与えてもらう方法がある。
- でも、Twitterはそのパラメータを無視するようになった。スケールしないんだろう。キャッシュやりにくいしね。
- そもそも、RSS/ATOMはblogのエントリなどの更新頻度が少ないもの向けじゃね？
- メリットとしては、staticなファイルにできるってところかな。

** XMPP PubSub

- ぎゃー、この資料に上と同じようなこと書いてあった、勉強不足。[http://en.oreilly.com/oscon2008/public/schedule/detail/4359:title]
- スライド中の「Polling sucks.」気持ちはよくわかる。
- XMPP PubSubは、上記のような目的のために設計されたようだ。内部はxmlで、実体メッセージのxmlはatom推奨。でもどんなxmlでも入れていい。
- たぶん、atomだとライブラリの支援を受けることができて楽そうだ。
- senderのコード。イベントループくるくる。
&gt;|ruby|
while true
  event = queue.get_next_event()
  #loop
  Subscriptions.find_by_node(:all,
    event.pubsub_nodes ).each do |subscriber|
    #send new message
    subscriber.send_xmpp_message(event.to_xmpp)
  end
end
||&lt;
- スケールするかどうか要検証。あとは実装の充実度。

** AMQP

- AMQPでも同様のことはできるはず。
- だんだん話がでかくなってきたぞ…
- AS3ライブラリがある！これは便利だなー。
- わはは、どこもかしこも「Polling sucks!」[http://d.hatena.ne.jp/Voluntas/20090502/1241268352:title]
- 上記スライドでのXMPPとAMQPの比較表、ACKは今回の用途ではいらない。binaryのほうがいいよなー。Addr/Authもいらない。
- やっぱ要検証
- AMQP + XMPPという選択肢もあるらしい。RabbitMQにejabberdを埋め込むとかなんとか。

** 結論

XMPPとAMQPで実際にサーバ・クライアント書いてみるかー…
話ふくらみすぎだよな。
AMQPはちょっとオーバースペック感がしている。

</body>
<comments>
<comment>
<username>Voluntas</username>
<body>mod_rabbitter ってのがある &lt;- ejabberd 実装。</body>
<timestamp>1241882349</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>https://dev.rabbitmq.com/wiki/RabbiterFederation&lt;br&gt;これか！読んでみる！</body>
<timestamp>1241886956</timestamp>
</comment>
</comments>
</day>
<day date="2009-05-19" title="">
<body>
*web_db_key_value*Web+DB press Vol.50にkey-valueストアの記事を書きました！
いまさらながら告知ですが、WEB+DB press Vol.50にて、key-valueストア入門という記事を執筆させていただきました。やっほーい！皆さんも、Software Design 2009年5月号が売り切れたくらいのイキオイで、100冊くらい買うといいと思います。
[asin:477413838X:detail]

ま、執筆中は毎日「死にたい、あー死にたい」とつぶやいていたので、日本語やらコードやらが怪しい部分なども多いと思います。第１章で書きたいことが書けたので満足しています。決して、「WEB+DB press Vol.50ではGit特集がよかったです！」というBlogを発見しては伏目がちになる毎日を暮らしていませんよ…


さて、上記記事でも紹介したgroongaですが、memcachedのバイナリプロトコルをほとんど実装してみました。casも実装してみたのですが、もともとのmemcachedのcasがいい加減な実装なので、あまり実用性ない気がしています。むしろcasは削除したい気が満々です。


memcachedのバイナリプロトコルを実装してみて分かったのですが、libmemcachedには初期値付きのincr/decrを行う関数が無かったんです…というわけで、libmemcachedに初期値付きincr/decrを実現するmemcached_increment_with_initial/memcached_decrement_with_initialという関数を追加してみました。


現在リリースされているlibmemcached 0.29では、
上記関数にてバイナリプロトコルを用いた初期値付のincr/decrが出来るようになっています。
ぜひgroongaと併せて試してみてください。
</body>
</day>
<day date="2009-08-10" title="">
<body>
*senna_autolink_ruby*[技術メモ]はてなのようなキーワードリンクをRubyで付与する実例
&gt;&gt;
hrjn: はてなとかニコニコ大百科のキーワードリンクってどうやってんのかなぁ。正規表現だと死んでしまうので、専用のパーサ作ったりしてんのかな。
- http://twitter.com/hrjn/status/2926407314
&lt;&lt;
ニコニコ大百科では、キーワードリンク専用のRubyモジュールを書いています。「SENNA」というキーワードがあったら、「senna」とか「ＳＥＮＮＡ」とかにリンクさせたりとかもできます。


Senna 1.1.4 + Ruby 1.8.6で、UTF-8専用ですが、使いたい人はどぞー。あと、いつもどおりいい加減な書き方なので気をつけて。とりあえず、以下のtest.rb, wordsym.rb, extconf.rb, sen_np_api.cをどこかに放りこんで
&gt;|sh|
ruby extconf.rb
make
sudo make install
ruby test.rb
||&lt;
的な操作で動くはず！だと期待したい。なぜなら公開のためにコードをいじったから。


ライセンスはRuby's Licenseで。

test.rb
&gt;|ruby|
$KCODE = 'u'
require 'sen_np_api'
require 'wordsym'

sym = WordSym.new('test.sym')
sym.add('リンク')
sym.add('リンクの冒険')
sym.add('冒険')
sym.add('ｶﾞｯ')
sym.add('ＭＵＴＥＫＩ')
puts sym.add_link_str('muTEki リンクの冒険 ミリバール ガッ', 'http://dic.nicovideo.jp/a/', '_blank')
sym.close
||&lt;

wordsym.rb
&gt;|ruby|
$KCODE = 'u'
require 'sen_np_api'
require 'uri'
require 'cgi'

class WordSym
  def initialize(path)
    @sym = SennaNP::Sym.open(path)
    raise NicoDHException, '(内部エラー)記事名を保持するSymが作成できません。' unless @sym
  end

  def add(word)
    nword = SennaNP::normalize(word, 0)
    @sym.add(nword)
  end

  def del(word)
    nword = SennaNP::normalize(word, 0)
    @sym.del(nword)
  end

  def count_array(word_array)
    word_array.map {|word|
      nword = SennaNP::normalize(word, 0)
      @sym.at(nword).nil? ? 0 : 1
    }
  end

  def prefix_search(word)
    @sym.prefix_search(word)
  end

  def add_link_tag(ret, str, url_prefix, title, target = nil)
    ret &lt;&lt; '&lt;a href=&quot;' &lt;&lt;
        url_prefix &lt;&lt; # don't escape
        CGI.escape(title).gsub('+', '%20') &lt;&lt;
        '&quot;&gt;' &lt;&lt;
        CGI.escapeHTML(str) &lt;&lt;
        '&lt;/a&gt;'
  end

  def add_link_str(str, url_prefix = '', target = nil)
    pos = 0
    prestart = preend = -1
    ret = []

    @sym.scan(str) {|word, start, length|
      # puts &quot;word: #{word}, start: #{start}, length: #{length}&quot;
      next if start == prestart or start &lt; preend
      ret &lt;&lt; str[pos...start]
      pos = start + length
      prev = add_link_tag(ret, str[start...pos], url_prefix, word, target)
      prestart = start
      preend = start + length
    }
    return ret.join('')
  end

  def getall
    @sym.getall
  end

  def close
    @sym.close
    @sym = nil
  end
end
||&lt;

extconf.rb
&gt;|ruby|
require 'mkmf'
dir_config(&quot;senna&quot;, `senna-cfg --prefix`.chomp)
$LOCAL_LIBS &lt;&lt; ' ' + `senna-cfg --libs`.chomp
$CFLAGS &lt;&lt; ' ' + `senna-cfg --cflags`.chomp
if have_header(&quot;senna.h&quot;) and have_library(&quot;senna&quot;, &quot;sen_init&quot;)
  create_makefile(&quot;sen_np_api&quot;)
end
||&lt;

sen_np_api.c
&gt;|c|
#include &lt;ruby.h&gt;
#include &lt;senna/senna.h&gt;

typedef struct _sen_np {
  sen_sym *sym;
} sen_np;

#define KEY_BUF_SIZE 2048
VALUE normalize(VALUE self, VALUE rb_str, VALUE rb_flags)
{
  VALUE r;

  char *str;
  long str_len;
  int flags;
  int buf_size;
  char nstrbuf[KEY_BUF_SIZE];

  str = rb_str2cstr(rb_str, &amp;str_len);
  flags = NUM2INT(rb_flags);

  buf_size = sen_str_normalize(str, (unsigned int)str_len, sen_enc_utf8, flags, nstrbuf, KEY_BUF_SIZE);
  if (buf_size &gt; KEY_BUF_SIZE) {
    return Qnil;
  }

  r = rb_str_new(nstrbuf, buf_size);
  return r;
}

VALUE sym_close(VALUE self) {
  sen_np *np;

  Data_Get_Struct(self, sen_np, np);
  sen_sym_close(np-&gt;sym);
  np-&gt;sym = NULL;

  return Qtrue;
}

void free_np(sen_np *np) {
  sen_sym_close(np-&gt;sym);
  np-&gt;sym = NULL;
}

VALUE sym_open(VALUE self, VALUE rb_path) {
  VALUE obj;
  sen_np *np;
  sen_sym *sym;
  char *path;

  path = StringValuePtr(rb_path);
  if (!(sym = sen_sym_open(path))) {
    if (!(sym = sen_sym_create(path, 0, SEN_INDEX_NORMALIZE, sen_enc_utf8))) {
      return Qnil;
    }
  }
  obj = Data_Make_Struct(self, sen_np, NULL, free_np, np);
  np-&gt;sym = sym;
  return obj;
}

VALUE sym_add(VALUE self, VALUE rb_key) {
  sen_id sym_id;
  const char *key;
  sen_np *np;

  Data_Get_Struct(self, sen_np, np);
  key = StringValuePtr(rb_key);

  if (!(sym_id = sen_sym_get(np-&gt;sym, key))) {
    return Qnil;
  }
  return INT2NUM(sym_id);
}

VALUE sym_at(VALUE self, VALUE rb_key) {
  sen_id sym_id;
  const char *key;
  sen_np *np;

  Data_Get_Struct(self, sen_np, np);
  key = StringValuePtr(rb_key);

  if (!(sym_id = sen_sym_at(np-&gt;sym, key))) {
    return Qnil;
  }
  return INT2NUM(sym_id);
}

VALUE sym_del(VALUE self, VALUE rb_key) {
  sen_rc rc;
  const char *key;
  sen_np *np;

  Data_Get_Struct(self, sen_np, np);
  key = StringValuePtr(rb_key);

  rc = sen_sym_del(np-&gt;sym, key);
  return INT2NUM(rc);
}

VALUE sym_prefix_search(VALUE self, VALUE rb_key) {
  sen_set *set;
  sen_np *np;
  const char *key;
  sen_set_cursor *cur;
  VALUE ret = Qnil;

  Data_Get_Struct(self, sen_np, np);
  key = StringValuePtr(rb_key);

  if ((set = sen_sym_prefix_search(np-&gt;sym, key))) {
    if ((cur = sen_set_cursor_open(set))) {
      unsigned int set_size;
      sen_set_info(set, NULL, NULL, &amp;set_size);
      if ((ret = rb_ary_new2((long)set_size))) {
        long i;
        for (i = 0; i &lt; set_size; i++) {
          VALUE rb_str;
          sen_id *key_id;
          char buf[SEN_SYM_MAX_KEY_SIZE];

          sen_set_cursor_next(cur, (void **)&amp;key_id, NULL);
          sen_sym_key(np-&gt;sym, *key_id, buf, SEN_SYM_MAX_KEY_SIZE);
          if ((rb_str = rb_str_new2(buf))) {
            rb_ary_store(ret, i, rb_str);
          }
        }
      }
      sen_set_cursor_close(cur);
    }
    sen_set_close(set);
  }
  return ret;
}

#define SH_SIZE 32
VALUE sym_scan(VALUE self, VALUE rb_str) {
  int found;
  int offset;
  const char *str;
  const char *rest;
  long str_len;
  sen_np *np;
  sen_sym_scan_hit sh[SH_SIZE];
  char buf[KEY_BUF_SIZE];

  Data_Get_Struct(self, sen_np, np);
  str_len = RSTRING(rb_str)-&gt;len;
  str = StringValuePtr(rb_str);
  offset = 0;
  do {
    int i;
    if (!(found = sen_sym_scan(np-&gt;sym, str, (unsigned int)str_len, sh, SH_SIZE, &amp;rest))) {
      break;
    }
    for (i = 0; i &lt; found; i++) {
      int key_len;
      key_len = sen_sym_key(np-&gt;sym, sh[i].id, buf, KEY_BUF_SIZE);
      if (key_len &gt; 0) {
        VALUE args =
          rb_ary_new3(3, rb_str_new(buf, key_len - 1), INT2NUM(sh[i].offset + offset), INT2NUM(sh[i].length));
        rb_yield(args);
      }
    }
    offset += (rest - str);
    str_len -= (rest - str);
    str = rest;
  } while (rest &lt; (str + str_len));

  return Qtrue;
}

VALUE sym_getall(VALUE self) {
  VALUE ret;
  sen_np *np;
  unsigned int nrec;
  sen_id id = SEN_SYM_NIL;

  Data_Get_Struct(self, sen_np, np);
  if (!sen_sym_info(np-&gt;sym, NULL, NULL, NULL, &amp;nrec, NULL)) {
    if ((ret = rb_ary_new2(nrec))) {
      int i = 0;
      while ((id = sen_sym_next(np-&gt;sym, id)) != SEN_SYM_NIL) {
        VALUE rb_str;
        char buf[SEN_SYM_MAX_KEY_SIZE];

        if (sen_sym_key(np-&gt;sym, id, buf, SEN_SYM_MAX_KEY_SIZE)) {
          if ((rb_str = rb_str_new2(buf))) {
            rb_ary_store(ret, i++, rb_str);
          }
        }
      }
      return ret;
    }
  }
  return Qnil;
}

void
void_sen_fin(void) {
  sen_fin();
}

void Init_sen_np_api(void) {
  VALUE rb_cSennaNP;
  VALUE rb_cSennaNP_Sym;

  sen_init();

  rb_cSennaNP = rb_define_class(&quot;SennaNP&quot;, rb_cObject);
  rb_define_singleton_method(rb_cSennaNP, &quot;normalize&quot;, normalize, 2);

  rb_cSennaNP_Sym = rb_define_class_under(rb_cSennaNP, &quot;Sym&quot;, rb_cObject);
  rb_define_singleton_method(rb_cSennaNP_Sym, &quot;open&quot;, sym_open, 1);
  rb_define_method(rb_cSennaNP_Sym, &quot;close&quot;, sym_close, 0);
  rb_define_method(rb_cSennaNP_Sym, &quot;add&quot;, sym_add, 1);
  rb_define_method(rb_cSennaNP_Sym, &quot;at&quot;, sym_at, 1);
  rb_define_method(rb_cSennaNP_Sym, &quot;del&quot;, sym_del, 1);
  rb_define_method(rb_cSennaNP_Sym, &quot;scan&quot;, sym_scan, 1);
  rb_define_method(rb_cSennaNP_Sym, &quot;prefix_search&quot;, sym_prefix_search, 1);
  rb_define_method(rb_cSennaNP_Sym, &quot;getall&quot;, sym_getall, 0);
  atexit(void_sen_fin);
}
||&lt;

</body>
<comments>
<comment>
<username>hy</username>
<body>wktkの問い合わせフォームがおかしかったのでコメントから失礼します。&lt;br&gt;&lt;br&gt;はじめまして。&lt;br&gt;今、仕事で自動リンクの仕組みを作りたいと考えています。&lt;br&gt;色々方法を探していたところこのブログにたどり着きました。&lt;br&gt;&lt;br&gt;ぜひともお力を貸していただきたいのですが、、&lt;br&gt;もしご協力いただけるようでしたら追加資料などお送りしますのでご一報いただけますか？&lt;br&gt;&lt;br&gt;よろしくお願いします！</body>
<timestamp>1327135817</timestamp>
</comment>
</comments>
</day>
<day date="2010-04-20" title="">
<body>
*how_to_use_pyftpdlib*[技術メモ]どーしてもFTPサーバを立てなければいけない時に使う、使い捨てFTPサーバ
「最近ブログ書かないんですか？」と客先で聞かれることがあったので、生存確認の意味でブログを書いてみたいと思います。


FTPといえば、最近着目を浴びたプロトコルですね。FTPは、そもそもセキュアではないプロトコルです。追い撃ちをかけるように、FTPクライアントがローカルに保存したパスワードを盗むコンピュータウイルスが発生しました。ローカル保存されたパスワードが盗まれたことについては、FTPというプロトコル自体の責任ではありません。しかし、世間でのFTPの印象は悪くなったようです。僕も、普段はFTPを使うことはありません。


しかし、外部の方とやりとりする場合に、「どどどーーしてもFTPじゃないとヤダー！！！」と言われるケースがあります。そのような場合、FTPサーバを必要なときのみだけ起動するという方法を取ることができます。具体的には、以下のような方法ですね。

- ファイルの受け渡しをしたいという連絡を電話などで受ける。
- ftpサーバを立ち上げる。
- ファイルをftp経由でアップロードしてもらう。
- 完了次第ftpサーバを葬る。

しかし、僕がいままで経験したことのあるFTPサーバの設定は、
意外と面倒くさく、しかも柔軟性に欠けたものしか行えない印象があります。
ちょっとだけのファイルの受け渡しのためだけに、
普段使わない上にメンドクサイFTPサーバ設定をする気なんて起きねー！


このような、生存期間が短いFTPサーバをカンタンに作ることができる、pyftpdlibというものがあります。
Windows/Linux/Mac OS X全てで動作する、ラクラクFTPサーバ作成ライブラリです。
今回は、このpyftpdlibの使い方について簡単な解説を試みます。


なお、実行のためにはプログラミング言語Pythonの実行環境が必要となります。
最近のLinuxディストリビューションだったら標準で実行環境が入っていると思います。

** pyftpdlibのダウンロード

pyftpdlib、何がすごいって「ファイル１個だけのライブラリ」ということです。扱いが楽ですね。


ダウンロードは、
http://code.google.com/p/pyftpdlib/
から行うことができます。


ダウンロードしたパッケージは、インストールする必要がありません。
動作に必要となるのは、解凍して得られる「pyftpdlib-x.x.x/pyftpdlib/ftpserver.py」という１ファイルのみです。
これをカレントディレクトリに置いてください。

** anonymous ftpを立てる

全てのIPアドレスの10021番ポートにて、
/var/ftp/以下のディレクトリをanonymous ftpにて公開するのは、
以下のように書けます。

&gt;|python|
#!/usr/bin/python
import ftpserver

FTP_ROOT = &quot;/var/ftp/&quot;
ADDRESS = (&quot;0.0.0.0&quot;, 10021)

authorizer = ftpserver.DummyAuthorizer()
authorizer.add_anonymous(FTP_ROOT)

ftp_handler = ftpserver.FTPHandler
ftp_handler.authorizer = authorizer

ftpd = ftpserver.FTPServer(ADDRESS, ftp_handler)
ftpd.serve_forever()
||&lt;

ADDRESSというタプルの１つめの要素に&quot;0.0.0.0&quot;を指定すると、
全てのIPアドレスで接続を待ち受けます。
ポート番号が1024未満でFTPサーバを立ち上げたい場合には、管理者権限が必要となります。


認証が存在しないため、anonymousユーザはファイルの読み込みしかできないようになっています。
実際に使うことはあまりないでしょう。

** ユーザを追加する

pyftpdlibは、ユーザを複数追加することができます。ユーザごとにhomeディレクトリや権限を指定することもできます。


FTP_ROOT以下すべてにアクセスできるgunyaというユーザを作成してみましょう。
パスワードは「password_de_gozaimasu」です。


先ほどの、
&gt;|python|
authorizer.add_anonymous(FTP_ROOT)
||&lt;
という１行を、以下のようにadd_user関数に置換しましょう。
&gt;|python|
authorizer.add_user(&quot;gunya&quot;, &quot;password_de_gozaimasu&quot;, FTP_ROOT,
                    perm=&quot;elradfmw&quot;)
||&lt;

add_user関数の引数は、それぞれユーザ名・パスワード・homeディレクトリ・権限です。
権限について、それぞれの文字は以下のような意味を持ちます。
- e: ディレクトリ変更
- l: ファイル一覧の取得
- r: ファイルのダウンロード
- a: 既存のファイルへの追記
- d: ファイルの削除
- f: ファイル名変更
- m: ディレクトリ作成
- w: ファイルのアップロード

今回は、権限が全て付与されたユーザを作成したことになります。


もちろん、add_user関数を複数呼べば、複数のユーザを作成することができます。

** パスワードを動的に変更

pyftpdlibのいいところは、Pythonというプログラミング言語上で動作するということです。
たとえば、起動のたびに違ったパスワードを設定することもできます。


先ほどのユーザ「gunya」のパスワードを、「password」と「年月日」を連結した文字列にしてみましょう。


まずは、日付・時刻を扱うライブラリを読み込みます。
&gt;|python|
import ftpserver
||&lt;
の次の行に、
&gt;|python|
from datetime import datetime
||&lt;
を追記します。


そして、add_user関数の第二引数を変えることにより、「password」と「年月日」を連結した文字列をパスワードとして設定します。
&gt;|python|
authorizer.add_user(&quot;gunya&quot;,
                    &quot;password&quot; + datetime.now().strftime('%Y%m%d'),
                    FTP_ROOT, perm=&quot;elradfmw&quot;)
||&lt;

これで、立ち上がった日付によって違ったパスワードを要求するFTPサーバができました。
もちろん、ユーザIDだって動的に生成することができます。

** 他にも

- FTPS
- 帯域制限
- IPごとの接続制限
- IPv6対応

などと機能盛りだくさんなpyftpdlib。
詳しくは、以下のチュートリアルをご覧ください。
http://code.google.com/p/pyftpdlib/wiki/Tutorial

すぐ殺すFTPサーバに使うのには勿体ないともいえます。ぜひ使ってみてください！


僕が持っているWebカメラには写真を定期的にアップロードしてくれる機能があり、
留守中の猫画像をアップロードしたいな！と思ったにもかかわらず、
その機能が対応しているプロトコルがFTPだけだった、けどFTPサーバなんて立てるのはメンドクセー、
という経緯の副産物のエントリでした。

</body>
<comments>
<comment>
<username>ねづっち</username>
<body>もうそろそろ写真も変更するべき</body>
<timestamp>1271778261</timestamp>
</comment>
<comment>
<username>大事な一人息子</username>
<body>ムムム・・・難解なり( ;∀;)&lt;br&gt;ドヤ顔は変更すべき</body>
<timestamp>1271918787</timestamp>
</comment>
<comment>
<username>とおりすがり</username>
<body>ご存知かと思いますが、FTPSといったものものあります。最近では「ファイルを転送するだけのプロトコル」なんて需要が低いのかも知れませんが、これはこれで便利なものですよ、と書いてみる。&lt;br&gt;静的に「定期的にファイルを送りつける」なんて仕組みはFTP(+VPN)を使ったりすることがあるんじゃないかと。</body>
<timestamp>1272163582</timestamp>
</comment>
<comment>
<username>tasukuchan</username>
<body>&gt;ねづっちさん&lt;br&gt;若いままの写真で！&lt;br&gt;&lt;br&gt;&gt;大事な一人息子&lt;br&gt;簡単なほうのエントリだよ！&lt;br&gt;&lt;br&gt;&gt;とおりすがりさん&lt;br&gt;おそらく「FTPが使えないプロトコルだ」と僕が言っていると思い、それに反論したくなったように見受けられます。そういうつもりのエントリではないのですが。むしろ「FTP使えるぜ」といいたいのです。&lt;br&gt;&lt;br&gt;pyftpdlibはFTPSにも対応していることをエントリ最後に紹介しています。pyftpdlibスゲー。&lt;br&gt;&lt;br&gt;定期的なファイル送信については、rsync+sshなんかの選択肢もあると思います。１ファイルだけならscpで十分ではないでしょうか。VPNの利用もありですね。個々の利用形態に応じてセキュリティや簡便さなどを勘案して決めるべきです。</body>
<timestamp>1272175532</timestamp>
</comment>
</comments>
</day>
<day date="2010-05-06" title="">
<body>
*the_way_to_wktk_inc_for_hikky*[一般]インターネットを活用した、ひきこもりのための株式会社の創り方
この度、株式会社ｗｋｔｋ(ワクテカ)という法人を設立いたしました。


30歳の誕生日に何か面白いコトをやろう！と思い立って、２週間くらいで法人設立にこぎつけました。あ、会社勤めは辞めてないし、辞めるつもりもないですよ、念のため。僕の勤め先は、そういうところに融通が利くところなのです。起業を促進してます。うんうん。


株式会社の作り方と、基本的な開業準備について、「ひきこもり気質でインターネット大好きな人」向けに情報を公開します。


世の中には、会社設立のガイドがあふれかえっています。重複することを書いても仕方ないので、本や他のサイトに載っていない情報を主に書いていきます。情報は2010年4月現在のものです。

** 前提条件

- 一人発起で、代表取締役のみの株式会社を東京都ｘｘ区に設立する。
- .co.jpドメインを取得する。
- 公告方法を官報にしつつ、財務諸表のみをWebページに載せて官報掲載代を節約する。
- 役員報酬は０円とする。
- 設立日を確定させたい。
- 極力お外に出ない。インターネット＞郵便＞対面の順番で手段を選択する。

** 事前準備

- Windows XP以降が動作するパソコン。
- 住民基本台帳カード。
- 住民基本台帳カードを読むことができるカードリーダ。
- スキャナー。
- クレジットカード。

** 定款作成

定款とは、会社の法律みたいなものです。事業目的などが書いてあり、法人設立の際に必要となります。定款は、公証人と呼ばれる人に認証してもらう必要があります。法律なので、あんまりいいかげんなことは書けないわけですね。


定款は通常は紙として認証を受けるわけですが、実はPDFファイルを認証してもらうこともできます。このPDFファイルとして認証される定款を、電子定款と呼びます。実は、電子定款を使うと、設立費用を4万円節約できます。


紙ベースの定款の原本は、「印紙税法」と呼ばれる法律で「課税物件」とされており、収入印紙を貼る必要があります。電子定款の場合には、紙じゃないので上記の法律にあてはまらない、というわけです。


電子定款の認証を受ける場合には、行政書士にお願いしました。「自分で電子定款の認証はできないの？」とツッコミを受けるかもしれません。電子定款の認証を受けるためには、そのためのソフトウェア購入などの初期費用がかかるんです。初期費用は4万円をゆうに超えます。


僕は、以下の「日本電子定款作成センター」にて電子定款の認証をお願いしました。費用は6,000円。
http://e-teikan.org/
東京都・神奈川県の場合には、行政書士の方が公証役場にまで行ってくれます。


上記「日本電子定款作成センター」からリンクされている、「自分でできる会社設立」というサイトの「株式会社設立ナビゲーション」という項目に、株式会社の設立についてひととおりの手続が書いてあります。
http://kaisya-tsukuro.net/
本エントリでは重複した記述を避け、上記サイトに書いていない情報を記します。

** .co.jpドメインの取得

会社を作るんだったら、.co.jpドメインを取得したいですよね。value-domainで安くかつ手軽に.co.jpドメインを取得することができます。
&lt;a href=&quot;http://www.value-domain.com/?ref=tasukuchan&quot;&gt;http://www.value-domain.com/&lt;/a&gt;
なぜここでドメインの話が出るのか、その理由は次の項目で明らかになります。


.co.jpドメインは、設立登記の前に取得することができます。
http://internet.watch.impress.co.jp/cda/news/2003/09/16/461.html
しかし、value-domainでは設立日が現在の日付以降でないと、申し込みを受け付けてくれません。


よって、設立に必要な書類をすべて準備し終わり、実際に法務局に書類を提出する日の朝に登録を行いましょう。


ドメイン取得代金について、厳密には定款で定めておかなければ法人の負担とすることができません。が、value-domainでのドメイン代程度だったら、法人が負担することで問題ないと考えます。面倒なので、僕は個人負担としました。

** 公告方法を官報にしつつ、財務諸表のみをWebページに載せて官報掲載代を節約する

先ほどの「自分でできる会社設立」のテンプレートのまま法人を設立すると、公告を行う際に官報を通じなければいけません。株式会社は、その公共性から毎年決算の内容について公告を行わなければいけません。官報での決算公告にかかる費用は、１回およそ６万円です。


定款で、公告方法を「電子公告」とすることもできます。電子公告では、自社のWebページに公告する内容を掲示するだけでOKです。んじゃ、公告方法を電子公告にしたほうがいい、と思いますよね。


実は、「電子公告をちゃんとしているかどうかチェックする機関」というものがありまして、そこにお金を払ってチェックしてもらわないと、電子公告をしたことにならないのです。これはこれで結構いいお値段がします。


たとえば、日本公告調査という会社では、１件75,000円にて「チェック」をしてくれます。
http://www.n-koukoku.com/
公告する内容の長さが長い場合には電子公告のほうが有利ですが、短い内容であれば官報のほうが安くなります。やはり、官報で決算公告したほうがよいのでしょうか。


実は、決算公告だけに限り、上記のチェックが必要ないのです。ラッキー。よって、「チェックが必要な通常の公告は官報でいいけど、決算公告だけ電子公告したい」ということになります。


決算公告だけ電子公告を行うためには、決算公告を行うためのURLを登記する必要があります。この登記、設立登記とは別に行うと、なんと30,000円もの費用がかかります。.co.jpドメインも取得できたことですし、設立時にURLも登記してしまいましょう。


URLを登記する場合には、「発起人の決定書」と「登記すべき事項のTXTファイル」の両方にURLなどを記載する必要があります。以下のような記述をしましょう。「登記すべき事項のTXTファイル」での制約から、URLは全角でなければなりません。
&gt;&gt;
１．貸借対照表に係る情報の提供を受けるために必要な事項を次のとおりとする。
ｈｔｔｐ：／／ｗｋｔｋ．ｃｏ．ｊｐ／
&lt;&lt;


実は、多くの株式会社が決算公告をシカトしています。「&lt;a href=&quot;http://www.kessan-koukoku.or.jp/&quot;&gt;NPO決算公告推進協議会&lt;/a&gt;」ってのがあるくらいです。シカトすると「１００万円以下の過料」を取られる可能性があります。気をつけましょう。


また、電子公告の場合には、貸借対照表とその注記を全文掲載しなければなりません。官報の場合は、貸借対照表の要旨のみを掲載すればOKです。紙面に限りがあるからです。貸借対照表の公開に耐えない会社は、官報で決算公告をしたほうがよいでしょう。

** 法務局にいく

僕の場合は、「30歳の誕生日に会社を作りたい！」という野望があったため、法務局をわざわざ訪れました。しかし、設立日なんでどうでもよければ、郵送で済ますこともできます。郵便って便利！


- 提出書類の１枚目の、発起人の名前欄のあたりに、連絡先の携帯電話番号を鉛筆で書いておいてください。
- 銀行通帳のコピーは、出資額の預入（もしくは振込）のところに蛍光ペンでマークしておいてください。


要は、読んで審査する人の気持ちに立って親切にしたほうがいいよ、ってことですね。


法務局に、相談窓口みたいなものがあります。僕は念のため行きました。「電子定款」と「登記すべき内容」が入ったCD-Rの中身を読む設備がないので、あまり意味のあるアドバイスをいただけませんでした。というわけで、直接窓口に書類一式を提出しちゃうのがいいと思います。


なお、電子定款とは「PDFファイル」だけではなく、「鑑定文書」と呼ばれるXMLファイルと、「電子証明書」であるXSLファイルのセットです。よって、この３つのファイルと、あとは「登記すべき内容」が入ったテキストファイルの、計４つのファイルをCD-Rに入れて持っていく必要があります。


け、決してPDFファイルとテキストファイルだけを提出して、電話で呼び出しを食らい、「補正場所」なるトコロで新しいCD-Rを提出したりはしていないぞ。雰囲気的に、職員室に呼び出されたような感じでした…

** 登記情報提供サービスで設立を確認する

通常は、登記の申請をしてから１週間ほどで登記が完了します。実は、いまや登記もインターネットで確認できるんです！それが、「登記情報提供サービス」です。
http://www1.touki.or.jp/
平日の8:30-21:00しか使えないけどな！


このサービス、昔は「いにしえのWebページ」的なデザインだったのですが、トップページがキレイになっています。
[f:id:tasukuchan:20100506180344p:image]


トップページ右には、２つの大きなボタン画像があります。それぞれ「登記情報を請求する」「登記情報と照会番号を請求する」と書いてあります。ここでは「登記情報と照会番号を請求する」をクリックしてください。


すると次の画面に…昔とデザインが変わっとらんやないか！
[f:id:tasukuchan:20100506175109p:image]

「一時利用（クレジットカード即時決済）」のリンクをたどり、各種動作確認後、「動作確認終了 一時利用する」を押してください。


一時利用では、住所氏名生年月日、そしてクレジットカード番号を入力しないと、検索を行うことすらできません。個人情報を入力後、商業・法人登記情報のリンクをクリックし、「法人登記簿請求」の検索を行います。検索時に「照会番号の発行通数」を指定しますが、「1」とでも入れておいてください。


検索結果に自分の会社がない場合には、まだ登記されていません。じっくり待ってください。検索結果の表示までは無料ですが、検索結果をクリックするとその時点で手数料が発生します。


検索結果に、自分の会社が見つかったら、検索結果をクリックして登記情報を請求しましょう。請求した登記情報について、まず照会番号を控えてください。税務署への届出の際に必要となります。また、会社法人等番号も控えておいてください。印鑑カードをスムースに受け取ることができるでしょう。

** 法務局に行って印鑑カードを受け取る。

設立登記が終わっていることを確認したら、法務局に行きましょう。印鑑カードというものを受け取ることができます。


ここで、登記事項証明書のうち履歴事項証明書を最低１部もらっておく必要があります。後で、都税事務所への届出の際に、それをスキャンしたものが必要となるからです。銀行口座も作成するため、印鑑証明書ももらっておきます。

** e-Taxを通じた、税務署への届出

東京都での法人設立の場合、税務署と都税事務所に届出が必要となります。なんと、これらの届出はインターネットでできちゃいます。ひゃっほーい！！！！…と喜びたいところなのですが。


実は、税務署で「設立セット」なる書類セットをもらい、それに記入をして郵送したほうが楽です。が、インターネット大好きな俺としては茨の道でもインターネットで手続きをしたかったのです。


さて、e-Taxの利用にはICカードリーダーと、住民基本台帳カードが必要となります。これらのセットは、個人の確定申告の場合にも使えます。ぜひ購入しておきましょう。住民基本台帳カードの発行時に、電子証明書の発行も一緒にしてもらう必要があります。


パソコンには、ICカードリーダーのドライバを導入したり、政府共用認証局のルート証明書をインストールしたり、さらにe-Taxソフトなるソフトを導入したり…いろいろやっておく必要があります。ここらへんの手続きは複雑なので、詳細はe-Taxサイトを見てください。


準備が終わったら、「開始届出」なるものをWeb経由で提出します。ここで、１点気をつけておく場所があります。「参考事項等（日中の連絡先等）」という入力フォームに、｢オンライン登記情報提供制度｣で取得した登記情報の｢照会番号｣及び｢発行年月日｣を書かなければなりません。フォームには「参考となる事項（日中の連絡先（携帯番号等）など）を入力してください。」とだけ書かれているので、注意していないと書き忘れます。


「開始届出」を行うと、「利用者識別番号」なるものが発行されます。これで、e-Taxソフトにて法人設立届出書等を提出する準備がととのいました（ねづっち）。


e-Taxソフトでは、「追加インストール」という帳票等をダウンロードする機能があります。今回「追加インストール」が必要なのは、「共通」の「プログラム」と「共通帳票」、「申告」の「法人税」の２つです。


e-Taxソフトでは、４つの書類を提出します。法人設立届出書・青色申告の承認申請書・給与支払事務所等の開設届出書・源泉所得税の納期の承認に関する申請書の４つです。


必ず提出しなければならないのは、法人設立届出書です。青色申告のメリットを得たいのであれば、青色申告の承認申請書を出しましょう。今回は従業員が０、役員報酬が０なので、給与支払事務所等の開設届出書・源泉所得税の納期の承認に関する申請書は提出する必要がないように思えます。


もし、これらの書類を提出しなかった場合を考えます。外形的に見れば、給与支払事務所等の開設届出書をサボって、さらに源泉所得税を払っていない法人に見えてしまいます。「０円の役員報酬だから、払う源泉所得税はないんじゃい」ということを明確にしておく必要があるわけですね。よって、給与支払事務所等の開設届出書・源泉所得税の納期の承認に関する申請書も提出します。


法人設立届出書について、添付書類が必要となります。それは、定款の写しです。厳密には、設立時の貸借対照表や、株主名簿の写しなどが必要ですが、１人が全額金銭出資をしている法人については不要なようです。設立趣意書とかは確実にイラネ。


定款なら電子定款のPDFファイルがあるぜ、これ添付して送れば楽だなゲヘヘ…と思うことなかれ。実は、e-Taxでは電子定款のファイルを添付書類とすることができません。「電子定款のPDFファイルを印刷して別途郵送」する必要があります。さらに、「添付書類を別途郵送しますよ」という内容の電子書類である「電子申告及び申請・届出による添付書類送付書」を電子証明して送る必要があります。うげげ。PDFとかアップロードできるようにせんかい！といいたいところですが、しょうがないので郵送しましょう。

** eLTAXを通じた、都税事務所への届出

e-Taxのパチモノみたいな名前ですが、こちらは地方税のシステムです。利用者の立場からすれば、システムがなんで別なんだよ…と言いたくなりますが、ガマンしてください。


ちなみに、紙ベースの設立届出書では、税務署提出用の書類を書くと、自動的に都税事務所への提出書類が完成するのです。なぜなら、カーボンコピーになってるから。ぐおお…


eLTAXを利用するためには、「利用届出」というものをWebサイト上のJavaアプレットから提出する必要があります。届出を出してから利用者IDが発行されるまで、およそ数日かかります。じっくり待ってください。


「利用届出」の提出先は「東京都」です。「東京都ｘｘ区」ではありません。ご注意ください。eLTAXでの「利用届出」フォームでは、「上記の提出先に法人の設立をしていない方は、チェックしてください」という文言とともに、チェックボックスが設けられています。e-Taxとは違い、｢オンライン登記情報提供制度｣の照会番号等は必要ありません。


さて、eLTAXのWebサイトは、Internet Explorer 6もしくは7でしか動作しません。Internet Explorer 8には対応しないぜ！とサイトにはっきり書いてあります。Internet Explorer 8を使っている人はどうすればよいのでしょうか。


IETesterというソフトを使えば問題が解決できます。
http://www.my-debugbar.com/wiki/IETester/HomePage
IETesterは、いろんなバージョンのInternet Explorerを１つのウィンドウ内に表示できるというすばらしいソフトです。なお、eLTAXにて、IETesterで「IE7」のタブを用いた場合には、添付ファイルのアップロードにて不具合が生じました。IETesterでは「IE6」のタブを開いて、そこでeLTAXを利用しましょう。


eLTAXがe-Taxに比べてすばらしいところは、あらゆる書類を添付して送れちゃうところです。「別途郵便で書類を送るよ」という電子文書を電子認証して送付する、とかいうことをしなくていいわけですね。まあ、こっちのほうが普通だと思いますが…


書類添付する場合、注意すべきことがあります。デカいファイルをアップロードすると、Webサーバが無愛想な英語のエラーメッセージを返してくることです。スキャナーが吐き出すPDFなどは、Adobe AcrobatのPDF圧縮機能などを使って圧縮しておきましょう。


登記事項証明書(履歴事項証明書)は、事前にスキャンしてPDFにしておいてください。電子定款は、PDFファイルをそのまま送ることができます。


eLTAXのサイトを見ていると、専用のクライアントソフトであるPCdeskをダウンロードしなければならないような気がします。実は、法人の設立申請の場合には、PCdeskは必要ありません。なぜこんなことをわざわざ書くのか。それは、PCdeskのダウンロードがめんどくさいからです。論より証拠、画像をお見せしましょう。


うひょー！
[f:id:tasukuchan:20100506175108j:image]

** 社会保険事務所・労働基準監督署・公共職業安定署（ハローワーク）には用なし！

役人のみで従業員がおらず、役員賞与の支払いが０のため、社会保険事務所で手続きをする必要はありません。


会社勤めの人がうっかり社会保険事務所で手続きをしてしまうと、「所属選択届」や「２以上事業所勤務届」などを提出しなければならなくなり、大変面倒です。ただし、役員賞与を払う場合には面倒でもちゃんと手続する必要がありますよ。


同様の理由で、労働基準監督署・公共職業安定署への手続きも不要です。こちらは、役員のみで従業員がいない場合であれば手続しなくてよいようです。

** 銀行口座を作成する

ネット大好きならネットバンク！


小額資本金の法人が都市銀行にて口座を開設するのは、一種の「すわりの悪さ」を感じます。ネット通販で買った自転車を近所の自転車で防犯登録するような感じ。では、どこの銀行で口座を開設すればよいのでしょうか。


ジャパンネット銀行はどうでしょうか。
&lt;!-- TG-Affiliate Banner Space --&gt;
&lt;A href=&quot;http://ad2.trafficgate.net/t/r/156/258/168131_186921/&quot; target=&quot;_blank&quot;&gt;&lt;IMG src=&quot;http://srv2.trafficgate.net/t/b/156/258/168131_186921/&quot; border=&quot;0&quot;&gt;&lt;/A&gt;
&lt;!-- /TG-Affiliate Banner Space --&gt;
ジャパンネット銀行で法人口座を開設する場合には、会社のWebページ内容を審査されます。株式会社ｗｋｔｋみたいにふざけた内容のサイトだと、まず審査に落ちるでしょう。


楽天銀行（旧イーバンク銀行）の場合はどうでしょうか。
&lt;!-- TG-Affiliate Banner Space --&gt;
&lt;A href=&quot;http://ad2.trafficgate.net/t/r/61/791/168131_186921/&quot; target=&quot;_blank&quot;&gt;&lt;IMG src=&quot;http://srv2.trafficgate.net/t/b/61/791/168131_186921/&quot; border=&quot;0&quot;&gt;&lt;/A&gt;
&lt;!-- /TG-Affiliate Banner Space --&gt;
楽天銀行では、他の銀行で法人口座を開いたあとでないと口座を開設できません。


住信SBIネット銀行では、口座開設の手続きがネットと郵便だけで済みます。ひゃっほーい！今回は、住信SBIネット銀行で口座を作成しました。


さて、銀行口座開設の際には、「印鑑証明書」「登記事項証明書」に加えて、「定款の写し」が必要となります。電子定款のPDFを印刷したものは、厳密には「定款の写し」ではありません。しかし、多くの場合はPDFを印刷したもので代用できるようです。「ホンモノの電子定款の写し」を手に入れるのはちょっと面倒なのですが、本稿では触れません。


「日本電子定款作成センター」で電子定款を作成した場合には、「ホンモノの電子定款の写し」が２部ついてきました。大事に使いましょう。

** FAX番号を取得する

家にFAXがあると邪魔ですが、法人ではFAX番号が必要となるケースも多くあります。D-FAXという便利なサービスを利用しましょう。このサービスを利用すると、FAX番号を取得することができます。FAXが送られると、その内容をTIFFファイルとして電子メールで送付してくれます。PDFを希望する場合には、オプションが必要です。
http://www.d-fax.ne.jp/


ただし、FAXが必須となるASKULの登録において、D-FAXの番号は登録することができません。残念ですね…
&lt;a href=&quot;http://ck.jp.ap.valuecommerce.com/servlet/referral?sid=2472501&amp;pid=879173239&quot; target=&quot;_blank&quot; &gt;&lt;img src=&quot;http://ad.jp.ap.valuecommerce.com/servlet/gifbanner?sid=2472501&amp;pid=879173239&quot; height=&quot;60&quot; width=&quot;468&quot; border=&quot;0&quot;&gt;&lt;/a&gt;

** 会社のロゴを作る。

Lancersというサイトで、コンペ形式にてロゴの作成を依頼することができます。
&lt;!-- Lancers Code START --&gt;
&lt;a href=&quot;http://www.lancers.jp/affiliate/track?id=20212&amp;link=%2F&quot; target=&quot;_blank&quot;&gt;http://www.lancers.jp/&lt;/a&gt;
&lt;!-- Lancers Code END --&gt;


株式会社ｗｋｔｋのロゴ製作は以下のように依頼しました。商標登録を行う予定がないので、既存のフォントの使用を許可しています。商標登録する予定があれば、その旨を依頼内容に書いておく必要があります。
&lt;!-- Lancers Code START --&gt;
&lt;a href=&quot;http://www.lancers.jp/affiliate/track?id=20212&amp;link=%2Fwork%2Fdetail%2F5490&quot; target=&quot;_blank&quot;&gt;http://www.lancers.jp/work/detail/5490&lt;/a&gt;
&lt;!-- Lancers Code END --&gt;


力作ロゴが多数提案されました。下記のリンクからご覧になれます。
&lt;!-- Lancers Code START --&gt;
&lt;a href=&quot;http://www.lancers.jp/affiliate/track?id=20212&amp;link=%2Fwork%2Fproposals%2F5490&quot; target=&quot;_blank&quot;&gt;http://www.lancers.jp/work/proposals/5490&lt;/a&gt;
&lt;!-- Lancers Code END --&gt;


freefrogさんの提案と、
[f:id:tasukuchan:20100412101403j:image:small:left]
[f:id:tasukuchan:20100412101421j:image:small]


inazumaさんの提案と、
[f:id:tasukuchan:20100506174042j:image:small:left]
[f:id:tasukuchan:20100506174043j:image:small]


２つの提案で悩んだ結果、freefrogさんの提案を採用させていただきました。


ロゴのデザインをお願いする場合、１点気をつけるところがあります。著作権のうち、「著作者人格権」は譲渡できません。「著作者人格権」のひとつに「同一性保持権」があります。ロゴを使う場合に、用途に応じて少し改変して利用したい場合があるでしょう。このような改変が、同一性保持権によって禁止させる可能性があります。「少し改変して使うかもしれませんが、よろしいでしょうか」とたずね、ロゴデザイナの方から了解をとっておくとよいでしょう。


Lancersでは、仕事を頼むだけではなく、仕事を請け負うこともできます。iPhoneアプリの開発のお仕事など、プログラマ向けの案件も出ていました。プログラマやデザイナの方、登録どうでしょうか？

** 名刺を作る

法人で何かの契約を行う場合、名刺の提示が求められるケースがあります。携帯電話の契約や、greeの開発者アカウントの登録などですね。会社のロゴも作成してもらったことですし、それを活かした名刺を作成してみましょう。


名刺は、SuperPrintにて注文しました。会員登録時に、紹介コード「82944392」を入力すると、ずっと注文が5%引きになるので、入力を忘れずに。
http://www.superprint.jp/


さて、SuperPrintでは、Adobe Illustratorのaiファイルで名刺データを入稿する必要があります。ここで、Illustratorを持っていない方に朗報があります。


Adobe Adobe Creative Suite 4 Web Standardの購入をオススメします。なんとCS5 Web 「Premium」に無料でアップグレードできます。つまり、PhotoshopとIllustratorがタダで手に入っちゃうわけです。下記のリンク先から、「Amazon.co.jpの詳細ページへ」のボタンをクリックすると購入できるわけですが、一応補足。Amazon.co.jpのページに遷移したあと、右中ほどにある「こちらからも買えますよ」コーナーにある、「Amazon.co.jp」の「ショッピングカードに入れる」ボタンを押して購入するのがエントリ執筆時点では一番安価でした。


[asin:B001JJCKEU:detail]


名刺作成の際に気をつけることは、以下の点です。
- 文字はアウトライン化しておく必要があります。
- カラーモードは、RGBではなくCYMKにする必要があります。TMNTじゃないよ！
- 黒1色のモノクロの場合には、色のうちC/Y/Mを念のため0%にしておいてください。ディスプレイでの見た目は変わりませんが…
- カラー印刷の場合には、黒はC/Y/M 30%、K100%くらいにしておいてください。深みが出るらしいよ！


Illustratorの操作に慣れていなくても、それなりの見た目の名刺を作ることができる「ある操作」があります。それは、「文字と文字の間の詰め」を調整する操作です。テキスト編集中にAltキーを押しながらカーソルキーの左右を押すことにより、文字の詰めを調整できます。適当なフォントを選んで、文字を入力し、詰めを調整すれば、それなりの見た目の名刺が出来上がるのではないでしょうか。

** 会計ソフトで仕訳する。

会計ソフトとして、弥生会計を導入しました。


まず、発起人が立て替えた設立費用を仕訳しましょう。


設立費という勘定科目があるので、定款の認証にかかる仕訳などはすべて借方をコレにします。貸方は「未払金」でよいでしょう。
&gt;&gt;
（設立費） xxx,xxx　/　（未払金） xxx,xxx
&lt;&lt;

たまった「未払金」について、会社から発起人に銀行振込をして処理するもよし、
&gt;&gt;
（未払金）    xxx,xxx　/　（普通預金） xxx,xxx
 (支払手数料）    xxx　/　（普通預金）     xxx
&lt;&lt;
役員からの借入金として振り替えてもよいでしょう。
&gt;&gt;
（未払金） xxx,xxx　/　（役員借入金） xxx,xxx
&lt;&lt;
役員からの借入金について、借用書を書く必要はありません。気になる人は書いておくとよいでしょう。ただし、借用書を作る場合には収入印紙が必要となります。


設立費は会計的には繰延資産といって、５年間かけてジワジワと費用処理する必要があります（繰延資産は、勘定科目が３文字のは５年償却、５文字のは３年、という会計受験知識もありますねー…）。税法上は１年目で全額費用処理してOKなようです。
&gt;&gt;
（営業外費用） xxx,xxx　/　（設立費） xxx,xxx
&lt;&lt;
また、ずっと設立費を費用処理せずに、法人が黒字となった時点で費用処理することもできます。


今回は、設立費を繰延資産として扱い、費用処理しませんでした。どうせ売上たたないしね。


新設法人は、何の届出もしていなければ「消費税の免税事業者」となります。この場合、全ての仕訳は「税込」の額で行います。実は、儲からない法人を設立する場合には、消費税の課税事業者になったほうがお得です。払った消費税を還付してもらえるからです。今回は、届出が面倒だったので免税事業者のままにしました。


仕訳について、簿記の３級程度の知識はもっておくと便利です。ついでに資格取得はいかがでしょうか。簿記は楽しいですよ。この本１冊しっかり勉強すれば、簿記３級は取得できるでしょう。
[asin:4844998854:detail]

** 必要なお金の総額

必要なお金の総額について気になる方がいるようなので、まとめてみました。筆記用具代・法務局への交通費・プリンタ代・インターネット通信費・パソコン代・ICカードリーダ代などは除きます。


法人設立登記までは、最低206,000円 + 資本金 + 代表印代 のお金が必要となります。資本金1円、代表印が1,280円だと、207,281円かかるわけですね。
|*項目       |*金額    |
|電子定款認証| 56,000円|
|登録免許税  |150,000円|
|代表印      |  1,280円|
|資本金      |      1円|

法人登記以降でかけたお金は、以下のとおりです。
|*項目                         |*金額   |
|登記情報の照会番号取得        |   465円|
|印鑑証明書@500円x1            |   500円|
|履歴事項証明書@1,000円x1      | 1,000円|
|定款の写しを税務署に送る切手代|    80円|
|.co.jpドメイン代(1年)         | 3,000円|
|ロゴデザイン代                |50,000円|
|名刺 モノクロ 100枚           |   900円|
|D-FAX                         | 2,625円|

というわけで、ロゴのデザインに50,000円もかけても、&lt;span style=&quot;font-weight:bold;&quot;&gt;総額265,851円&lt;/span&gt;で株式会社を作ることができました((代表印代が抜けていたので、追記しました。))。

** まとめ

以上のように、法務局に２回行くだけで株式会社を設立できます。設立日にこだわりがなければ、法務局に１回行くだけで済みます。事業の開始に必要な準備も、インターネット上で行えます。


ぜひ皆々さまのお役に立ちますことを。


ちなみに、法人名の最初の候補は「株式会社蟹工船」でした。もっと前向きな名前をつけようよ、と上司に諭されたのでした。そりゃそーだよな！
イブセマスジー！！
</body>
<comments>
<comment>
<username>コモリ</username>
<body>ヒキが多いことはよくわかった分かった</body>
<timestamp>1273207612</timestamp>
</comment>
<comment>
<username>人気</username>
<body>殆ど家にいて出来てしまいますね。大変参考になります！！</body>
<timestamp>1273211204</timestamp>
</comment>
<comment>
<username>元フリーター</username>
<body>本気で会社設立を目指しているので大変ためになるサイトをありがとうございました。奇しくも僕も明日30歳になります（笑）</body>
<timestamp>1273217182</timestamp>
</comment>
<comment>
<username>tannma76</username>
<body>ふむふむ。大変参考になります。</body>
<timestamp>1273224029</timestamp>
</comment>
<comment>
<username>ぬこ</username>
<body>無理にひきこもりを結び付けないでくださいよ、ハードル高すぎｗひきこもりからならまず個人事業主からの方が現実的。でも参考にさせていただきます。</body>
<timestamp>1273227015</timestamp>
</comment>
<comment>
<username>大丈夫か？</username>
<body>会社って作るときだけじゃなく年度末には毎年最低でも７万円かかるけど大丈夫？&lt;br&gt;あと年度末会計報告も結構めんどくさくて大変なんだけど大丈夫？</body>
<timestamp>1273240609</timestamp>
</comment>
<comment>
<username>bero</username>
<body>設立前のco.jpドメイン取得(仮登録)はできますが、&lt;br&gt;(JPRSが登記情報提供サービスで確認できないので?)&lt;br&gt;申請者の住民票等の書類が必要になります。&lt;br&gt;&lt;br&gt;面倒なのでvalue-domainでは扱っていないのでしょう。&lt;br&gt;&lt;br&gt;別の業者だと(書類を扱う人件費ぶん？)割高になりますが扱ってるところもあります&lt;br&gt;http://21-domain.com/?m=10,15&lt;br&gt;とか。（３月頃の時点では仮登録では最安だったと思う）</body>
<timestamp>1273266060</timestamp>
</comment>
<comment>
<username>スナフキン</username>
<body>会社設立を考えているので、大変参考になりました。&lt;br&gt;特に電子定款は、あきらめていたので、非常に助かります。</body>
<timestamp>1273309737</timestamp>
</comment>
<comment>
<username>fmaction</username>
<body>おぉーこれは参考になりますねー。&lt;br&gt;良いまとめをありがとうございます。</body>
<timestamp>1273323870</timestamp>
</comment>
<comment>
<username>つん</username>
<body>電子定款は、acrobatの体験版（30日間無料）で作れるよ。自分で公証役場に行く必要はあるけど。&lt;br&gt;設立登記もオンライン申請したほうが楽です。結局、紙で提出する書類もあったりして法務局に行かなきゃならない。&lt;br&gt;登記情報提供サービスで設立を確認する必要はあるのかな。申請したら完了日を教えてくれたけど。&lt;br&gt;FAXは、ひかり電話+FAXお知らせメール+追加番号が便利で安い。</body>
<timestamp>1274269325</timestamp>
</comment>
<comment>
<username>ゆっけ</username>
<body>電子認証でVistaも7も使えるようになってるよ。&lt;br&gt;http://www.moj.go.jp/MINJI/minji06_00028.html&lt;br&gt;&lt;br&gt;しかしMacは・・・</body>
<timestamp>1303644213</timestamp>
</comment>
</comments>
</day>
<day date="2010-05-16" title="">
<body>
*lets_use_ftrace_with_trace_cmd*[技術メモ]ftraceとtrace-cmdを使って、Linux Kernelのイベントログを簡単に取得する

Linuxには、ftraceというトレーサがあります。
カーネル内の全関数タイムスタンプつき呼び出し履歴などを、それなりに高速に取得できます。


詳しくは、@ITにある以下の記事をどうぞ。
http://www.atmarkit.co.jp/flinux/rensai/watch2008/watch10a.html
http://www.atmarkit.co.jp/flinux/rensai/watch2009/watch03a.html


ためしにftraceを使ってみました。2010年5月時点にて、Debianでの使用方法をメモします。


Debianの現行testingにおいて、kernelのftrace機能は無効とされています。ftrace機能が有効かどうかは、以下の操作で確認できます。
&gt;||
# mount -t debugfs nodev /sys/kernel/debug
# cat /sys/kernel/debug/tracing/available_tracers
blk sched_switch initcall nop
||&lt;

まず、debugfsをマウントします。そこにあるtracing/available_tracersというエントリが、現在利用できるトレーサの一覧です。tracing/available_tracersの内容に、「function_graph」「function」などがなければ、ftraceが有効とされていないkernelです。

** Debianでftraceを有効としたkernelをビルドする

Debianでのカーネルコンパイル方法ですが、インターネットで情報を探すとさまざまな情報があります。毎回調べるのですが、毎回やり方を忘れますし、どの流儀がよりよいのかも理解していません。


今回はmake-kpkgを使いました。CONCURRENCY_LEVEL環境変数を設定し、8並列でmakeします。設定はmenuconfigで行います。

&gt;||
&gt; sudo aptitude install kernel-package linux-source-2.6.32 libncurses5-dev
&gt; mkdir kernel-2.6.32-ftrace
&gt; cd kernel-2.6.32-ftrace
&gt; tar xvfj /usr/src/linux-source-2.6.32.tar.bz2
&gt; cd linux-source-2.6.32
&gt; CONCURRENCY_LEVEL=8 fakeroot make-kpkg --append-to-version=-9-amd64 --revision ftrace1 \
--initrd --config menuconfig kernel_image kernel_headers
||&lt;

menuconfigでは、以下の２つの項目を選択します。
&gt;||
Kernel hacking
 -&gt; Tracers
   -&gt; Kernel Function Tracer
   -&gt; Trace syscalls
||&lt;

「Kernel hacking -&gt; Compile the kernel with debug info」も必要があれば選択しましょう。


以上の操作で、カレントのいっこ上のディレクトリに、カーネルパッケージが生成されます。あとはこれをdpkg -iで導入するだけ…でいいと思ったのですが、ちょっと詰まりました。


カーネルパッケージのインストールの際、通常であればinitrdが自動的に作成されます。ですが、現在のtestingでは、initrdを作ってくれません((/etc/kernel/postinst.d/initramfs-toolsを見ると、「kernel-package passes an extra arg; hack to not run under kernel-package」っていう部分で止められちゃう))。今回は、明示的にupdate-initramfsを呼び出すことによって問題を回避しました。GRUBの設定もしてくれます。

&gt;||
&gt; cd ..
&gt; su
# dpkg -i linux-image-2.6.32-ftrace_2.6.32_amd64.deb
# update-initramfs -c -t -k 2.6.32-9-amd64
# dpkg-reconfigure linux-image-2.6.32-9-amd64
||&lt;

再起動後、uname -rなどで新しいカーネルが使われていることを確認します。


再度debugfsをマウントして、tracing/available_tracersをチェックします。function_graphとfunctionが入っていることがわかります。
&gt;||
# mount -t debugfs nodev /sys/kernel/debug
# cat /sys/kernel/debug/tracing/available_tracers
blk function_graph function sched_switch initcall nop
||&lt;


ftraceをする場合には、debugfsのエントリをよく参照・更新します。/etc/fstabに以下のようなエントリを追加して自動的にマウントさせましょう。
&gt;||
debugfs       /sys/kernel/debug          debugfs defaults        0       0
||&lt;

さらに、/debugにシンボリックリンクを張るとよいでしょう。
&gt;||
ln -s /sys/kernel/debug /debug
||&lt;

** trace-cmdの導入

ftraceに関する操作のほとんどは、debugfs経由で行うことができます。しかし、これがまた少々めんどくさいのです。echo 1 &gt; /debug/tracing/misc的なことを頻繁に行う必要があるからです。その操作を支援するツールがあります。trace-cmdです。ネットワーク経由で、別のマシンのトレースなども取れちゃいます。


trace-cmdはバージョン1.0が先月にリリースされたばかりです。usageを見たらまだバージョンが0.7ってなっているのはご愛嬌。導入は簡単です。

&gt;||
&gt; git clone git://git.kernel.org/pub/scm/linux/kernel/git/rostedt/trace-cmd.git trace-cmd-stable-v1
&gt; cd trace-cmd-stable-v1
&gt; make
&gt; sudo make install
||&lt;

ためしに、trace-cmdでどのようなトレースができるのか一覧を表示してみましょう。trace-cmdにlistというコマンドを与えると、event/plugin/optionの一覧を表示できます。
&gt;||
&gt; trace-cmd list
events:
skb:kfree_skb
skb:skb_copy_datagram_iovec
syscalls:sys_enter_socket
syscalls:sys_exit_socket
...

plugins:
blk function_graph function sched_switch initcall nop

options:
print-parent
nosym-offset
...
||&lt;

eventは、ftraceで取得できるイベントです。凡例は「イベント種別:イベント名」です。pluginは、available_tracersと同じようです。optionsは、トレースする際に指定できる各種オプション一覧です。「no」を頭につけることで、オプションをオフにすることができます。


** プロファイリングする(草薙葵)

プロファイリングをする前に、/proc/sys/kernel/ftrace_enabledが1であることを確認します。なっていなければ、sysctl kernel.ftrace_enabled=1などをしておいてください。この値の設定については、trace-cmdでは扱ってくれないようです。


まずは、lsを実行した場合に、どのようなカーネル関数が呼ばれ、なおかつ実行時間はどうか、ということを調べたいとしましょう。

&gt;||
# trace-cmd record -p function_graph ls
||&lt;

上記のコマンドを実行すると、カレントディレクトリに「trace.dat」というファイルが作成されます。ここに、トレースされたデータが入っています。ファイル名を指定したい場合には、「-o」オプションを指定しましょう。


トレースされたデータは独自のバイナリ形式です。これを解釈して表示してみましょう。

&gt;||
&gt; trace-cmd report | less
||&lt;

うお、ごっちゃりとデータが出てきました。trace-cmd自身が実行したものも含む、カーネル内のすべてのイベントが表示されるからです。適当にgrepしましょう。

&gt;||
&gt; trace-cmd report | grep -E &quot;^\s+ls-&quot; | less
||&lt;

これで、lsに関わるシステムコールの様子がわかります。function_graphを用いると、カーネル関数のネストがインデントされてわかりやすいです。さらに実行時間まで計算してくれます。実行実行は、ネストしない関数であればfuncgraph_entryの行に、ネストしている関数であればfuncgraph_exitの行に書かれます。


trace-cmd自身にもフィルタ機能が存在します。たとえば、funcgraph_exitにて、1,000,000ナノ秒(1,000マイクロ秒)以上実行にかかったものだけを抽出したい場合には、以下のようにします。

&gt;||
trace-cmd report -F &quot;funcgraph_exit:(rettime - calltime) &gt; 1000000&quot; | less
||&lt;

…と書いたものの、実はこのフィルタの文法、よくわかっていません。


条件式では、C言語チックな+ - * / % &gt;&gt; &lt;&lt; &amp; | ^ ~ == != &lt; &gt; &lt;= &gt;=に加え、正規表現のマッチとその否定である=~ !~も演算子として使えるようです。条件に使える変数については、trace-cmdのソースコード中にあるget_field_val()関数呼び出しの第4引数を参照してみてください。


「-e」でイベント名を書くことにより、関数呼び出し以外のイベントについても情報を取得することができます。今回は、コンテキストスイッチについてのイベントを取得してみましょう。イベント名は、trace-cmd listのevents項に表示されるものを指定することができます。今回はsched_switchですね。

&gt;||
# trace-cmd record -e sched_switch -p function_graph ls
||&lt;

funcgraph_entry/funcgraph_exitと同じ項に、sched_switchと書かれているのが、コンテキストスイッチのイベントです。どのプロセスからどのプロセスにスイッチしたのかがわかります。

** まとめ

エントリの最後のほうは歯切れ悪いじゃねーか、オイ！とツッコミたくなったでしょう。僕も使い始めたばかりで、まだまだ勝手がよくわかってないからです。


みんなtrace-cmdを試してみて、その情報をblogなどに書いてくれるとうれしいよ、という想いでメモを公開してみました。ftraceの公式なドキュメントは、ソースツリー中Documentation/trace/ftrace.txtです。

</body>
</day>
<day date="2010-10-12" title="">
<body>
*blog_half_moving*[告知]ブログを半移転(?)しました！
このブログで、株式会社ｗｋｔｋという会社を作るエントリを書きました。今のところペーパーカンパニーまっしぐらです。何か活動しなきゃいけないなー、と考え、とりあえずブログを作ってみました。

- [http://blog.wktk.co.jp/:title=グニャラくんのｗｋｔｋ運営日記]

はてなのほうが適している話題については、引き続きこのブログで書いていこうと思います。宜しくお願いいたします。
</body>
</day>
</diary>
