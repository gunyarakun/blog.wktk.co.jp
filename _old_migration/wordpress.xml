<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.5.1" created="2013-02-26 13:21" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>グニャラくんのwktk運営日記</title>
	<link>http://blog.wktk.co.jp</link>
	<description>趣味の会社運営</description>
	<pubDate>Tue, 26 Feb 2013 13:21:56 +0000</pubDate>
	<language>ja</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://blog.wktk.co.jp</wp:base_site_url>
	<wp:base_blog_url>http://blog.wktk.co.jp</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>tasuku</wp:author_login><wp:author_email>blog@wktk.co.jp</wp:author_email><wp:author_display_name><![CDATA[tasuku]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>


	<generator>http://wordpress.org/?v=3.5.1</generator>

	<item>
		<title>株式会社wktk blog開始しました。</title>
		<link>http://blog.wktk.co.jp/archives/1</link>
		<pubDate>Mon, 26 Jul 2010 08:59:31 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=1</guid>
		<description></description>
		<content:encoded><![CDATA[株式会社wktkの公式ブログを開始しました。

<a title="グニャラくんのグニャグニャ備忘録" href="http://d.hatena.ne.jp/tasukuchan/" target="_blank">グニャラくんのグニャグニャ備忘録</a>からエントリの移行を行おうかとも思いました。しかし、はてなからWordPressへの「キレイな」移行は難しいことが分かりました。よって、心機一転新たなスタートを踏み出してみます。

よろしければフィードを購読していただければありがたいです。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1</wp:post_id>
		<wp:post_date>2010-07-26 08:59:31</wp:post_date>
		<wp:post_date_gmt>2010-07-26 08:59:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hello-world</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e5%91%8a%e7%9f%a5"><![CDATA[告知]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[大事な一人息子]]></wp:comment_author>
			<wp:comment_author_email>wanna.be.crazy@gamil.com</wp:comment_author_email>
			<wp:comment_author_url>http://Website</wp:comment_author_url>
			<wp:comment_author_IP>219.162.28.32</wp:comment_author_IP>
			<wp:comment_date>2010-08-09 07:41:55</wp:comment_date>
			<wp:comment_date_gmt>2010-08-08 22:41:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[イイネ！]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>「PHPで高速に携帯ゲートウェイのIPから携帯キャリアを判別する」を更新する</title>
		<link>http://blog.wktk.co.jp/archives/10</link>
		<pubDate>Tue, 27 Jul 2010 04:58:29 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=10</guid>
		<description></description>
		<content:encoded><![CDATA[はてなのブログに書いた「<a href="http://d.hatena.ne.jp/tasukuchan/20071231/1199105717">PHPで高速に携帯ゲートウェイのIPから携帯キャリアを判別する</a>」というエントリがあります。

およそ３年前に書いたスクリプトで、すっかりその存在を忘れていました。

そのスクリプトですが、某社内で使われていたことが判明。調べてみると、現在のhtmlではうまく情報が取得できなくなっていたようです。

スクリプトを更新し、2010/07/27現在で動作するように修正いたしました。
<ul>
	<li><a href="http://svn.coderepos.org/share/lang/python/cidr-mobilejp/trunk/scrape.py" target="_blank">各キャリアの情報からPHPスクリプトを出力する scrape.py</a></li>
	<li><a href="http://svn.coderepos.org/share/lang/python/cidr-mobilejp/trunk/ip2mobile.php" target="_blank">scrape.pyを用いて生成したip2mobile.php</a></li>
</ul>
ご利用の方は更新をお願いいたします。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>10</wp:post_id>
		<wp:post_date>2010-07-27 13:58:29</wp:post_date>
		<wp:post_date_gmt>2010-07-27 04:58:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%8cphp%e3%81%a7%e9%ab%98%e9%80%9f%e3%81%ab%e6%90%ba%e5%b8%af%e3%82%b2%e3%83%bc%e3%83%88%e3%82%a6%e3%82%a7%e3%82%a4%e3%81%aeip%e3%81%8b%e3%82%89%e6%90%ba%e5%b8%af%e3%82%ad%e3%83%a3%e3%83%aa</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="category" nicename="%e6%8a%80%e8%a1%93%e3%83%a1%e3%83%a2"><![CDATA[技術メモ]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>161</wp:comment_id>
			<wp:comment_author><![CDATA[PHP で IP から各携帯キャリアの判定 | sugitaku.net]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.sugitaku.net/blog/2012/04/21/php-%e3%81%a7-ip-%e3%81%8b%e3%82%89%e5%90%84%e6%90%ba%e5%b8%af%e3%82%ad%e3%83%a3%e3%83%aa%e3%82%a2%e3%81%ae%e5%88%a4%e5%ae%9a/</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2012-04-21 11:35:35</wp:comment_date>
			<wp:comment_date_gmt>2012-04-21 02:35:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...]  [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1334975735.5776";s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1348034454.4508";s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"tasuku";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1349761606.6096";s:7:"message";s:45:"tasuku changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"tasuku";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>P-Study SystemでアルクのSVL/SILの問題集を簡単に作成する</title>
		<link>http://blog.wktk.co.jp/archives/15</link>
		<pubDate>Fri, 30 Jul 2010 16:28:56 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=15</guid>
		<description></description>
		<content:encoded><![CDATA[最近、英語を勉強し始めています。

発音については発音専門の英語学校に通っています。語彙力については、P-Study Systemというすばらしい学習ソフトを利用しています。

アルクという会社が、英単語・熟語をレベルごとに分類したSVL 12000/SIL 6000というリストを作成しました。SVLは12レベル、SILは10レベルです。これらを低いレベルからそれぞれ記憶していこうと考えています。

SVLについては、その単語リストを入手する方法が複数存在します。しかし、SILについては熟語リストを入手する方法が少ないです。以前はアルクのWebページに公開されていたようですが、現在では公開されていないようです。

<a href="http://www.takke.jp/wiki/index.php?PSS%2F%B3%D8%BC%AD%CF%BA%A4%AB%A4%E9%A4%CESVL%CC%E4%C2%EA%BD%B8%A4%CE%BA%EE%A4%EA%CA%FD">P-Study Systemで利用できるようなSVL/SILの問題集を作成する方法を紹介するページ</a>があります。「学辞郎」という書籍に附属する辞書ソフトのデータを利用して、問題集を作成するようです。

http://www.amazon.co.jp/%E5%AD%A6%E8%BE%9E%E9%83%8E-%E2%80%95-%E5%8D%98%E8%AA%9E%E3%81%8C%E5%AD%A6%E3%81%B9%E3%82%8B%E8%8B%B1%E5%92%8C%E3%83%BB%E5%92%8C%E8%8B%B1%E8%BE%9E%E6%9B%B8/dp/4757406991

上記のページで紹介されている手順はたいへん煩雑です。よって、超カンタンにSVL/SIL問題集をレベル別に作成する支援ツールを書いてみました。それぞれ1レベルごとに1,000の単語・熟語が入った問題集です。SVLは12レベル、SILは6レベルの問題集が作成されます。
<ul>
	<li><a href="http://tasuku.suenaga.name/pub/english/gakujiro2pss.zip" target="_blank">gakujiro2pssのダウンロード(Windows)</a></li>
</ul>
さて、学辞郎は古い書籍です。学辞郎に内蔵されているPDICという辞書ソフトのバージョンも古いです。英和・和英辞書である「英辞郎」の最新版である第5版を導入すると、新しいPDICである「PDIC/Unicode」が導入されます。

「新しいPDICで学辞郎の辞書を閲覧する」「P-Study System用のSVL/SIL問題集を作成する」という２つのことを行いたいと考えます。
<h3>学辞郎の辞書を、最新のPDIC/Unicodeで利用する方法。</h3>
1. PDICのメニューで、File -&gt; 「辞書設定」を選ぶ。
2. 「2 辞書ファイルの追加・作成」を選び、次へ(N)を押す。
3. 「2 すでにある辞書の追加」を選ぶ。「参照」ボタンを押し、gakujiro.dicファイルを選択する。次へ(N)を押す。
4. 「2 新しい辞書グループへ辞書を登録する」を選ぶ。辞書グループ名は「学辞郎」などにしておく。次へ(N)を押す。
5. 確認画面が出るので、次へ(N)を押す。
6. 処理が正常に終了しました、と出るので、完了(F)を押す。
7. 「古いバージョンのPDIC用辞書です.新しい辞書に変換しますか？」と聞かれるので、「はい」を選択する。
8. 変換後の辞書ファイル名について、保存したい場所を設定する。次へ(N)を押す。
9. 「文字コードの確認を行います。」と出る。次へ(N)を押す。
10. 「見出語」の確認が出る。次へ(N)を押す。
11. 「訳語」の確認が出る。次へ(N)を押す。
12. 「用例」の確認が出る。次へ(N)を押す。
13. 「発音記号」の確認が出る。次へ(N)を押す。
14. 「次へボタンを押すと変換を開始します。」と出る。次へ(N)を押す。
15. 変換結果ウィンドウが出る。変換合計単語数が18,096であることを確認する。OKを押す。
16. 「変換処理は正常に完了しました。」と出る。完了(F)を押す。
<h3>P-Study System用のSVL 12,000/SIL 6,000問題集を作成する。</h3>
1. PDIC/Unicodeで、File -&gt; 辞書設定&lt;詳細&gt;を選択する。学辞郎付属のPDICではダメですぞ。
2. 「学辞郎」辞書グループを選択し、その辞書ファイル名のところで右クリックを行う。出てきたポップアップメニューで「辞書の変換(C)」を選択する。
3. 変換先辞書欄は、出力したいファイル名を入力する（例:「c:\mydoc\english\gakujiro.csv」）。ファイル名は、必ず「.csv」で終わるようにする。変換先ファイル形式は「CSV形式」とする。OKボタンを押す。
4. 変換結果ウィンドウが出る。変換合計単語数が18,096であることを確認する。OKを押す。
5. gakujiro2pss.exeを実行する。まず、3.で設定した出力ファイル名を選択する。次に、出力先のディレクトリを指定する。しばらく待つと、変換に成功した旨のメッセージが出る。
6. 5.で指定した出力先のディレクトリにあるファイルを、PssEditor8を用いてインポートする。
<h3>まとめ</h3>
というわけで、最新版のPDIC/Unicodeで学辞郎の辞書を読む込むことができ、さらにP-Study System用のSVL/SIL問題集が作れちゃいました。

次は、LONGMAN Dictionary of Contemporary English第５版から、米発音を抽出するプログラムを書いています。英語の勉強をするはずなのに、プログラミングばっかりやっている…不吉な予感！！]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>15</wp:post_id>
		<wp:post_date>2010-07-31 01:28:56</wp:post_date>
		<wp:post_date_gmt>2010-07-30 16:28:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>15</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e8%8b%b1%e8%aa%9e%e5%ad%a6%e7%bf%92"><![CDATA[英語学習]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_7e20df289bee6ca2c7ebbfce823ae3db</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_7c98ab99ad78d04a5a24a60d1e92c0eb</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>deCODEmeとNavigenicsで遺伝子検査をしたデータを公開してみる。</title>
		<link>http://blog.wktk.co.jp/archives/20</link>
		<pubDate>Mon, 11 Oct 2010 14:53:46 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=20</guid>
		<description></description>
		<content:encoded><![CDATA[弊社、株式会社ｗｋｔｋは代表取締役一人だけが従事する会社です。彼に健康上の問題があれば、ゴーイングコンサーンが崩れてしまいます。会社存続リスクの定量化を試みました… 遺伝子検査を行うことによって！(ｷﾘｯ

というわけで、海外の遺伝子検査サービスを複数申し込んでみて、その比較をしてみました。

<!--more-->
検査キットや検査結果などの画像が多いので、気楽に流し見てください。本エントリの情報は2010/08/14現在のもので、文中の$はUS$です。
<h2>どの遺伝子検査サービスを選ぶか</h2>
代表的な遺伝子検査サービスとして、deCODEme/23andMe/Navigenics/Pathway Genomicsの4つが挙げられます。

これらのサービスでは、遺伝子の検査（特定の疾患にかかるリスクや、薬剤の効き、祖先の情報）をメインのサービスとしています。それ以外にも、遺伝子でつながるSNS的なサービスもやっていたりするものもあります。無料ゲームならぬ、遺伝子でつながるSNSですよ!!!遺伝子出会い系サービスなんか面白そうですね。

脱線失礼。さて、これらの検査サービスは何が違うのでしょうか。

deCODEmeのサイトに、<a href="http://www.decodeme.com/product-comparison" target="_blank">Compare with competitorsというページ</a>があります。Pathway Genomic以外の3サービスについて言及されています。各サービスで検査される「SNP」と呼ばれるものの数を比較しているようです。

SNP(スニップ)とは、Single Nucleotide Polymorphismの略で、一塩基多型というらしいです。ある塩基配列のうち、１つの塩基のみ異なるやつらの集合、ということのようです。詳細は<a href="http://ja.wikipedia.org/wiki/%E4%B8%80%E5%A1%A9%E5%9F%BA%E5%A4%9A%E5%9E%8B" target="_blank">Wikipediaの「一塩基多型」の項目</a>をご覧ください。人間であれば遺伝子のほとんどは共通です。そのうち個人差が出る部分だけを調べてやろう、ということですね。SNPを調べることによって、さまざまな診断を行うわけです。

上記比較サイトを見ると、検査されるSNPの数はdeCODEmeが一番多いようです。しかし、サービス全体の使い心地は、試してみなきゃわからないですよね。

というわけで、NavigenicsとdeCODEmeの両社で遺伝子検査を申し込んでみました。

23andMeは、残念ながら日本から申し込みを行うことができません。<a href="http://d.hatena.ne.jp/ma_ko/20100730/p1" target="_blank">Pathway Genomicsについては、申し込みを行った方のブログ</a>がありますので、そちらを参照ください。
<h3>Navigenics</h3>
<a href="https://www.navigenics.com/" target="_blank"> Navigenicsのサイト</a>で、アカウントを登録したあとに申し込みを行います。料金は$1,000。

2010/05/13に申し込みを行いました。2010/05/14に、検査キットを発送したよ！というメールが来ました。

申し込み後１週間くらいしたら、西濃運輸の人がFedExの包みを持ってきました。
<a class="thickbox" href="https://farm5.static.flickr.com/4103/5055770612_1c2250b677_b.jpg" target="_blank"><img src="https://farm5.static.flickr.com/4103/5055770612_1c2250b677.jpg" width="500" height="375" /></a>

包みを開けると、青い箱と、紙袋が出てきました。
<a class="thickbox" href="https://farm5.static.flickr.com/4092/5055771634_ae2f894aa3_b.jpg" target="_blank"><img src="https://farm5.static.flickr.com/4092/5055771634_ae2f894aa3.jpg" width="500" height="375" /></a>

紙袋を開けると、医療用のFedEx袋やら、FedExの伝票やらが入っています。
FedExによる返送料はキット代金に含まれているようです。
<a class="thickbox" href="https://farm5.static.flickr.com/4126/5055154135_1bef1b745c_b.jpg" target="_blank"><img src="https://farm5.static.flickr.com/4126/5055154135_1bef1b745c.jpg" width="500" height="375" /></a>

青い箱を開けてみましょう。説明書と検査キットが出てきました。
<a class="thickbox" href="https://farm5.static.flickr.com/4151/5055155259_91fd5099d9_b.jpg" target="_blank"><img src="https://farm5.static.flickr.com/4151/5055155259_91fd5099d9.jpg" width="500" height="375" /></a>

説明書には、「唾液とれ！袋入れろ！送れ！」って書いてあるようです。
<a class="thickbox" href="https://farm5.static.flickr.com/4091/5055155445_817294d35e_b.jpg" target="_blank"><img src="https://farm5.static.flickr.com/4091/5055155445_817294d35e.jpg" width="500" height="375" /></a>

検査キットはこんな感じ。
<a class="thickbox" href="https://farm5.static.flickr.com/4110/5055774662_d647560f74_b.jpg" target="_blank"><img src="https://farm5.static.flickr.com/4110/5055774662_d647560f74.jpg" width="500" height="375" /></a>
<a class="thickbox" href="https://farm5.static.flickr.com/4145/5055156979_11e45058f9_b.jpg" target="_blank"><img src="https://farm5.static.flickr.com/4145/5055156979_11e45058f9.jpg" width="500" height="375" /></a>

「みそぎ」のつもりで、検体を採取する前に、リステリンを使ってしまった馬鹿な僕。何か食べたり飲んだりしたあとは、１時間の間隔を空ける必要があるようです。１時間じっと待ち、唾液をキット内に入れました。規定量まで入れるのがツラかったです…

キット内の試験管部分だけを取り外し、フタをして標本袋に入れます。
<a class="thickbox" href="https://farm5.static.flickr.com/4106/5055158945_913bc0f8de_b.jpg" target="_blank"><img src="https://farm5.static.flickr.com/4106/5055158945_913bc0f8de.jpg" width="500" height="375" /></a>

さらに、その標本袋を青い箱に入れて、付属のシールでフタをします。
<a class="thickbox" href="https://farm5.static.flickr.com/4084/5055777006_155e876d5b_b.jpg" target="_blank"><img src="https://farm5.static.flickr.com/4084/5055777006_155e876d5b.jpg" width="500" height="375" /></a>

さらに、その青い箱を医療用のFedEx袋に入れます。俺の唾液守られすぎ。
<a class="thickbox" href="https://farm5.static.flickr.com/4127/5055159591_0e9a17c36e_b.jpg" target="_blank"><img src="https://farm5.static.flickr.com/4127/5055159591_0e9a17c36e.jpg" width="500" height="375" /></a>

FedExの伝票を書きます。意外とメンドイ。
<a class="thickbox" href="https://farm5.static.flickr.com/4083/5055777616_b6a42a3666_b.jpg" target="_blank"><img src="https://farm5.static.flickr.com/4083/5055777616_b6a42a3666.jpg" width="500" height="375" /></a>

伝票の左下に品目が書いてあるのですが、そこにNON-INFECTIOUS/NON-HAZARDOUSって書いてあります。その横は、$5とも。$5の価値があるキレイな俺の唾液！

税関申告用の書類を書かなければいけません。送るものの重さを書く欄がありますが、僕が計ったときには116gでした。
<a class="thickbox" href="https://farm5.static.flickr.com/4108/5055777840_27b895f213_b.jpg" target="_blank"><img src="https://farm5.static.flickr.com/4108/5055777840_27b895f213.jpg" width="500" height="375" /></a>

FedExの伝票と税関申告用の書類をまとめて、粘着面つきの袋に入れます。袋だらけ…
<a class="thickbox" href="https://farm5.static.flickr.com/4105/5055160247_dec5c3638c_b.jpg" target="_blank"><img src="https://farm5.static.flickr.com/4105/5055160247_dec5c3638c.jpg" width="500" height="375" /></a>

検体が入ったキットと各種書類を、近所のFedEx/kinkosに持ち込みました。ここで１つトラブルが発生。なんと、もともと入っていた伝票は無効とのこと。

伝票は新しく発行され、全ての内容を書き写す必要がありました。別途料金はかかりませんでしたが、かなり面倒でした。おそらく日本のFedExでは使えない伝票だったのかもしれないですね。

さらに、もともとの伝票では、宛先欄に会社名(Navigenics)は記載してありましたが、受取人の氏名欄は空欄のままでした。FedEx/kinkosの窓口の方いわく、受取人の氏名が必要だとのこと。税関用の書類に、Navigenics社の担当者名が書いてあったので、それを書き写しました。

2010/05/23に検体を送り、2010/05/28に検体が届いた旨のメールが届きました。そして、2010/06/08に検査結果が出たとのメールが！

早速Navigenicsのサイトを見てみます。

まず、Conditions included in resultsというページで、どの検査項目について結果を表示するかを選択します。
僕は全ての検査項目について検査結果を表示するように設定してみました。
<h4>Health Conditions</h4>
検査結果ページは、検査項目ごとに枠が表示され、罹患するリスクなどの情報が枠内に記載されています。罹患リスクが平均より20%高いか、絶対値として25%以上である枠は、背景色がオレンジ色になります。

<a href="http://www.flickr.com/photos/gunyarakun/5054007228/sizes/o/" target="_blank"><img src="https://farm5.static.flickr.com/4086/5054007228_89cb8eb6db.jpg" width="252" height="500" /></a>

検査結果の英語が分かんねー…訳してみました。
<ul>
	<li>Abdominal aneurysm(腹部大動脈瘤)</li>
	<li>Alzheimer's disease(アルツハイマー病)</li>
	<li>Atrial fibrillation(心房細動)</li>
	<li>Brain aneurysm(脳動脈瘤)</li>
	<li>Celiac disease(小児脂肪便症/セリアック病)</li>
	<li>Colon cancer(結腸癌)</li>
	<li>Crohn's disease(炎症性腸疾患のうち、クローン病)</li>
	<li>Deep vein thrombosis(深部静脈血栓症)</li>
	<li>Diabetes, type 2(2型糖尿病)</li>
	<li>Glaucoma(緑内障)</li>
	<li>Graves' disease(バセドウ病)</li>
	<li>Heart attack(心臓発作)</li>
	<li>Hemo-chromatosis(血色素症/ヘモクロマトーシス)</li>
	<li>Lactose intolerance(乳糖不耐症)</li>
	<li>Lung cancer(肺がん)</li>
	<li>Lupus(全身性エリテマトーデス)</li>
	<li>Melanoma(黒色腫)</li>
	<li>Multiple sclerosis(多発性硬化症)</li>
	<li>Obesity(肥満症)</li>
	<li>Osteoarthritis(変形性関節症)</li>
	<li>Prostate cancer(前立腺癌)</li>
	<li>Psoriasis(乾癬)</li>
	<li>Restless legs syndrome(むずむず脚症候群)</li>
	<li>Rheumatoid arthritis(関節リウマチ)</li>
	<li>Sarcoidosis(サルコイドーシス)</li>
	<li>Stomach cancer, diffuse(未分化型胃がん)</li>
</ul>
株式会社ｗｋｔｋ代表取締役は、未分化型胃がん、変形性関節症、心臓発作、肥満症のリスクが平均より高いようです。また、乳糖不耐症である可能性が高いことが分かりました。牛乳でお腹ゴロゴロする人ってことです。でも、ゴロゴロしたことないんですよねー…

検査項目をクリックすると、より詳細な情報が表示されます。

Obesity(肥満)について表示してみました。79%の人は、遺伝子的には僕より肥満になりやすいようです。ただし、同じページの記述によれば、33%は環境によって影響されるらしいです。大食いとかやめないと…
<a href="http://www.flickr.com/photos/gunyarakun/5053387623/sizes/o/" target="_blank"><img src="https://farm5.static.flickr.com/4112/5053387623_5db4701397.jpg" width="239" height="500" /></a>

Your DNAというタブがあります。

「DNAの特定部位がどのようなパターンである、だから、このくらいのリスクがあるよ。その根拠はこの論文だよ。」といった内容が書いてあります。
<a href="http://www.flickr.com/photos/gunyarakun/5053387659/sizes/o/" target="_blank"><img src="https://farm5.static.flickr.com/4090/5053387659_dd98f81ed5.jpg" width="300" height="500" /></a>
<h4>Medications</h4>
Medicationsというタブがあります。そこでは、ある特定の薬で副作用があるのか、また薬効があるのか、という情報を得ることができます。

<a href="http://www.flickr.com/photos/gunyarakun/5054007282/sizes/o/" target="_blank"><img src="https://farm5.static.flickr.com/4107/5054007282_d3e243a5c2.jpg" width="244" height="500" /></a>

抗凝固剤ワルファリンは特別な処方が必要で、経口抗血小板薬クロピドグレルは薬効が減っていくのであんまり効かないようです。
<h3>deCODEme</h3>
deCODEmeの場合、がんコース(Cancer Scan) $500、心臓病コース(Cardio Scan) $500、全部入りコース(Complete Scan)$2,000の３コースを選択できます。がん&amp;心臓病コースは、$200割引で$800です。

今回は、$2,000の全部入りコースを2010/05/13に申し込みました。2010/05/14に、検査キットを発送したよ！というメールが来ました。

それから１週間後くらいすると、事務所ポストに白い封筒が突っ込んでありました。封筒の端っこは破けています。
<a class="thickbox" href="https://farm5.static.flickr.com/4110/5055153033_b19b6eb4f7_b.jpg" target="_blank"><img src="https://farm5.static.flickr.com/4110/5055153033_b19b6eb4f7.jpg" width="500" height="375" /></a>

封筒を開けると、キットが出てきました。キットの箱は返送時にも使うため、丁寧に扱う必要があります。
<a class="thickbox" href="https://farm5.static.flickr.com/4151/5055770996_daf9f62934_b.jpg" target="_blank"><img src="https://farm5.static.flickr.com/4151/5055770996_daf9f62934.jpg" width="500" height="375" /></a>
<a class="thickbox" href="https://farm5.static.flickr.com/4129/5055153731_d97e1b3347_b.jpg" target="_blank"><img src="https://farm5.static.flickr.com/4129/5055153731_d97e1b3347.jpg" width="500" height="375" /></a>

箱を開けてみます。説明書と紙封筒、検体採取具が入っています。
<a class="thickbox" href="https://farm5.static.flickr.com/4089/5055772166_efc7cd0ea1_b.jpg" target="_blank"><img src="https://farm5.static.flickr.com/4089/5055772166_efc7cd0ea1.jpg" width="500" height="375" /></a>

検体採取具は、プラスチックと紙でできたシンプルなものです。
<a class="thickbox" href="https://farm5.static.flickr.com/4111/5055154913_69fef47c8e_b.jpg" target="_blank"><img src="https://farm5.static.flickr.com/4111/5055154913_69fef47c8e.jpg" width="500" height="375" /></a>
<a class="thickbox" href="https://farm5.static.flickr.com/4144/5055158171_75cfdb11fd_b.jpg" target="_blank"><img src="https://farm5.static.flickr.com/4144/5055158171_75cfdb11fd.jpg" width="500" height="375" /></a>

封筒は、返送時に検体採取具を入れるためのものです。
<a class="thickbox" href="https://farm5.static.flickr.com/4127/5055772894_0db42238d1_b.jpg" target="_blank"><img src="https://farm5.static.flickr.com/4127/5055772894_0db42238d1.jpg" width="500" height="375" /></a>

説明書を見てみます。検体採取具をズラして、紙製の部分を露出させます。左ほほ、右ほほそれぞれの内側を、１つずつの採取具で８回こすります。
２つの採取具を封筒にいれます。
<a class="thickbox" href="https://farm5.static.flickr.com/4133/5055154543_6d652fd08c_b.jpg" target="_blank"><img src="https://farm5.static.flickr.com/4133/5055154543_6d652fd08c.jpg" width="500" height="375" /></a>
<a class="thickbox" href="https://farm5.static.flickr.com/4107/5055772598_f6769a3f3a_b.jpg" target="_blank"><img src="https://farm5.static.flickr.com/4107/5055772598_f6769a3f3a.jpg" width="500" height="375" /></a>

最後に、返送用あて先シールを箱に貼り、ガムテープで箱を密封します。Navigenicsに比べるとシンプル。

Navigenicsとは違って、検体をdeCODEmeへ送るための送料を負担する必要があります。送料を安くするため、今回は、郵便局で「<a href="http://www.post.japanpost.jp/int/service/small_packing.html" target="_blank">小形包装物</a>」として発送しました。

海外に物品を郵便として発送する際には、「<a href="http://www.post.japanpost.jp/int/use/writing/customs.html" target="_blank">税関告知書(CN22)</a>」というものを出す必要があります。「内容物の数量及び明細」には、「GENETIC TEST COLLECTION KIT」と書きました。

郵便局で発送の際、CN22をチェックされました。窓口の方いわく、これでは内容が分からなく、税関で止められる場合もある、とのこと。
「No Alcohol」とか「Plastic and Paper」とか、とにかく「安全なものである」ということを書いたほうがよい、とアドバイスを受けました。
よって、CN22にそれらの文言を書き加え、発送しました。

2010/05/23に検体を送りました。2010/05/26に検体が到着したとのメールが到着。2010/06/16に検査結果が出たとのメールが到着しました。

早速deCODEmeのサイトを閲覧しましょう。
<a href="http://www.flickr.com/photos/gunyarakun/5053386345/sizes/o/" target="_blank"><img src="https://farm5.static.flickr.com/4086/5053386345_94e4de7bc5.jpg" width="500" height="403" /></a>

まずは、自分の個人情報を設定します。Gender(性別)とEthnicity(民族性)は必須入力項目です。deCODEmeに通知した個人情報は、項目ごとに公開の範囲を選択することができます。誰でも公開、マイミク的なdeCODEme friendsにのみ公開、まったく公開しない、の３種類の公開範囲を選択できます。

deCODEmeには、Health Watch ResultsとAncestry Resultsという２つの結果を知ることができます。Health Watch Resultsでは特定の疾病に罹患するリスクなどの情報を、Ancestry Resultsでは自分の先祖がどのような系統であるのかという情報を知ることができます。
<h4>Health Watch Results</h4>
まずは、Health Watch Resultsを見てみます。結果ページには、ずらっと検査項目が並んでいます。
<a href="http://www.flickr.com/photos/gunyarakun/5054005944/sizes/o/" target="_blank"><img src="https://farm5.static.flickr.com/4133/5054005944_b5ce730169.jpg" width="93" height="500" /></a>

まずは、ABO血液型についての結果を閲覧してみましょう。deCODEmeでは結果を見るためには、項目ごとにいくつかの手順を踏む必要があります。項目をクリックすると、「本当に結果を表示していいのかどうか」を確認する画面が表示されます。
<a class="thickbox" href="https://farm5.static.flickr.com/4110/5060230674_bde17106b2_b.jpg" target="_blank"><img src="https://farm5.static.flickr.com/4110/5060230674_bde17106b2.jpg" width="240" height="229" /></a>

次に、簡単なアンケート画面が表示されます。
<a class="thickbox" href="https://farm5.static.flickr.com/4085/5059617099_6431e5da14_b.jpg" target="_blank"><img src="https://farm5.static.flickr.com/4085/5059617099_6431e5da14.jpg" width="240" height="119" /></a>
アンケートの質問としては、自分や自分の親が特定の疾患であると診断されたことがあるか？というものがメインです。これらの回答についても、情報公開する範囲を選択することができます。

アンケートに答えると、診断結果のサマリーが選択した項目に表示されます。
<a href="http://www.flickr.com/photos/gunyarakun/5054006086/sizes/o/" target="_blank"><img src="https://farm5.static.flickr.com/4087/5054006086_e9643cd1c3.jpg" width="93" height="500" /></a>

項目内にある、「full results」のリンクをたどると、詳細な結果を閲覧することができます。
<a href="http://www.flickr.com/photos/gunyarakun/5053386469/sizes/o/" target="_blank"><img src="https://farm5.static.flickr.com/4133/5053386469_ba62d53740.jpg" width="434" height="500" /></a>
Nagigenicsに比べ、画像や写真を使って見た目がキレイですね。
診断結果の根拠となる論文等へのリンクもあります。

診断に使われたSNP近辺を、Javaで動作するゲノムブラウザで閲覧することもできます。
<a href="http://www.flickr.com/photos/gunyarakun/5053386573/sizes/o/" target="_blank"><img src="https://farm5.static.flickr.com/4146/5053386573_151ab51fc1.jpg" width="500" height="378" /></a>

すべての検査結果を閲覧するためには、検査項目ごとに上記の操作を繰り返していきます。地味に大変な作業です。
<a href="http://www.flickr.com/photos/gunyarakun/5059616929/sizes/o/" target="_blank"><img src="https://farm5.static.flickr.com/4103/5059616929_c1b8747f55.jpg" width="93" height="500" /></a>

上記の捜査を行ったのに、結果が表示されない項目があります。実は、Ethnicity/Genderによっては、いくつかの検査項目について結果が表示されません。どうやら、東アジア人男性は根拠となるデータが少なく、妥当性のある結果が出せないのでしょう。

あーせっかく一番高いコースにしたのにっ！

冷静になって考えれば、根拠が薄いデータを出されるよりは「わかんねー」と正直に言ってもらえるほうがいいですよね。好感度が上がりました。同時に、ちょっと損した気分になったけど。

解析されたデータは、deCODEme側に保持されています。将来的に新たなエビデンスが発見されれば、結果が閲覧できるようになるようです。

deCODEmeの結果と、他サービスとの結果が異なることもあるようです。たとえば、ABO血液型については、23andMeとdeCODEmeで結果が違う場合があるようです。検査しているSNP(s)が違うから、というのが理由らしいです。

結局、どんな検査結果を閲覧することができるんでしょうか。東アジア人男性が閲覧できる検査結果一覧は、以下のとおりです。
<ul>
	<li>ABO Blood Types(ABO血液型)</li>
	<li>Age Related Macular Degeneration(加齢黄斑変性）</li>
	<li>Alcohol Flush Reaction(アルコール紅潮反応)</li>
	<li>Asthma(ぜんそく)</li>
	<li>Atrial Fibrillation(心房細動)</li>
	<li>Bitter Taste Perception(苦味受容)</li>
	<li>Brain Aneurysm(脳動脈瘤)</li>
	<li>Colorectal Cancer(結腸直腸癌)</li>
	<li>Eye Color(目の色)</li>
	<li>Heart Attack(心臓発作)</li>
	<li>Hemochromatosis(血色素症/ヘモクロマトーシス)</li>
	<li>Lactose Intolerance(乳糖不耐症)</li>
	<li>Male Pattern Baldness(男性型脱毛症)</li>
	<li>Nicotine Dependence(ニコチン依存)</li>
	<li>Psoriasis(乾癬)</li>
	<li>Rheumatoid Arthritis(関節リウマチ)</li>
	<li>Statin Induced Myopathy(スタチン誘発筋疾患)</li>
	<li>Type 2 Diabetes(2型糖尿病)</li>
	<li>Warfarin Metabolism(ワルファリン代謝)</li>
</ul>
東アジア人男性ではNavigenicsのほうが閲覧できる検査結果が多いようです。

結果をざっと見る限り、株式会社ｗｋｔｋ代表取締役は、肺が弱くて、自己免疫疾患もかかりやすめ、といったところでしょうか。
疾病に対するものではない検査項目がNavigenicsより多いです。見ていて楽しいですね。ニコチン依存性なども分かります。
<h4>Ancestry Results</h4>
Ancestry Resultsを見てみます。
<a href="http://www.flickr.com/photos/gunyarakun/5053386593/sizes/o/" target="_blank"><img src="https://farm5.static.flickr.com/4088/5053386593_ee9390fd21.jpg" width="358" height="500" /></a>

Ascestry Resultsの中にはいくつかのメニューがあります。Ancestral originsという項目を見ます。
<a href="http://www.flickr.com/photos/gunyarakun/5053386617/sizes/o/" target="_blank"><img src="https://farm5.static.flickr.com/4110/5053386617_1d088dcb50.jpg" width="442" height="500" /></a>
22個の常染色体と、X染色体について、europian/african/east-asianの３グループのうちどれに一番マッチするか、というのをコンピュータで検査した結果です。

X染色体のほうは、6%もeuropianが入っているようです。とはいえ、このデータがどういう意味を持つのか、というのがよく分かりません。

Female lineという項目を見ます。これは、母由来のミトコンドリアDNAを解析した結果です。
<a href="http://www.flickr.com/photos/gunyarakun/5053386641/sizes/o/" target="_blank"><img src="https://farm5.static.flickr.com/4153/5053386641_6737785f6b.jpg" width="437" height="500" /></a>

いわゆるミトコンドリア・イブから、どのように分化していったのかを示す表があります。自分のミトコンドリアDNAがどのグループに属するかが、表上に図示されています。

僕のミトコンドリアDNAは、mitogroup Dに属するらしいです。当該mitogroupについて、簡単な説明とWikipedia英語版記事へのリンクがあります。東アジア人の2割は、mitogroup Dだそうですよ。

また、同じmitogroupの人を閲覧することもでいます。マイミクならぬ、マイミト。同じmitogroupのdeCODEmeユーザに対してメッセージを送ることができたりします。
<a href="http://www.flickr.com/photos/gunyarakun/5053386665/sizes/o/" target="_blank"><img src="https://farm5.static.flickr.com/4091/5053386665_518abf0a08.jpg" width="301" height="500" /></a>

しかし、どんなメッセージがやりとりされているんでしょうか。「mitogroup Dだから仲良くしようぜ！」とかかな。

Male lineという項目を見ます。これは、父由来のY染色体を解析した結果です。
<a href="http://www.flickr.com/photos/gunyarakun/5054006330/sizes/o/" target="_blank"><img src="https://farm5.static.flickr.com/4083/5054006330_451ce70193.jpg" width="434" height="500" /></a>

ミトコンドリアDNAの図と似ています。

Y染色体グループにはさらにサブグループがあります。僕の場合は、Y染色体グループがOで、サブグループはO3a3でした。日本人男性の半数はOグループなんだって。

これらの結果を見る限り、僕は東アジア人のようです。<strong>イタリア生まれ長崎育ちの色男</strong>だと思っていたのになー…もっといろいろ混血していれば、面白い結果が出るのかもしれないですね。

Man of kinshipという項目を見ます。
<a href="http://www.flickr.com/photos/gunyarakun/5054006394/sizes/o/" target="_blank"><img src="https://farm5.static.flickr.com/4110/5054006394_4b5704f84c.jpg" width="422" height="500" /></a>

Man of kinshipを閲覧する際には、Javaのアプリケーションが起動します。いくつかの軸のなかから３軸を選び、地域ごとに色分けされた遺伝情報を３次元上に描くものです。
<img src="https://farm5.static.flickr.com/4108/5053386873_8c4265f0c1.jpg" width="499" height="500" />
ばっちり東アジア人ゾーンにプロットされていました。ちぇ…（ゲバラ）
<h3>SNPsのcsvデータ</h3>
deCODEmeでは、解析されたSNPsの一覧をcsvファイルでダウンロードすることができます。とはいえ、ダウンロードしても使い勝手がない…
というわけで、<a href="http://tasuku.suenaga.name/SNPs.zip" target="_blank">ダウンロードした僕のSNPsデータ</a>を公開します。

ファイル形式はcsvファイルです。SNPごとに、自分がどのタイプであるのかがわかります。
<img src="https://farm5.static.flickr.com/4124/5059249693_796bc8bc8c.jpg" width="500" height="420" />

「P2Pで公開されることにより、クラウド上で永遠と複製され続けるDNA」的なストーリーで、メディアアートなどに仕立ててやってください。
「子孫から訴えられたりするので、公開やめたほうがいいよ！」とありがたいアドバイスもいただいたのですが、ためしに公開してみます。

csvファイルを開いたエディタは、EmEditorです。EmEditorはWindows用のエディタです。csv/tsvファイルを整形して表示し、編集できる機能があって便利です。さらに、メモリには乗りきらない巨大なテキストファイルの一部のみを開く機能もあります。巨大なcsvファイルを閲覧・編集するのにうってつけですね。<a href="http://jp.emeditor.com/modules/feature1/rewrite/tc_13.html" target="_blank">Zen Codingも使えます。</a>

<a href="http://www.shareit.com/product.html?productid=300338216&amp;backlink=http%3A%2F%2Fblog.wktk.co.jp%2F&amp;affiliateid=200126374" target="_blank">EmEditorを購入する際はぜひ当サイトから！（宣伝）</a>
<h2>Navigenics/deCODEmeの比較</h2>
両サービスのよいところ、悪いところをまとめました。
<h3>Navigenicsのよいところ</h3>
<ul>
	<li>東アジア人男性でも、多くの検査結果を知ることができる。</li>
</ul>
<h3>deCODEmeのよいところ</h3>
<ul>
	<li>苦味受容や目の色など、疾病ではない項目の検査結果を知ることができる。</li>
	<li>将来的に、Navigenicsより多くの結果を知りうる可能性がある。</li>
	<li>祖先の情報を知ることができる。</li>
	<li>SNPsの情報をcsvデータで得ることができる。</li>
	<li>検査結果が見た目がキレイで、楽しい。</li>
</ul>
<h3>Navigenicsの悪いところ</h3>
<ul>
	<li>検体取得作業が手間がかかる。</li>
	<li>FedExで検体を送付するのにひと手間かかる。</li>
	<li>検査結果の妥当性については、deCODEmeよりは低い可能性がある。</li>
</ul>
<h3>deCODEmeの悪いところ</h3>
<ul>
	<li>現時点では、東アジア人男性が閲覧できる検査項目が少ない。特に、心臓病コース・がんコースでは、ほとんどの結果が表示されないと予想される。</li>
	<li>検査料が高額。</li>
</ul>
どちらのサービスも、知りたくない検査結果を知らないで済むように注意深く作られているところがよいと感じました。あたりまえかもしれないけど。
<h2>まとめ</h2>
NavigenicsとdeCODEmeという２大遺伝子検査サービスについて実際に検査を申し込んでみました。どのように検体を取るのか、検査結果はどのように表示されるのかについて写真・画像を使って概説させていただきました。

現段階では、東アジア人がこのような遺伝子検査サービスを申し込んでも、値段が高いわりには得られる情報の質が高くないという印象です。「高額な占い」気分で検査するのがよいと考えます。

ALDH2や肥満などの検査であれば、日本でも検査キットが簡単に入手できます。特定の遺伝情報について知りたいのであれば、そういったキットで充分ではないでしょうか。日本人に特化していて、気軽に申し込め、多くのSNPを検査できるサービスが望まれます。

ちなみに、NagivenicsとdeCODEmeのアフィリエイト収入でウハウハ計画を夢見ていたのですが、両社ともアフィリエイトが無かったのです。しょんぼり。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>20</wp:post_id>
		<wp:post_date>2010-10-11 23:53:46</wp:post_date>
		<wp:post_date_gmt>2010-10-11 14:53:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%b5%b7%e5%a4%96%e9%81%ba%e4%bc%9d%e5%ad%90%e6%a4%9c%e6%9f%bb%e3%82%b5%e3%83%bc%e3%83%93%e3%82%b9%ef%bc%92%e7%a4%be%e3%81%ab%e7%94%b3%e3%81%97%e8%be%bc%e3%82%93%e3%81%a7%e3%81%bf%e3%81%9f%e3%82%88</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e4%bc%9a%e7%a4%be%e9%81%8b%e5%96%b6"><![CDATA[会社運営]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Longman(5訂版)附属DVDから英語・米語のMP3を抽出する</title>
		<link>http://blog.wktk.co.jp/archives/23</link>
		<pubDate>Wed, 18 Aug 2010 18:59:06 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=23</guid>
		<description></description>
		<content:encoded><![CDATA[前エントリ「<a href="http://blog.wktk.co.jp/archives/15">P-Study SystemでアルクのSVL/SILの問題集を簡単に作成する</a>」にて、英単語の学習を「<a href="http://www.takke.jp/">P-Study System</a>」を用いて行っていることを書きました。<a href="http://twitter.com/takke/status/21500818692">P-Study Systemの作者様にも当ブログを認知いただけた</a>ようです。ありがたいことです。

認知記念に（？）、ロングマン 現代英英辞典【5訂版】(通称: LDOCE5)から、英語・米語発音の音声を取り出し、P-Study Systemで使える(だろう)形式のMP3ファイルに変換するスクリプトを公開してみます。

http://www.amazon.co.jp/%E3%83%AD%E3%83%B3%E3%82%B0%E3%83%9E%E3%83%B3%E7%8F%BE%E4%BB%A3%E8%8B%B1%E8%8B%B1%E8%BE%9E%E5%85%B8-5%E8%A8%82%E7%89%88-DVD-ROM%E4%BB%98/dp/4342100940

あんまり出来はよくないですが、８割くらいは動いているっぽいので公開してみます。
<ul>
	<li><a href="http://tasuku.suenaga.name/pub/english/LDOCE5toMP3.zip">LDOCE5toMP3.zip</a></li>
</ul>
解凍後、ディレクトリ内のLDOCE5toMP3.exeを実行してください。DVDのパス選択、英語・米語の選択、出力先のパス選択の３つを行います。音声ファイルの一覧を取得したあと、MP3ファイルを大量に吐き出します。

既知の問題点
<ul>
	<li>変換が始まると、変換終了までアプリケーションが無反応になります。変換終了とともに、自動的にプログラムも終了します。</li>
	<li>余計なMP3ファイルをたくさん作っていそうな気がします。あまり気にしないでください。</li>
	<li>米語のwon'tだけ変換に失敗しています。</li>
	<li>P-Study Systemで読み込んでくれる音声ファイルのファイル名の規則性が分からないため、COBUILD用の変換スクリプトを参考に適当にファイル名を決めています。</li>
</ul>
修正やツッコミがあれば、よろしくお願いいたします。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>23</wp:post_id>
		<wp:post_date>2010-08-19 03:59:06</wp:post_date>
		<wp:post_date_gmt>2010-08-18 18:59:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>longman5%e8%a8%82%e7%89%88%e9%99%84%e5%b1%9edvd%e3%81%8b%e3%82%89%e8%8b%b1%e8%aa%9e%e3%83%bb%e7%b1%b3%e8%aa%9e%e3%81%aemp3%e3%82%92%e6%8a%bd%e5%87%ba%e3%81%99%e3%82%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e8%8b%b1%e8%aa%9e%e5%ad%a6%e7%bf%92"><![CDATA[英語学習]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_9c8759f662f7b81e1941a74f9cebf4e4</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_96180b364859a29effbf68fa4ce4031d</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>19</wp:comment_id>
			<wp:comment_author><![CDATA[required]]></wp:comment_author>
			<wp:comment_author_email>required@not.published</wp:comment_author_email>
			<wp:comment_author_url>http://Website</wp:comment_author_url>
			<wp:comment_author_IP>60.34.81.227</wp:comment_author_IP>
			<wp:comment_date>2010-11-09 20:55:01</wp:comment_date>
			<wp:comment_date_gmt>2010-11-09 11:55:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[LDOCE5の自作ビューアを作ろうとしていたので、抽出方法が参考になりました。
とはいえ、リバースエンジニアリング禁止規定に引っかからないか心配です。]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>20</wp:comment_id>
			<wp:comment_author><![CDATA[tasuku]]></wp:comment_author>
			<wp:comment_author_email>blog@wktk.co.jp</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>210.135.97.148</wp:comment_author_IP>
			<wp:comment_date>2010-11-10 16:35:45</wp:comment_date>
			<wp:comment_date_gmt>2010-11-10 07:35:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[おお、自作ビューワ楽しみです。公式ビューワはちょっともっさりしていますし。もし可能であれば、公開を期待します。
僕は、LongmanのDVD内のデータやプログラミングはリバースエンジニアリングしていません。<a href="http://www.geocities.co.jp/tak492/" rel="nofollow">LDOCE5 DVDをEPWING化する</a>のサイトのプログラミングを参考にしただけです。とはいえ、リバースエンジニアリング禁止規定の文言を見ていないので、厳密に規定に違反していないかどうかは不明です。]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>19</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>25</wp:comment_id>
			<wp:comment_author><![CDATA[required]]></wp:comment_author>
			<wp:comment_author_email>required@not.published</wp:comment_author_email>
			<wp:comment_author_url>http://Website</wp:comment_author_url>
			<wp:comment_author_IP>219.164.148.63</wp:comment_author_IP>
			<wp:comment_date>2010-11-15 18:31:57</wp:comment_date>
			<wp:comment_date_gmt>2010-11-15 09:31:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[良く考えずに適当なことを書いてしまいました。
データを利用するだけなら問題ないみたいです。

まだ何も作ってないですが、うまくいったら成果物は以下で公開しようと思います。
http://code.google.com/p/shortman/]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>101</wp:comment_id>
			<wp:comment_author><![CDATA[一利用者]]></wp:comment_author>
			<wp:comment_author_email>stjnds@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2011-09-22 17:32:56</wp:comment_date>
			<wp:comment_date_gmt>2011-09-22 08:32:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[音声抽出スクリプト利用させていただきました。
ありがとうございます。

1割くらい抜き出せない音があるのですが、仕様でしょうか？
それとも実行環境(vista)のせいでしょうか？
教えていただければ幸いです。
ちなみに音声ファイルは46364個抽出できています。

・音声ファイルがない。
agricultural, ax, berry, bite, catalog,draft　他多数
・ファイルにあるけど発音が違う。
era, coward, darling, spade, frost, bond, cruise, orient,duke, 他]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1316680376.1969";s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1317291038.9261";s:7:"message";s:53:"tasuku がコメントの状態を approved に変更";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"tasuku";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>244</wp:comment_id>
			<wp:comment_author><![CDATA[hiro]]></wp:comment_author>
			<wp:comment_author_email>umigame_style@yahoo.co.jp</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2012-11-11 19:01:37</wp:comment_date>
			<wp:comment_date_gmt>2012-11-11 10:01:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[お忙しいところありがとうございます。
さっそく利用させていただきました。とても快適です。また訪問させていただきます。]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>241</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1352628097.3398";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>128</wp:comment_id>
			<wp:comment_author><![CDATA[tasuku]]></wp:comment_author>
			<wp:comment_author_email>blog@wktk.co.jp</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2011-11-13 23:31:42</wp:comment_date>
			<wp:comment_date_gmt>2011-11-13 14:31:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[コメントありがとうございます。
では、変形MIT licenseとしたいと考えます。
著作権表示の代わりとして、このエントリのURLをソースコードのどこかに入れておいてください。
公開楽しみにしております！]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>124</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1321194702.6387";s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"tasuku";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>104</wp:comment_id>
			<wp:comment_author><![CDATA[tasuku]]></wp:comment_author>
			<wp:comment_author_email>blog@wktk.co.jp</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2011-09-29 19:11:34</wp:comment_date>
			<wp:comment_date_gmt>2011-09-29 10:11:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[報告ありがとうございます。

実行環境のせいではなく、不具合だと思います。
ヒマがあったら修正しておきますね！]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>101</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1317291094.8622";s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"tasuku";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>124</wp:comment_id>
			<wp:comment_author><![CDATA[DAYS]]></wp:comment_author>
			<wp:comment_author_email>nineexit@yahoo.co.jp</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2011-11-11 17:16:25</wp:comment_date>
			<wp:comment_date_gmt>2011-11-11 08:16:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[ロングマンから問題集を作成しようとしています。
LDOCE5toMP3.pyをしたいのですが、このプログラムのライセンス形態は何でしょうか？
ライセンス次第では、公開しようかと考えています。]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1320999385.3963";s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1321194540.3508";s:7:"message";s:53:"tasuku がコメントの状態を approved に変更";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"tasuku";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>233</wp:comment_id>
			<wp:comment_author><![CDATA[hiro]]></wp:comment_author>
			<wp:comment_author_email>umigame_style@yahoo.co.jp</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2012-10-31 19:36:03</wp:comment_date>
			<wp:comment_date_gmt>2012-10-31 10:36:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[いつも拝見させていただいています。有益なエントリーばかりで大変勉強になります。
こちらの記事を拝見して”MP3ファイルに変換するスクリプト”を使用させていただこうと思ったのですが、上手くダウンロードできませんでした。もしお時間があれば、再度アップロードしていただけないでしょうか。
何卒よろしくお願いいたします。]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1351679763.2291";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1352435960.5736";s:7:"message";s:45:"tasuku changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"tasuku";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>241</wp:comment_id>
			<wp:comment_author><![CDATA[tasuku]]></wp:comment_author>
			<wp:comment_author_email>blog@wktk.co.jp</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2012-11-09 13:40:04</wp:comment_date>
			<wp:comment_date_gmt>2012-11-09 04:40:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[★hiroさん＞
指摘ありがとうございます。サーバが落ちていました。
再度ダウンロードできるようになっています。]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>233</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1352436004.8294";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"tasuku";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>さくらの共用レンタルサーバ(FreeBSD)で開発環境を整える</title>
		<link>http://blog.wktk.co.jp/archives/34</link>
		<pubDate>Wed, 01 Sep 2010 16:16:23 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=34</guid>
		<description></description>
		<content:encoded><![CDATA[さくらのVPS(CentOS)が話題になっているが、共用レンタルサーバ(FreeBSD)のほうの設定を行った。CentOSよりはFreeBSDのほうが慣れている。

さくらの共用レンタルサーバの環境設定について書かれたいろんなブログを見た。HTTP経由でのファイル取得にはwgetを使っていることが多かった。fetchのほうがFreeBSDっぽくね？

cshをbashに変える。
<pre class="syntax bash">% chsh -s /usr/local/bin/bash
</pre>
gitを入れる。Subversionよりは依存ライブラリが少なくてやりやすいか。
<pre class="syntax bash">$ fetch http://kernel.org/pub/software/scm/git/git-1.7.2.tar.gz
$ tar xvfz git-1.7.2.tar.gz
$ cd git-1.7.2
$ ./configure --prefix=$HOME/usr --without-tcltk
$ gmake
$ gmake install
</pre>
vimを入れる。
<pre class="syntax bash">$ fetch ftp://ftp.vim.org/pub/vim/unix/vim-7.3.tar.bz2
$ fetch ftp://ftp.vim.org/pub/vim/extra/vim-7.2-extra.tar.gz
$ fetch ftp://ftp.vim.org/pub/vim/extra/vim-7.2-lang.tar.gz

$ tar xvfj vim-7.3.tar.bz2
$ mv vim73 vim72
$ tar xvfz vim-7.2-extra.tar.gz
$ tar xvfz vim-7.2-lang.tar.gz
$ cd vim72
$ mkdir patches
$ cd patches
$ curl -O 'ftp://ftp.vim.org/pub/vim/patches/7.3/7.3.[001-003]'
$ cd ..
$ cat patches/7.3.* | patch -p0

$ ./configure --enable-multibyte --with-features=big --prefix=$HOME/usr
$ make
$ make install
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>34</wp:post_id>
		<wp:post_date>2010-09-02 01:16:23</wp:post_date>
		<wp:post_date_gmt>2010-09-01 16:16:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%81%95%e3%81%8f%e3%82%89%e3%81%ae%e5%85%b1%e7%94%a8%e3%83%ac%e3%83%b3%e3%82%bf%e3%83%ab%e3%82%b5%e3%83%bc%e3%83%90freebsd%e3%81%a7%e9%96%8b%e7%99%ba%e7%92%b0%e5%a2%83%e3%82%92%e6%95%b4%e3%81%88</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e9%a1%9e"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PythonでOpenCV 2.0以降の新しいインターフェースを使い顔認識を行う</title>
		<link>http://blog.wktk.co.jp/archives/54</link>
		<pubDate>Sat, 16 Oct 2010 04:06:05 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=54</guid>
		<description></description>
		<content:encoded><![CDATA[Python経由でOpenCVの顔認識を行う実例が、<a href="http://yamashita.dyndns.org/blog/face-detection-with-opencv/">OpenCVを使った顔認識を試してみる</a>というエントリにあります。

上記のスクリプトは、このエントリを書いた当時のバージョンであるOpenCV 2.1とそれに附属するPythonバインディングで動作します。

しかし、<a href="http://opencv.jp/opencv-2.1/py/">version 2.1のPythonバインディングリファレンス</a>によると、上記エントリで使っている関数群の説明が見当たりません。どうやら、version 2.0から、古いSWIGベースのPythonバインディングに加え、新しい形式のバインディングが追加されているようです。
<ul>
	<li>基本的には、import cvでほとんど事足りるようになっている。highguiも統合されたようだ。opencv.cv.cvFuncName()や、opencv.highgui.cvFuncname()は、cv.FuncName()となる。各種定数もすべてcv直下で参照できるようだ。</li>
	<li>cvRect/cvPoint/cvSize/cvScalarなどの代わりに、単なるtupleを使うようになっている。</li>
	<li>SWIGを用いた旧バインディングも、version 2.1現在では利用できる。</li>
</ul>
「旧バインディングが使えるのであれば、そのままでいいじゃーん」と思いました。しかし、cvSetImageROIに対応する関数呼び出しは、どうやら新形式でないとサポートされていないようです。

というわけで、上記エントリのコードを新形式に移植してみました。これから新規でPython + OpenCVのスクリプトを書く場合は、新形式を使うのがよいでしょう。
<pre class="syntax escaped brush-python">
#!/usr/bin/env python
# -*- coding: utf-8 -*-
import cv
import sys

def faceDetect(imgfile):
  # 画像を読み込む
  src_img = cv.LoadImage(imgfile, cv.CV_LOAD_IMAGE_COLOR)
  src_gray = cv.CreateImage(cv.GetSize(src_img),
                            cv.IPL_DEPTH_8U, 1)

  # ブーストされた分類器のカスケードを読み込む
  cascade_name = "haarcascade_frontalface_default.xml"
  cascade = cv.Load(cascade_name)

  # メモリを確保し，読み込んだ画像のグレースケール化，ヒストグラムの均一化を行う
  storage = cv.CreateMemStorage()
  cv.CvtColor(src_img, src_gray, cv.CV_BGR2GRAY)
  cv.EqualizeHist(src_gray, src_gray)

  # 顔検出
  faces = cv.HaarDetectObjects(src_gray, cascade, storage,
                               1.11, 4, 0, (40, 40))

  # 検出された全ての顔位置に枠を描画する
  for c, face_tuple in enumerate(faces):
    face_x, face_y, face_width, face_height = face_tuple[0]
    cv.Rectangle(
      src_img,
      (face_x, face_y),
      (face_x + face_width, face_y + face_height),
      cv.CV_RGB(255, 0, 0),
      3, 8, 0
    )

  return src_img

if __name__ == '__main__':
  if len(sys.argv) &lt; 2:
    print "Usage: facedetect \n" ;
    sys.exit(-1)
  img = faceDetect(sys.argv[1])

  # 画像を出力
  cv.SaveImage("output.jpg", img)
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>54</wp:post_id>
		<wp:post_date>2010-10-16 13:06:05</wp:post_date>
		<wp:post_date_gmt>2010-10-16 04:06:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>python%e3%81%a7opencv-2-0%e4%bb%a5%e9%99%8d%e3%81%ae%e6%96%b0%e3%81%97%e3%81%84%e3%82%a4%e3%83%b3%e3%82%bf%e3%83%bc%e3%83%95%e3%82%a7%e3%83%bc%e3%82%b9%e3%82%92%e4%bd%bf%e3%81%84%e9%a1%94%e8%aa%8d</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="category" nicename="%e6%8a%80%e8%a1%93%e3%83%a1%e3%83%a2"><![CDATA[技術メモ]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>iPhoneアプリ「ボキャブラキング 3.1.0未満」からP-Study System用問題集を作る</title>
		<link>http://blog.wktk.co.jp/archives/64</link>
		<pubDate>Fri, 29 Oct 2010 21:47:08 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=64</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>ボキャブラキング バージョン3.1.0からこのプログラムでは問題集が作成できないようになっています。これに対応する予定はありません。</strong>詳しくは当エントリのコメント欄を参照ください。

<hr /><a href="http://itunes.apple.com/jp/app/id345698704">iPhone/iPadアプリ「ボキャブラキング」</a>は、アルクによるレベル別語彙リストSVL12000を使った、単語当てゲームアプリです。

このアプリから単語リストを取り出して、P-Study Systemという学習ソフト用の問題集とするプログラムを書いてみました。
<ul>
	<li> <a href="http://tasuku.suenaga.name/pub/english/vocaking2pss.zip">vocaking2pss.zip</a> (2010/10/30 某所でツッコミをもらったので、問題と解答を入れ替えるように変更しました 2010/11/15 入れ替えたつもりが入れ替わっていなかったので、ちゃんと修正しました）</li>
</ul>
ただ単に問題集化するだけでは芸がありません。ボキャブラキングの問題は、「日本語での意味を複数」提示され、それに対する「英単語を１つ」答えるものです。それを加工することによって、「日本語での意味を１つ」提示されたら、それに対する「英単語群」を答える問題集も同時に作ります。この場合、問題のレベルは、複数の英単語のうちもっともレベルが低いもののレベルとしています。

たとえば、ボキャブラキングのSVLには「すばらしい」という意味の単語が13個あります。「fine: すばらしい、晴天の、精巧な」や「great: 偉大な、すばらしい」といった感じです。これらを全て集めて、「fine、great、wonderful、golden、lovely、excellent、heavenly、glorious、elegant、terrific、tremendous、sensational、awesome: すばらしい」という問題も生成するわけですね。

実際問題集を作ってみると意図したところが伝わると思います。

使い方を以下に説明します。
<ol>
	<li>iTunesでボキャブラキングのアプリをダウンロードしてください。</li>
	<li>vocaking2pss.exeを実行。ボキャブラキングのアプリファイルと、問題集の出力先ディレクトリを指定してください。ボキャブラキングのアプリファイルが見つからない場合には、「iTunes アプリ 保存場所」とかでググってください。</li>
	<li>すぐに、英単語単位/和語単位での12レベルの問題集ができます。英単語単位のは12,000個、和語単位のは17,697個の問題が出来ると思います。あとは、P-Study System側でインポートを行ってください。</li>
</ol>
ボキャブラキングは無料アプリですが、有料アプリであるPowerWordsと連携することができます。PowerWordsではしっかりと単語を学習することができます。ぜひPowerWordsを買ってアルクの収益に貢献しましょう。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>64</wp:post_id>
		<wp:post_date>2010-10-30 06:47:08</wp:post_date>
		<wp:post_date_gmt>2010-10-29 21:47:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>iphone%e3%82%a2%e3%83%97%e3%83%aa%e3%80%8c%e3%83%9c%e3%82%ad%e3%83%a3%e3%83%96%e3%83%a9%e3%82%ad%e3%83%b3%e3%82%b0%e3%80%8d%e3%81%8b%e3%82%89p-study-system%e7%94%a8%e5%95%8f%e9%a1%8c%e9%9b%86%e3%82%92</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e8%8b%b1%e8%aa%9e%e5%ad%a6%e7%bf%92"><![CDATA[英語学習]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>42</wp:comment_id>
			<wp:comment_author><![CDATA[yasu]]></wp:comment_author>
			<wp:comment_author_email>g-element1981@hotmail.co.jp</wp:comment_author_email>
			<wp:comment_author_url>http://Website</wp:comment_author_url>
			<wp:comment_author_IP>124.212.188.147</wp:comment_author_IP>
			<wp:comment_date>2011-01-23 00:08:46</wp:comment_date>
			<wp:comment_date_gmt>2011-01-22 15:08:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[はじめまして、yasuと申します。

当ページの「ボキャブらキング」からｐｓｓの問題集を作りたいのですが作成者様の「vocaking2pss」で「vocaking2pss.exe」実行し「ボキャキン 3.1.0 1.ipa」のアプリを指定して「開く」と以下のようなエラーが出ます。

see the logfile'C\Documents and Settings\yasu\デスクトップ\vocaking2pss\vocaking2pss.exe.log'for details

となり、ファイルの中にある「vocaking2pss.exe.log」の詳細に

Traceback (most recent call last):
  File "vocaking2pss.py", line 93, in 
    je_count, ej_count = convert(source_path, dest_path)
  File "vocaking2pss.py", line 28, in convert
    unzip(source_path, dest_path)
  File "vocaking2pss.py", line 25, in unzip
    outf.write(zf.read('Payload/VocabulaKing.app/spwl%02d_json.txt' % i))
  File "zipfile.pyc", line 471, in read
  File "zipfile.pyc", line 462, in getinfo
KeyError: 'Payload/VocabulaKing.app/spwl01_json.txt'
Traceback (most recent call last):
  File "vocaking2pss.py", line 88, in 
    sys.exit(-1)
NameError: name 'sys' is not defined
Traceback (most recent call last):
  File "vocaking2pss.py", line 88, in 
    sys.exit(-1)
NameError: name 'sys' is not defined

のように出ます。
また、「spwl01_json.txt」というものもファイルに出てきます。

どうしても使ってみたいのですがどうしたらよいのでしょうか？]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1295708926.61";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1295857874.66";s:7:"message";s:45:"tasuku changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"tasuku";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>43</wp:comment_id>
			<wp:comment_author><![CDATA[tasuku]]></wp:comment_author>
			<wp:comment_author_email>blog@wktk.co.jp</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>123.198.10.58</wp:comment_author_IP>
			<wp:comment_date>2011-01-24 17:38:36</wp:comment_date>
			<wp:comment_date_gmt>2011-01-24 08:38:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[バージョン3.1.0の最新版をためしたところ、SVLのデータファイルに簡単な暗号化がかけてありました。

直前のデータとのXORでの暗号化っぽいので、暗号を解けるバージョンを作成することはできるとは思います。しかし、暗号化をかけるようになったということは、「アルクとしてはSVLのデータをアプリ利用以外の用途では利用してほしくない」という意図だと捉えました。よって、暗号を解けるバージョンは作りません。

SVLの問題集を作る場合は、学辞郎の中古版などを買って別エントリの変換プログラムで作成されることをオススメします。]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1295858316.37";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"tasuku";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>44</wp:comment_id>
			<wp:comment_author><![CDATA[yasu]]></wp:comment_author>
			<wp:comment_author_email>g-element1981@hotmail.co.jp</wp:comment_author_email>
			<wp:comment_author_url>http://Website</wp:comment_author_url>
			<wp:comment_author_IP>124.212.188.147</wp:comment_author_IP>
			<wp:comment_date>2011-01-24 18:51:00</wp:comment_date>
			<wp:comment_date_gmt>2011-01-24 09:51:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[作成者様の変換プログラムで学辞朗からは以前作らせてもらいました。

簡単にほしかったものができたので、より覚えやすそうなボキャブラキングでやろうと思った次第です
。

アルクの暗号化でできないのであれば諦めが付きます。

どうもありがとうございました。]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>43</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1295862660.66";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>ØMQ(zeromq)について調査する。</title>
		<link>http://blog.wktk.co.jp/archives/71</link>
		<pubDate>Fri, 05 Nov 2010 21:32:14 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=71</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.zeromq.org/">ØMQ(zeromq)</a>について簡単に調査したのでメモ。元ネタは<a href="http://zguide.zeromq.org/chapter:all">ØMQ - The Guide</a>。
<h2>概要</h2>
<ul>
	<li>N-N通信を実現する、socket API風軽量メッセージングライブラリ。</li>
	<li>自動的な再接続や、メッセージのキューイングを行ってくれる。</li>
	<li>複数のメッセージングパターンと呼ばれるものを組み合わせることによって、柔軟なメッセージ配信を行うことができる。</li>
</ul>
<h2>ライブラリについて</h2>
<ul>
	<li>socket APIライクなC APIを持つ。以下socketは、zeromqのsocketを指す。</li>
	<li>zeromqはコンテキストというものを通じて使う。1コンテキストに、I/Oスレッドが1つ割り当てられる。基本1プロセスに1コンテキストでOK。複数のcontextを持つことはできるし、その場合は同じ個数のI/Oスレッドが走る。</li>
	<li>zeromqのsocketは、プロセス内通信(スレッド間通信など)、プロセス間通信、TCP、UDPマルチキャストをラップしたものである。icp:my.serverや、tcp:127.0.0.1:1234のようにしてラップ先を設定できる。</li>
	<li>通信では、メッセージをやりとりする。メッセージは複数のフレームからなる。１つのフレームは、１つの長さ付きバイナリを持つ。</li>
	<li>1つのsocketで、N-N通信ができる。</li>
	<li>1つのノードは、複数のsocketを持つことができる。</li>
	<li>zeromqのsocketは本物のsocketとは違い、クライアントを先に起動することができる。</li>
	<li>接続には、メッセージングパターンというものが設定されている。パターンによってメッセージ送受信方法が変わる。後述。</li>
	<li>サーバはデータの送信者、クライアントはデータの受信者では「ない」。あくまで、メッセージングパターンに基づいてメッセージがやりとりされる。</li>
	<li>ノードは、動的に追加できる。</li>
	<li>メッセージングパターンが用いるメタ情報を除いて、zeromqはメッセージの内容を関知しない。</li>
</ul>
<h2>キューについて</h2>
<ul>
	<li>メッセージは、メッセージングパターンに応じて送信時・受信時にキューイングされる。</li>
	<li>キューはロックレスで、基本オンメモリ。</li>
	<li>送信キューにたまったメッセージは、I/Oスレッドが送信してくれる。非同期I/Oが用いられる。</li>
	<li>メッセージ送信APIはただ単にメッセージを送信キューに入れるだけ。</li>
	<li>I/Oスレッドが、メッセージは受信キューに受信し続けてくれる。非同期I/Oが用いられる。</li>
	<li>メッセージ受信APIはただ単にメッセージを受信キューから読み出すだけ。</li>
	<li>キューのサイズを指定することができる。</li>
	<li>ZMQ_SWAPオプションで、オンメモリ上のキューからあふれたメッセージをディスク上に書き出すことができる。ただし、そのファイルを再利用することはできない。あくまで、一時的な領域としてディスクを使うだけ。</li>
</ul>
<h2>メッセージングパターンについて</h2>
<ul>
	<li>REQ/REP/PUB/SUB/PUSH/PULL/XREQ/XREP/PAIRがある。</li>
</ul>
<h3>REQ/REPについて</h3>
<ul>
	<li>request-replyモデル。リクエストを行い、そのレスポンスを受け取る通信方式。</li>
	<li>REQがリクエストを行う側。複数のノードと接続している場合には、そのうち1つのノードにリクエストメッセージを送信する。</li>
	<li>REPがレスポンスを返す側。リクエストメッセージを送ってきたノードにレスポンスメッセージを送信する。</li>
	<li>REQ側はレスポンスを受け取るまで新たなリクエストを出来ないし、REP側はレスポンスを返すまで他のリクエストを受け取れないようになっている。</li>
	<li>これらの問題を解決するXREQ/XREPについては後述。</li>
</ul>
<h3>PUB/SUBについて</h3>
<ul>
	<li>publish-subscribeモデル。publish側がメッセージを流しつづけ、それを複数のsubscribe側が受けとることができる。</li>
	<li>メッセージにはkey部分とdata部分がある。</li>
	<li>PUB側は、key部分とdata部分を送る。</li>
	<li>SUB側は、特定のkeyを先頭に持つメッセージを受信する。複数のkeyについてメッセージを受信できる。</li>
	<li>SUB側は、keyを指定しないとメッセージを受け取ることができない。空文字列をkeyとして指定した場合、すべてのメッセージを受け取ることができる。</li>
	<li>key部分とdata部分は、同じフレーム内にあってもよい。ただし、keyの誤マッチが起こる可能性がある。keyとdataでフレームを分けることによって、誤マッチは避けることができる。</li>
	<li>PUB側がサーバである必要はない。SUB側がサーバとなることもできる。</li>
	<li>PUB側はデータ送信キューを持つ。キューがいっぱいの場合には、キューへの投入はただ無視される。</li>
	<li>SUB側はデータ受信キューを持つ。</li>
</ul>
<h3>PUSH/PULLについて</h3>
<ul>
	<li>pipelineモデル。PUB/SUBとは異なり、メッセージの受取り手はノード群のうちの1つのノードとなる。</li>
	<li>PUSH側がサーバである必要はない。PULL側がサーバとなることもできる。</li>
	<li>複数PULLの場合には、ロードバランシングによってそれぞれのPULL側にメッセージが割り振られる。</li>
	<li>複数PUSHの場合には、PULL側ではそれぞれのPUSH側から１つずつメッセージを順番に読むような感じになる。</li>
	<li>PUSH側はデータ送信キューを持つ。初めて接続されたPULL側にそれまで送ったメッセージが一気に送信されてしまう。複数のPULL側がいる場合には、それらをすべて起動してからPUSH側を立ち上げること。</li>
</ul>
<h3>PAIRについて</h3>
<ul>
	<li>同期のために用いる。1-1接続のみ。</li>
	<li>PUSH/PULL、XREQ/XREP、PUB/SUBを同期目的に使うのは問題がある。</li>
</ul>
<h3>REQ/REP/XREQ/XREPについて</h3>
<ul>
	<li>XREQ/XREPを使うことによって、メッセージをルーティングすることができる。</li>
</ul>
<ul>
	<li>REQは、リクエストするメッセージの先頭に空のフレームを付与し、受け取ったレスポンスの先頭にある空のフレームを削除する。</li>
	<li>REPは、受け取ったリクエストメッセージの、先頭から空のフレームまでのフレームを保存する。送信するレスポンスの先頭に、保存したフレーム群を付与する。</li>
	<li>よって、REQ/REPの組み合わせでは、REQ側が付与した空のフレームをREP側がそのまま返却し、REQ側がその空のフレームを取り除くことになる。</li>
</ul>
<ul>
	<li>XREQは、接続しているすべてのノードに対してロードバランシングをしたリクエストを送り、それらのノード群からレスポンスを受け取る。</li>
	<li>XREQによる、リクエスト送信とレスポンス受信は対応していない。XREQはPUSH/PULLを兼ねたイメージで捉えるとよい。</li>
	<li>XREQは、メッセージ中のフレーム操作を行わない。</li>
</ul>
<ul>
	<li>XREPは、リクエストされたメッセージの先頭に、接続相手のノードIDが入ったフレームを付与する</li>
	<li>ノードIDはXREPの相手側が明示的に指定することができる。</li>
	<li>ノードIDが指定されない場合には、UUIDが使われる。</li>
	<li>XREPは、レスポンスメッセージの先頭のフレームを削除し、そのフレームに書いてあったノードIDにのみレスポンスメッセージを返却する。</li>
</ul>
<ul>
	<li>多段ルーティングなども、これらの仕組みを組み合わせて実現される。</li>
</ul>
<h3>デバイスとは</h3>
<ul>
	<li>zeromqでは、上記のメッセージングパターンを組み合わせることによって、柔軟なネットワークを構成することができる。</li>
	<li>メッセージングパターン同士を仲介するノードを、デバイスと呼ぶ。</li>
	<li>zeromqは、いくつかの組み込みデバイスを持つ。</li>
	<li>組み込みデバイスQUEUEは、REQから受け取ったリクエストを、複数のREPに送信し、その結果をREQに返すデバイス。</li>
	<li>組み込みデバイスFORWARDERは、PUB/SUBを再送信する。PUB/SUBをスケールさせるには、木構造通信を行う必要がある。そのときに、根ノード以外の内部ノードとして用いることができる。</li>
	<li>組み込みデバイスSTREAMERは、PUSH/PULLでFORWARDERの役割を果たすものである。</li>
</ul>
<ul>
	<li>メッセージングパターンの組み合わせとして、PUB-SUB，REQ-REP，REQ-XREP，XREQ-REP，XREQ-XREP，XREQ-XREQ，XREP-XREP，PUSH-PULL，PAIR-PAIRが存在する。</li>
	<li>これらのメッセージングパターンを組み合わせて、さまざまなトポロジやルーティングなどを実現することができる。</li>
</ul>
<h2>その他俺メモ</h2>
<ul>
	<li>Debianの公式パッケージになっていない。ITPは出ているので、じきに入るだろう。</li>
	<li>Debianの場合、ビルドにuuid-devパッケージもしくはe2fslibs-devが必要。uuid-devは、e2fslibs内で使われているUUID生成ライブラリlibuuidだけをパッケージとしたもの。</li>
	<li>足周りのTCPやIPCは完全に隠蔽される。横からいじることはできない。</li>
	<li>メッセージングパターンの組み合わせは、<a href="http://zguide.zeromq.org/chapter:all">http://zguide.zeromq.org/chapter:all</a> を参考にすること。</li>
	<li>メッセージングパターンの複雑な組み合わせ例として、<a href="http://ipython.scipy.org/doc/nightly/html/development/parallel_connections.html">http://ipython.scipy.org/doc/nightly/html/development/parallel_connections.html</a> が挙げられる。</li>
</ul>
<h2>感想</h2>
<ul>
	<li>簡単にN-N通信が出来るのは魅力。APIの数も少ないし、各種言語バインディングがそろっているのもいい。</li>
	<li>その名前からか、「キュー」という紹介のされ方をされている場合がある。冒頭に述べたように、N-N socket通信ライブラリと捉えたほうが適切ではないか。確かにキューイングはしてくれるけど。</li>
	<li>キューは永続化されない。REQ/REPの組み合わせでレスポンスを確認したりして、データが確実に先方に伝わったことを確認しない場合は、データは消えてもいい覚悟で使うのがいいだろう。</li>
	<li>メッセージングパターンの組み合わせで柔軟な通信は出来そうなのはわかったが、具体的なレシピがいっぱいあるとうれしい。</li>
	<li>tcp:での利用が多いんだろうが、inproc:やipc:も使いでがありそう。</li>
	<li>PUB/SUBでSUB側がサーバになれるのがうれしい。例えば、ログ収集サーバとしてSUB側を立て、動的にPUB側を増やすことが出来る。この用途で使ってみたいと考える。んでも、PUB/SUBでSUB側が1台しかないんだったら、PUSH/PULLでも充分だと今気づいた。</li>
	<li>PythonやRubyバインディングで遊んでみると理解が早い。C言語レベルで使いやすいAPIなので、LLでトポロジ設計をしたあとにC言語でガッツリ書く、というポリシーだとハイパフォーマンスな用途にも簡単に使えそうだ。</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>71</wp:post_id>
		<wp:post_date>2010-11-06 06:32:14</wp:post_date>
		<wp:post_date_gmt>2010-11-05 21:32:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%c3%b8mqzeromq%e3%81%ab%e3%81%a4%e3%81%84%e3%81%a6%e8%aa%bf%e6%9f%bb%e3%81%99%e3%82%8b%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%8a%80%e8%a1%93%e3%83%a1%e3%83%a2"><![CDATA[技術メモ]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Dispatching flood GET requests from web browsers with libevent, ØMQ(zeromq/zmq) and MessagePack.</title>
		<link>http://blog.wktk.co.jp/archives/77</link>
		<pubDate>Sat, 06 Nov 2010 09:30:45 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=77</guid>
		<description></description>
		<content:encoded><![CDATA[This is a simple sample code which recieves request from web browser with libevent and dispatch messages with ØMQ(zeromq/zmq) and MessagePack.
<ul>
	<li>When web server receives GET request, get paramter is converted to msgpack's map and it is sent to a client.</li>
	<li>Web server returns JSON. If get parameter `callback' is specified, it returns JSONP of which function name is the `callback' parameter.</li>
	<li>The client recieves msgpack's map and print it to stdout. You can write some logics like logging instead printing.</li>
</ul>

Web server
<pre class="syntax c">
#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <sys/time.h>
#include <stdlib.h>
#include <err.h>

#include <sys/queue.h>
#ifndef TAILQ_FOREACH
#define TAILQ_FOREACH(var, head, field) \
  for ((var) = ((head)->tqh_first); \
    (var); \
    (var) = ((var)->field.tqe_next))
#endif /* LIST_FOREACH */
#include <zmq.h>
#include <event.h>
#include <evhttp.h>
#include <msgpack.h>

#define PORT 8080

void
generic_handler(struct evhttp_request *req, void *zmq_sock)
{
  struct evkeyvalq args;
  char *jsonp_func = NULL;

  if (!req->uri) { return; }

  {
    char *uri = evhttp_decode_uri(req->uri);
    evhttp_parse_query(uri, &args);
    free(uri);
  }

  {
    struct evkeyval *get;
    msgpack_packer pk;
    msgpack_sbuffer sbuf;

    msgpack_sbuffer_init(&sbuf);
    msgpack_packer_init(&pk, &sbuf, msgpack_sbuffer_write);
    {
      unsigned int cnt = 0;
      TAILQ_FOREACH(get, &args, next) {
        if (!strcmp(get->key, "callback")) {
          jsonp_func = get->value;
        } else {
          cnt++;
        }
      }
      msgpack_pack_map(&pk, cnt);
    }
    TAILQ_FOREACH(get, &args, next) {
      if (get->value != jsonp_func) {
        unsigned int l;
        l = strlen(get->key);
        msgpack_pack_raw(&pk, l);
        msgpack_pack_raw_body(&pk, get->key, l);
        l = strlen(get->value);
        msgpack_pack_raw(&pk, l);
        msgpack_pack_raw_body(&pk, get->value, l);
      }
    }
    {
      zmq_msg_t msg;
      if (!zmq_msg_init_size(&msg, sbuf.size)) {
        memcpy((void *)zmq_msg_data(&msg), sbuf.data, sbuf.size);
        zmq_send(zmq_sock, &msg, 0);
        zmq_msg_close(&msg);
      }
    }
    msgpack_sbuffer_destroy(&sbuf);
  }
  {
    struct evbuffer *res_buf;
    if (!(res_buf = evbuffer_new())) {
      err(1, "failed to create response buffer");
    }

    evhttp_add_header(req->output_headers,
      "Content-Type", "text/javascript; charset=UTF-8");
    evhttp_add_header(req->output_headers, "Connection", "close");

    if (jsonp_func) {
      char num_buf[16];
      unsigned int jsonp_func_len = strlen(jsonp_func);
      evbuffer_add(res_buf, jsonp_func, jsonp_func_len);
      evbuffer_add(res_buf, "({});", 5);
      snprintf(num_buf, 16, "%d", jsonp_func_len + 5);
      evhttp_add_header(req->output_headers, "Content-Length", num_buf);
    } else {
      evbuffer_add(res_buf, "{}", 2);
      evhttp_add_header(req->output_headers, "Content-Length", "2");
    }
    evhttp_send_reply(req, HTTP_OK, "OK", res_buf);
    evbuffer_free(res_buf);
  }
  evhttp_clear_headers(&args);
}

int
main(int argc, char **argv)
{
  struct evhttp *httpd;

  event_init();

  if (httpd = evhttp_start("0.0.0.0", PORT)) {
    void *zmq_ctx, *zmq_sock;

    if (!(zmq_ctx = zmq_init(1))) {
      fprintf(stderr, "cannot create zmq context.");
    } else {
      if (!(zmq_sock = zmq_socket(zmq_ctx, ZMQ_PUB))) {
        fprintf(stderr, "cannot create zmq_socket.");

      } else if (zmq_connect(zmq_sock, "tcp://127.0.0.1:1234")) {
        fprintf(stderr, "cannot connect zmq_socket.");
      } else {
        evhttp_set_gencb(httpd, generic_handler, zmq_sock);
        event_dispatch();

        evhttp_free(httpd);
      }
      zmq_term(zmq_ctx);
    }
  } else {
    fprintf(stderr, "cannot bind port %d", PORT);
  }
  return 0;
}
</pre>

client
<pre class="syntax c">
#include <zmq.h>
#include <stdio.h>
#include <msgpack.h>

int
main(int argc, char **argv)
{
  msgpack_zone *mempool;

  if (!(mempool = msgpack_zone_new(MSGPACK_ZONE_CHUNK_SIZE))) {
    fprintf(stderr, "cannot create msgpack zone.");
  } else {
    void *zmq_ctx, *zmq_sock;
    if (!(zmq_ctx = zmq_init(1))) {
      fprintf(stderr, "cannot create zmq context.");
    } else {
      if (!(zmq_sock = zmq_socket(zmq_ctx, ZMQ_SUB))) {
        fprintf(stderr, "cannot create zmq_socket.");

      } else if (zmq_bind(zmq_sock, "tcp://*:1234")) {
        fprintf(stderr, "cannot bind zmq_socket.");
      } else {
        zmq_pollitem_t items[] = {
          { zmq_sock, 0, ZMQ_POLLIN, 0}
        };
        zmq_setsockopt(zmq_sock, ZMQ_SUBSCRIBE, "", 0);
        while (1) {
          zmq_poll(items, 1, -1);
          if (items[0].revents & ZMQ_POLLIN) { /* always true */
            zmq_msg_t msg;
            if (zmq_msg_init(&msg)) {
              fprintf(stderr, "cannot init zmq message.");
            } else {
              if (zmq_recv(zmq_sock, &msg, 0)) {
                fprintf(stderr, "cannot recv zmq message.");
              } else {
                msgpack_object obj;
                msgpack_unpack_return ret;
                ret = msgpack_unpack(zmq_msg_data(&msg), zmq_msg_size(&msg), NULL, mempool, &obj);
                if (MSGPACK_UNPACK_SUCCESS == ret) {
                  msgpack_object_print(stdout, obj);
                  printf("\n");
                }
              }
              zmq_msg_close(&msg);
            }
          }
        }
      }
      zmq_term(zmq_ctx);
    }
    msgpack_zone_free(mempool);
  }
  return 0;
}
</pre>

Makefile
<pre>
all: suggest-client suggest-server

suggest-server: suggest-server.c
  gcc -O3 -ggdb -o suggest-server suggest-server.c -lzmq -levent -lmsgpack

suggest-client: suggest-client.c
  gcc -O3 -ggdb -o suggest-client suggest-client.c -lzmq -levent -lmsgpack
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>77</wp:post_id>
		<wp:post_date>2010-11-06 18:30:45</wp:post_date>
		<wp:post_date_gmt>2010-11-06 09:30:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dispatching-flood-get-requests-ftom-web-browsers-with-libevent-%c3%b8mq-and-messagepack</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="english"><![CDATA[English]]></category>
		<category domain="category" nicename="%e6%8a%80%e8%a1%93%e3%83%a1%e3%83%a2"><![CDATA[技術メモ]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_su_rich_snippet_type</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>RubyGemsなしで、rroonga 1.0.6のビルドと導入</title>
		<link>http://blog.wktk.co.jp/archives/88</link>
		<pubDate>Fri, 03 Dec 2010 03:13:38 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=88</guid>
		<description></description>
		<content:encoded><![CDATA[Rubyからgroongaを使うrroongaをインストールした。

Ruby用pkg-configライブラリがビルドに必要となっているようだ。RubyGemsを入れていない環境に導入したので、Ruby用pkg-configライブラリを単体導入した。pkg-configライブラリ単体がどこでダウンロードできるのか悩んだが、<a href="http://rubyforge.org/projects/cairo/">RubyForgeのcairoプロジェクト</a>からダウンロードできた。

pkg-configライブラリは単一のrbファイルであるので、以下に示すようにmake installしなくても、rroongaのビルドディレクトリにコピーしてあげるだけでもよいだろう。
<pre># groonga
tar xvfz groonga-1.0.4.tar.gz &amp;&amp; \
  cd groonga-1.0.4 &amp;&amp; \
  ./configure --prefix=/usr --without-cutter &amp;&amp; \
  make &amp;&amp;
  sudo make install

# ruby-pkg-config for building rroonga.
tar xvfz pkg-config-1.0.7.tgz &amp;&amp; \
 cd pkg-config-1.0.7 &amp;&amp; \
 ruby extconf.rb &amp;&amp; \
 sudo make install

# rroonga
tar xvfz rroonga-1.0.6.tar.gz &amp;&amp; \
 cd rroonga-1.0.6 &amp;&amp; \
 ruby extconf.rb &amp;&amp; \
 make &amp;&amp; \
 sudo make install
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>88</wp:post_id>
		<wp:post_date>2010-12-03 12:13:38</wp:post_date>
		<wp:post_date_gmt>2010-12-03 03:13:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rubygems%e3%81%aa%e3%81%97%e3%81%a7%e3%80%81rroonga-1-0-6%e3%81%ae%e3%83%93%e3%83%ab%e3%83%89%e3%81%a8%e5%b0%8e%e5%85%a5</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>
		<category domain="category" nicename="%e6%8a%80%e8%a1%93%e3%83%a1%e3%83%a2"><![CDATA[技術メモ]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Kay Frameworkで携帯電話対応サイトを作ってみる</title>
		<link>http://blog.wktk.co.jp/archives/91</link>
		<pubDate>Mon, 27 Dec 2010 20:31:57 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=91</guid>
		<description></description>
		<content:encoded><![CDATA[Google App Engineの手習いに掲示板システムを書いている。使っているフレームワークは、Kay Framework。

この掲示板システムで、携帯電話対応をしたい。Djangoの場合にはdjango-bpmobileというapplicationがある。これをKay Frameworkに移植することを考える。自分が使いそうなところだけを…。

まずは軽くdjango-bpmobileを読む。middleware.pyから。django特有の部分をKay Frameworkに置き換えていけば大丈夫だろう的な読みの元に。

BPMobileMiddleware/BPMobileConvertResponseMiddlewareは、それほどDjangoに依存していなさげ。uamobile.detectに渡すdictを作ってあげたり、request.GET/request.POSTをrequest.args/request.formにしたり、response['content-type']をresponse.headers['content-type']にしたり、response.contentをresponse.dataに変えたりしたら動いた。よくテストしていないけど。

IPy/uamobileは全てapplicationフォルダ内に放り込んだ。こちらのほうがlibディレクトリよりapplication特有感が出ていいかなー、と思って。uamobile/cidr.pyはpkg_resourcesからのimportをコメントアウトした。applicationフォルダ内にuamobileを入れると、uamobile配下のモジュール同士のimportに支障が出る。アプリケーションの__init__.pyで、sys.path.append(os.path.dirname(os.path.abspath(__file__))) をしてしのいだ。

BPMobileSessionMiddlewareは、移植が結構面倒くさそう。DjangoのSessionMiddlewareのクローンで、iモードIDからsessionのキーに変換する機能がついているものと認識。

iモードIDとセッションIDの結びつけには、キャッシュを使っているようだ。django.core.cache.cacheがそのインターフェース。Kay Frameworkの場合には、werkzeug.contrib.cache.GAEMemcachedCacheを使うとよさげか。

django-bpmobileでは、DoCoMoではすべてiモードIDを使う、という実装になっている。DoCoMoだけどCookieを食える端末も出てきたことだし、食える端末には食っていただこう。幸い、django-bpmobileが使っているUser-Agent解析ライブラリであるuamobileには、supports_cookie()というメソッドがある。is_docomo()なおかつnot supports_cookie()の場合のみ、iモードIDを使うのがよいか。softbank端末の一部で、jpドメインでドメイン名が短いとCookie送ってくれないことがあるらしいが、仕事プロジェクトではないのでシカトしておこう。

kay.sessions.middleware.LazySession/SessionMiddlewareをコピペして、Cookieまわりの扱いのロジックをdjango-bpmobileから移植すればBPMobileSessionMiddlewareも動きそう。ためしに書いてみたが、僕の用途ではセッションはいらなかったんだった。

セッションはいらないが、ログインはさせたいお年頃。DoCoMoでCookieが食えない端末のみ、request.cookieにログイン用の情報をmiddlewareで仕込んであげれば、User.get_current_user()を騙せるのではないか。騙すためには、Cookieのキーが必要。開発環境ではgoogle.appengine.tools.dev_appserver_login.COOKIE_NAMEであるところのdev_appserver_loginがキーなのだが、本番環境でCookieのキーを取る方法がわからない。responseを返すときに設定されるcookieを全て保存して、iモードIDに結びつけるという荒業も考えられる。これだったら、Cookieのキーは必要ない。

むしろ、セッションについてもCookieエミュレーションを行ったほうが、kayがもともと持つセッション機構を使えてよいのかもしれない。コピペしなくていいし。DoCoMoのCookie対応端末も増えていくだろうし。BPMobileDoCoMoCookieEmulationMiddleware的な。これ書こう、これ。←いまここ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>91</wp:post_id>
		<wp:post_date>2010-12-28 05:31:57</wp:post_date>
		<wp:post_date_gmt>2010-12-27 20:31:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>kay-framework%e3%81%a7%e6%90%ba%e5%b8%af%e9%9b%bb%e8%a9%b1%e5%af%be%e5%bf%9c%e3%82%b5%e3%82%a4%e3%83%88%e3%82%92%e4%bd%9c%e3%81%a3%e3%81%a6%e3%81%bf%e3%82%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-app-engine"><![CDATA[Google App Engine]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="category" nicename="%e6%8a%80%e8%a1%93%e3%83%a1%e3%83%a2"><![CDATA[技術メモ]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google App Engine(Python)でどう絵文字を扱うか悩む</title>
		<link>http://blog.wktk.co.jp/archives/96</link>
		<pubDate>Thu, 30 Dec 2010 22:50:30 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=96</guid>
		<description></description>
		<content:encoded><![CDATA[Google App Engine上のサービスで絵文字対応をしたい。2010年12月現在。

「各キャリアで書き込んだ文字列が、そのまま表示される。」「他キャリアで書き込んだ文字列が、なるべく再現できる。」の２つを実現したい。
django-bpmobileでは、au/softbankの絵文字をすべてDoCoMoの絵文字に変換している。変換できない絵文字はそのままのようだ。
django-bpmobileのアプローチでは、前者の条件は満たすが、後者の条件は満たせないと思う。

emoji-pythonライブラリを使うという手もある。
http://code.google.com/p/emoji-python/
しかし、Unicode 6.0では絵文字の一部が含まれたとのことで、できればUnicode側のコードポイントを使いたい。
タグの開き文字・閉じ文字に工夫が必要な点も気になる。

django-bpmobileでは、DoCoMoの絵文字コードとの変換テーブルに、emoji4unicodeプロジェクトの成果を利用している。
PerlのEncode::JP::Emojiモジュールでも、同プロジェクトの変換テーブルを利用している。

emoji4unicodeプロジェクトでは、xml形式で絵文字変換テーブルを提供している。それをパースするPythonスクリプトも提供されている。
変換テーブルは以下のようなスクリプトで簡単に取り出せる。

<pre class="syntax python">
#!/usr/bin/python
from e4u import emoji4unicode as e4u_google

e4u_google.Load()

def describe_code(code_table, carrier):
  print 'carrier: %s' % carrier
  code_str = code_table[carrier]
  if code_str[0] == '>':
    code_str = code_str[1:]
  if code_str:
    codes = ''
    for code_char in code_str.split('+'):
      symbol = e4u_google.all_carrier_data[carrier].SymbolFromUnicode(code_char)
      print {
        'number'    : symbol.number,
        'new_number': symbol.new_number,
        'old_number': symbol.old_number,
        'jis'       : symbol.jis,
        'shift_jis' : symbol.shift_jis,
        'uni'       : symbol.uni,
        'english_name': symbol.GetEnglishName(),
        'japanese_name': symbol.GetJapaneseName(),
        'image_html': symbol.ImageHTML(),
      }
    return codes
  return ''

def main():
  for e in e4u_google._doc.getElementsByTagName('e'):
    # convert to normal dict
    d = {}
    for k, v in e.attributes.items():
      d[k] = v
    print '*' * 40
    print d
    for carrier in ['docomo', 'kddi', 'softbank', 'google']:
      if d.has_key(carrier):
        describe_code(d, carrier)

main()
</pre>

emoji4unicodeでは、Googleが内部で用いている絵文字コードとの変換表もある。この絵文字コードを採用すればいいのではないか。「Google」App Engineだし。
その場合、以下の3つが実現できればよい。
1. 各キャリアから送られる、絵文字を含んだ文字列(Shift-JIS or UTF-8)を、Googleの絵文字コードを用いたUTF-8の文字列に変換する。
2. Googleの絵文字コードを含んだUTF-8文字列を、各キャリアの絵文字コードや数値参照、&lt;img&gt;タグを含んだ文字列に変換する。
3. Googleの絵文字コード、もしくは絵文字の名前を属性に持つ特殊な文字列をテンプレートに書けば、2.と同様の変換を行って表示する。

上記のスクリプトを改造して、これらの変換は実現できるだろう。PerlのEncode::JP::Emojiモジュールでも同様の変換を行い、Perlスクリプトを出力している。
Perlの場合は、trで正規表現を用いて高速に変換を行っているが、Pythonのstring.maketransはPerlのtrほど表現力はないはず。検索だけは正規表現を使うか。

Googleの絵文字コードには、現在3つの問題がある。
1. Unicodeの第15面にある私用領域(PUA)にマッピングされている。コードの範囲は、U+F0000からU+FFFFD。よって、UTF-8では4byteとなる。古いMySQLでは、保存ができない。
2. U+FEB64について、Unicode 6.0にて対応するコードポイントが2つ存在する。
3. emoji4unicodeに、willcomの絵文字との変換表がない。

1.については、MySQL 5.5.3から導入されたutf8mb4というcharsetを用いればよい。今回は、Google App Engineを用いるので、保存については問題ないだろう。
2.については、Unicode/Google絵文字コードの相互変換を行わなければさほど問題はなさそうだが、将来emoji4unicodeのマッピングが変更された場合、softbankでU+E21Aの文字列を入力した際の変換先が異なる可能性がある。なんとなくやだなー。
3.については、自らマッピングを作成するしかないだろう。

結局は、emoji-pythonライブラリで使われている、キャリア名+絵文字番号という表現形式を、1対1でUnicodeの私用領域に収めるのがいいという印象。
Unicode 6.0ですべての絵文字が採択されれば、似たような絵文字がまとめられるのもよかったかもしれないけど。
んでも、emoji-pythonもwillcomの絵文字マッピングはないのね。

絵文字対応したいという気持ちがだんだん萎えてきた！うおおお←いまここ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>96</wp:post_id>
		<wp:post_date>2010-12-31 07:50:30</wp:post_date>
		<wp:post_date_gmt>2010-12-30 22:50:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>96</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="category" nicename="%e6%8a%80%e8%a1%93%e3%83%a1%e3%83%a2"><![CDATA[技術メモ]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_fdcce4d11539fd4b5f0647cade90b56b</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_4259aa906a8f65c2096b616498733b64</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GoogleアカウントとGoogle Appsアカウントが同一メールアドレスの場合、App Engineのアプリケーション作成に不具合あり</title>
		<link>http://blog.wktk.co.jp/archives/100</link>
		<pubDate>Sun, 02 Jan 2011 13:39:35 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=100</guid>
		<description></description>
		<content:encoded><![CDATA[Google App Engineでおそらく不具合であろう挙動に出会った。
誰か情報があったら助けてほしいな。

通常のGoogleのアカウントを、AAAA@example.comで取得。
そのアカウントを使い、Google App Engineに登録。
その後、Google Appsのアカウントを AAAA@example.com で取得。

こういった状態のもと、App Engine 管理コンソールで作成したアプリケーションがリストに追加されないという問題があった。
<a href="https://groups.google.com/group/google-app-engine-japan/browse_thread/thread/3cde38b1695db422/bd2efc8262c88322?show_docid=bd2efc8262c88322&hl=ja">https://groups.google.com/group/google-app-engine-japan/browse_thread/thread/3cde38b1695db422/bd2efc8262c88322?show_docid=bd2efc8262c88322&hl=ja
</a>と同じ症状のようだ。

上記メールの方は、以下のAppsログインページからログインすれば問題が解決したようだ。
http://appengine.google.com/a/example.com/
僕の場合は、「Unauthorized You are not authorized to access this application.」というエラーが出てNG。

どうやら、Google Appsのアカウントに登録しているメールアドレスと、
通常のGoogleアカウントのメールアドレスがかぶっていると、
よからぬことが起こるらしい。
<a href="http://www.google.com/support/a/bin/answer.py?answer=185172">http://www.google.com/support/a/bin/answer.py?answer=185172</a>
<a href="http://www.google.com/support/a/bin/answer.py?answer=185186">http://www.google.com/support/a/bin/answer.py?answer=185186</a>

メールアドレスがかぶっているのがよくないと考え、
- Googleの個人アカウントは、そのままAAAA@example.comとする。
- Google Appsのアカウントを、BBBB@example.comに変更する。
をチャレンジ。

Googleの個人アカウントの設定ページで、AAAA@example.comのメールアドレスを、CCCC@example.comに変更。
Google Appsの管理画面で、BBBB@example.com というユーザを作成し、AAAA@example.com というユーザを削除。
Googleの個人アカウントの設定ページで、CCCC@example.comのメールアドレスを、AAAA@example.comに変更。

さあこれでどうだ！…やっぱり問題解決せず。
しかも、appcfg updateでAAAA@example.comのメールアドレスを指定してデプロイすることも出来なくなっている。

どうやら、Google AppsアカウントでありなおかつAAAA@example.comでないと、
アプケーションリストをきちんと閲覧することができない & デプロイできないのではないか、と予想。

方針を変えて、
- Googleの個人アカウントは、DDDD@example.comとする。
- Google Appsのアカウントを、AAAA@example.comに戻す。
をチャレンジ。

しようと思ったら、なんと削除したメールアドレスでは5日間Appsアカウントの作成ができないらしい。うおお。
<a href="http://www.google.com/support/a/bin/answer.py?answer=107878&&hl=en">http://www.google.com/support/a/bin/answer.py?answer=107878&&hl=en</a>

いろいろ移行作業をしている途中で、http://appengine.google.com/を見てみると、
アプリケーションが複数表示されているのに、
残りアプリケーション数が10になっている状態などを体験した。
再現手順を確立していないが、アプリケーション数制限10を超えられる方法がありそうな気がする。

Issue Trackerに報告しようと思ったら、似たような問題を報告している人がいた。
<a href="http://code.google.com/p/googleappengine/issues/detail?id=2421">http://code.google.com/p/googleappengine/issues/detail?id=2421</a>
んでも放置されているんだよなー…

とりあえず、5日待ってAAAA@example.comのアカウント作成を再申請してみるか。復活してほしい。

[追記] 復活できなかったので、問題を報告しておいた。
<a href="http://code.google.com/p/googleappengine/issues/detail?id=4388">http://code.google.com/p/googleappengine/issues/detail?id=4388</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>100</wp:post_id>
		<wp:post_date>2011-01-02 22:39:35</wp:post_date>
		<wp:post_date_gmt>2011-01-02 13:39:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google%e3%82%a2%e3%82%ab%e3%82%a6%e3%83%b3%e3%83%88%e3%81%a8google-apps%e3%82%a2%e3%82%ab%e3%82%a6%e3%83%b3%e3%83%88%e3%81%8c%e5%90%8c%e4%b8%80%e3%83%a1%e3%83%bc%e3%83%ab%e3%82%a2%e3%83%89%e3%83%ac</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-app-engine"><![CDATA[Google App Engine]]></category>
		<category domain="category" nicename="%e6%8a%80%e8%a1%93%e3%83%a1%e3%83%a2"><![CDATA[技術メモ]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_7970c4bb6b4168a0d441de3c4dc89706</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_23a5db78236fcb49363997de955adf8f</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Kay Frameworkでの携帯開発を支援するkay-jpmobileを公開</title>
		<link>http://blog.wktk.co.jp/archives/105</link>
		<pubDate>Mon, 03 Jan 2011 01:35:25 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=105</guid>
		<description></description>
		<content:encoded><![CDATA[Kay Frameworkで携帯サイト開発を支援する、kay-jpmobileというアプリケーションを書いてみた。django-bpmobileのKay移植版的な。bpmobileにはまったく及んでいませんが、絵文字まわりがある程度実装できたので、とりあえず公開。

<a href="https://bitbucket.org/gunyarakun/kay-jpmobile">リポジトリはbitbucketにあります</a>。Mercurialではじめてclone以外の操作を行った！

ちなみに、i-mode端末で、Cookieに対応していないものではログイン・ログアウトができないと思います。単なるセッションなら使えるかも。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>105</wp:post_id>
		<wp:post_date>2011-01-03 10:35:25</wp:post_date>
		<wp:post_date_gmt>2011-01-03 01:35:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>kay-framework%e3%81%a7%e3%81%ae%e6%90%ba%e5%b8%af%e9%96%8b%e7%99%ba%e3%82%92%e6%94%af%e6%8f%b4%e3%81%99%e3%82%8bkay-jpmobile%e3%82%92%e5%85%ac%e9%96%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-app-engine"><![CDATA[Google App Engine]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="category" nicename="%e6%8a%80%e8%a1%93%e3%83%a1%e3%83%a2"><![CDATA[技術メモ]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>53</wp:comment_id>
			<wp:comment_author><![CDATA[tasuku]]></wp:comment_author>
			<wp:comment_author_email>blog@wktk.co.jp</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>118.22.44.9</wp:comment_author_IP>
			<wp:comment_date>2011-02-22 18:14:22</wp:comment_date>
			<wp:comment_date_gmt>2011-02-22 09:14:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[ご指摘ありがとうございます！changeset 12:306149e655baにて修正いたしました。]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1298366062.69";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"tasuku";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>52</wp:comment_id>
			<wp:comment_author><![CDATA[みずしまじゅんき]]></wp:comment_author>
			<wp:comment_author_email>j@xn--tpt493a.jp</wp:comment_author_email>
			<wp:comment_author_url>http://xn--tpt493a.jp</wp:comment_author_url>
			<wp:comment_author_IP>210.196.180.82</wp:comment_author_IP>
			<wp:comment_date>2011-02-15 18:46:30</wp:comment_date>
			<wp:comment_date_gmt>2011-02-15 09:46:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[(11:9d1fbec280caにて確認)
middleware.pyの70行目でcontent-typeのヘッダを書き換えていますが、これは57行目からはじまるifの中に入れたほうがいいのではないでしょうか。
このままだと、動的に画像を生成してcontent-typeをimage/jpegで出力したい場合でも書き換えられてしまいます。]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1297763190.83";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1297763619.02";s:7:"message";s:45:"tasuku changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"tasuku";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>110</wp:comment_id>
			<wp:comment_author><![CDATA[masayuki]]></wp:comment_author>
			<wp:comment_author_email>blog@verygoodtown.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.verygoodtown.com/</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2011-10-20 20:31:51</wp:comment_date>
			<wp:comment_date_gmt>2011-10-20 11:31:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[初めまして！

kay-jpmobileを使わせてもらおうと思いプロジェクトに組み込んだ所
emoji_table.pyのmaxunicodeでエラーが発生してしまいました。
kayのバージョンは1.1.1を使用しています。

my-project-name/lib/jpmobile/emoji_table.py", line 4, in 
    raise UnicodeError, "Python internal code must be UCS-4."
UnicodeError: Python internal code must be UCS-4.

ローカル環境にあるpython2.5のmaxunicodeの値を調べた所
&gt;&gt;&gt; from sys import maxunicode
&gt;&gt;&gt; print maxunicode
65535

となっていました。


これはどのように対応すればよろしいかご教授いただけないでしょうか。
よろしくお願いします。]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1319162289.7231";s:7:"message";s:53:"tasuku がコメントの状態を approved に変更";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"tasuku";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1319110312.0083";s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>112</wp:comment_id>
			<wp:comment_author><![CDATA[tasuku]]></wp:comment_author>
			<wp:comment_author_email>blog@wktk.co.jp</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2011-10-21 11:02:41</wp:comment_date>
			<wp:comment_date_gmt>2011-10-21 02:02:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[masayukiさん、質問ありがとうございます。

Python自身の内部エンコーディングがucs4である必要があります。
Pythonのビルド時に–enable-unicode=ucs4を指定すれば、
内部エンコーディングをucs4に出来ます。

以下のブログが参考になります。
http://dsas.blog.klab.org/archives/51322951.html]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>110</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1319162561.6237";s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"tasuku";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Install ØMQ(zeromq) with libuuid from source code.</title>
		<link>http://blog.wktk.co.jp/archives/108</link>
		<pubDate>Tue, 04 Jan 2011 16:01:57 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=108</guid>
		<description></description>
		<content:encoded><![CDATA[zeromq requires libuuid which is included in packages such as e2fsprogs-devel (RHEL/CentOS etc.) or libuuid-dev (Debian/Ubuntu).

e2fsprogs-devel contains not only libuuid but also many other libraries. If you need install ONLY libuuid from source code(and build zeromq with it), you should follow below.

<pre class="syntax bash-script">
PREFIX=/usr

# libuuid
tar xvfz e2fsprogs-1.41.12.tar.gz
cd e2fsprogs-1.41.12
./configure --enable-elf-shlibs --disable-testio-debug --disable-debugfs --disable-imager --disable-resizer
make
cp lib/libuuid*.a ${PREFIX}/lib
cp lib/libuuid*.so* ${PREFIX}/lib
cp lib/uuid/uuid.h ${PREFIX}/include/uuid
cp lib/uuid/uuid.pc ${PREFIX}/lib/pkgconfig
cd ..

# zeromq
tar xvfz zeromq-2.0.10.tar.gz
cd zeromq-2.0.10
CFLAGS="-I${PREFIX}/include" CXXFLAGS="-I${PREFIX}/include" LDFLAGS="-L${PREFIX}/lib" ./configure --prefix=${PREFIX}
make
make install
cd ..
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>108</wp:post_id>
		<wp:post_date>2011-01-05 01:01:57</wp:post_date>
		<wp:post_date_gmt>2011-01-04 16:01:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>install-%c3%b8mqzeromq-with-libuuid-from-source-code</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="english"><![CDATA[English]]></category>
		<category domain="category" nicename="%e6%8a%80%e8%a1%93%e3%83%a1%e3%83%a2"><![CDATA[技術メモ]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>全文検索エンジンgroongaについての発表資料を公開しました。</title>
		<link>http://blog.wktk.co.jp/archives/116</link>
		<pubDate>Tue, 01 Feb 2011 08:24:24 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=116</guid>
		<description></description>
		<content:encoded><![CDATA[2010年末に、３つに勉強会にて「全文検索エンジンgroonga」の紹介をさせていただきました。
<ul>
	<li><a href="http://atnd.org/events/9458" target="_blank">第4回Solr勉強会</a></li>
	<li><a href="http://atnd.org/events/9234" target="_blank">groongaを囲む夕べ</a></li>
	<li><a href="http://info.dwango.co.jp/rd/2010/12/2.html" target="_blank">ドワンゴ技術勉強会(2) MySQL</a>について</li>
</ul>
それぞれの勉強会にて用いた発表資料を公開いたします。

<!--more-->

groongaの紹介部分については使いまわしがバレバレですが、それぞれの勉強会の特性に合わせた味付けをしているので、ぜひご覧になっていただければ嬉しいです。勉強会当日のレポートをされている方もいらっしゃるようなので、興味のある方は検索してみるとよいでしょう。

また、groongaを囲む夕べに関しては、他の発表者さんの資料も以下のリンクから見ることができます。
<ul>
	<li><a href="http://www.clear-code.com/blog/2010/12/1.html" target="_blank">Ruby/groonga (rroonga/ActiveGroonga/Racknga) について</a></li>
	<li><a href="http://www.slideshare.net/ItagakiTakahiro/textsearch-groonga-v01" target="_blank">textsearch groonga</a></li>
</ul>
<h3>第4回Solr勉強会</h3>
Solrという全文検索システムがあります。LuceneというJavaによる全文検索ライブラリをラップしたもので、HTTPを経由して簡単に検索を行うことができます。いわばgroongaのライバル的な存在です。

そのSolrの勉強会にお呼ばれしたので、ビクビクしながら発表した資料です。
<div id="__ss_6771718" style="width: 425px;"><strong style="display: block; margin: 12px 0 4px;"><a title="全文検索エンジン groongaの紹介@Solr勉強会#4" href="http://www.slideshare.net/TasukuSuenaga/groonga">全文検索エンジン groongaの紹介@Solr勉強会#4</a></strong><object id="__sse6771718" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="425" height="355" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"><param name="allowFullScreen" value="true" /><param name="allowScriptAccess" value="always" /><param name="src" value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=solr-groonga-110201015127-phpapp02&amp;stripped_title=groonga&amp;userName=TasukuSuenaga" /><param name="name" value="__sse6771718" /><param name="allowfullscreen" value="true" /><embed id="__sse6771718" type="application/x-shockwave-flash" width="425" height="355" src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=solr-groonga-110201015127-phpapp02&amp;stripped_title=groonga&amp;userName=TasukuSuenaga" allowfullscreen="true" allowscriptaccess="always" name="__sse6771718"></embed></object>&nbsp;
<div style="padding: 5px 0 12px;">View more <a href="http://www.slideshare.net/">presentations</a> from <a href="http://www.slideshare.net/TasukuSuenaga">Tasuku Suenaga</a>.</div>
</div>
<h3>groongaを囲む夕べ</h3>
groongaオンリーイベントです。スキマフェスティバル2010の一環として開催…ではなく、飛ぶ鳥を落とす勢いのGREEさんに会議室をお貸しいただきました。ありがとうございます。

groongaオンリーイベントということで、groongaの内部構造については他の資料に比べてちょっと詳しいです。
<div id="__ss_6771789" style="width: 425px;"><strong style="display: block; margin: 12px 0 4px;"><a title="全文検索エンジンgroongaの紹介@groongaを囲む夕べ" href="http://www.slideshare.net/TasukuSuenaga/groongagroonga">全文検索エンジンgroongaの紹介@groongaを囲む夕べ</a></strong><object id="__sse6771789" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="425" height="355" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"><param name="allowFullScreen" value="true" /><param name="allowScriptAccess" value="always" /><param name="src" value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=gree-groonga-110201020327-phpapp01&amp;stripped_title=groongagroonga&amp;userName=TasukuSuenaga" /><param name="name" value="__sse6771789" /><param name="allowfullscreen" value="true" /><embed id="__sse6771789" type="application/x-shockwave-flash" width="425" height="355" src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=gree-groonga-110201020327-phpapp01&amp;stripped_title=groongagroonga&amp;userName=TasukuSuenaga" allowfullscreen="true" allowscriptaccess="always" name="__sse6771789"></embed></object>&nbsp;
<div style="padding: 5px 0 12px;">View more <a href="http://www.slideshare.net/">presentations</a> from <a href="http://www.slideshare.net/TasukuSuenaga">Tasuku Suenaga</a>.</div>
</div>
<h3>ドワンゴ技術勉強会(2)</h3>
ドワンゴの荒木さんにお呼ばれされて発表しました。MySQLについての話がメインの勉強会ということで、それに沿ったお話をしました。配られたハンバーガーがおいしかったです。

MySQL + groongaであるmroongaは、まだまだ開発すべき項目が残っている状況です。
<div id="__ss_6139206" style="width: 425px;"><strong style="display: block; margin: 12px 0 4px;"><a title="MySQLを通じた全文検索エンジンSenna/groongaの利用について" href="http://www.slideshare.net/TasukuSuenaga/mysqlsennagroonga-6139206">MySQLを通じた全文検索エンジンSenna/groongaの利用について</a></strong><object id="__sse6139206" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="425" height="355" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"><param name="allowFullScreen" value="true" /><param name="allowScriptAccess" value="always" /><param name="src" value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=dwango-groonga-101213022805-phpapp02&amp;stripped_title=mysqlsennagroonga-6139206&amp;userName=TasukuSuenaga" /><param name="name" value="__sse6139206" /><param name="allowfullscreen" value="true" /><embed id="__sse6139206" type="application/x-shockwave-flash" width="425" height="355" src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=dwango-groonga-101213022805-phpapp02&amp;stripped_title=mysqlsennagroonga-6139206&amp;userName=TasukuSuenaga" allowfullscreen="true" allowscriptaccess="always" name="__sse6139206"></embed></object>&nbsp;
<div style="padding: 5px 0 12px;">View more <a href="http://www.slideshare.net/">presentations</a> from <a href="http://www.slideshare.net/TasukuSuenaga">Tasuku Suenaga</a>.</div>
</div>
<script src="https://b.scorecardresearch.com/beacon.js?c1=7&amp;c2=7400849&amp;c3=1&amp;c4=&amp;c5=&amp;c6="></script><script src="https://b.scorecardresearch.com/beacon.js?c1=7&amp;c2=7400849&amp;c3=1&amp;c4=&amp;c5=&amp;c6="></script><script src="https://b.scorecardresearch.com/beacon.js?c1=7&amp;c2=7400849&amp;c3=1&amp;c4=&amp;c5=&amp;c6="></script>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>116</wp:post_id>
		<wp:post_date>2011-02-01 17:24:24</wp:post_date>
		<wp:post_date_gmt>2011-02-01 08:24:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%85%a8%e6%96%87%e6%a4%9c%e7%b4%a2%e3%82%a8%e3%83%b3%e3%82%b8%e3%83%b3groonga%e3%81%ab%e3%81%a4%e3%81%84%e3%81%a6%e3%81%ae%e7%99%ba%e8%a1%a8%e8%b3%87%e6%96%99%e3%82%92%e5%85%ac%e9%96%8b%e3%81%97</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="groonga"><![CDATA[groonga]]></category>
		<category domain="category" nicename="%e6%8a%80%e8%a1%93%e3%83%a1%e3%83%a2"><![CDATA[技術メモ]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_su_rich_snippet_type</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>wpsd_autopost</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Kay Framework Dev Lounge #7でKay-jpmobileの発表をしました。</title>
		<link>http://blog.wktk.co.jp/archives/119</link>
		<pubDate>Tue, 01 Feb 2011 08:35:36 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=119</guid>
		<description></description>
		<content:encoded><![CDATA[Google App Engine専用Webフレームワークである、Kayの勉強会、Kay Framework Dev Lounge #7に参加しました。

そこで、Kayで日本の携帯電話の文字コードや絵文字を扱うことのできるモジュール、kay-jpmobileについて簡単に発表しました。

<!--more-->

当日、Ianさんから「gatewayのIPアドレスをチェックしないと、Cookieが食えないDoCoMoの場合はセッションハイジャックの恐れがある、よってそれをいれたほうがいいよね」というご指摘をいただきました。各社のgatewayについて、Webページではなく、DNSかなにかで公開してくれればいいなあ、という雑談もした記憶があります。
<div id="__ss_6771805" style="width: 425px;"><strong style="display: block; margin: 12px 0 4px;"><a title="kay-jpmobile" href="http://www.slideshare.net/TasukuSuenaga/kayjpmobile">kay-jpmobile</a></strong><object id="__sse6771805" width="425" height="355"><param name="movie" value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=kay-jpmobile-110201020935-phpapp02&amp;stripped_title=kayjpmobile&amp;userName=TasukuSuenaga" /><param name="allowFullScreen" value="true" /><param name="allowScriptAccess" value="always" /><embed type="application/x-shockwave-flash" width="425" height="355" src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=kay-jpmobile-110201020935-phpapp02&amp;stripped_title=kayjpmobile&amp;userName=TasukuSuenaga" allowfullscreen="true" allowscriptaccess="always" name="__sse6771805"></embed></object>
<div style="padding: 5px 0 12px;">View more <a href="http://www.slideshare.net/">presentations</a> from <a href="http://www.slideshare.net/TasukuSuenaga">Tasuku Suenaga</a>.</div>
</div>
<script src="https://b.scorecardresearch.com/beacon.js?c1=7&amp;c2=7400849&amp;c3=1&amp;c4=&amp;c5=&amp;c6="></script>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>119</wp:post_id>
		<wp:post_date>2011-02-01 17:35:36</wp:post_date>
		<wp:post_date_gmt>2011-02-01 08:35:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>kay-framework-dev-lounge-7%e3%81%a7kay-jpmobile%e3%81%ae%e7%99%ba%e8%a1%a8%e3%82%92%e3%81%97%e3%81%be%e3%81%97%e3%81%9f%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google-app-engine"><![CDATA[Google App Engine]]></category>
		<category domain="category" nicename="%e6%8a%80%e8%a1%93%e3%83%a1%e3%83%a2"><![CDATA[技術メモ]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_su_rich_snippet_type</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hadoop徹底入門を献本いただきました。</title>
		<link>http://blog.wktk.co.jp/archives/124</link>
		<pubDate>Tue, 01 Feb 2011 13:01:14 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=124</guid>
		<description></description>
		<content:encoded><![CDATA[株式会社プリファードインフラストラクチャーに遊びにいったところ、CTOの太田一樹さんから「Hadoop徹底入門」の献本をいただきました。ありがとうございます！
サインまでもらっちゃった！
<div class="wp-caption alignnone" style="width: 500px;"><a class="thickbox" title="P1000821" href="https://farm6.static.flickr.com/5011/5406958747_e28437939a_b.jpg"><img src="https://farm6.static.flickr.com/5011/5406958747_e28437939a_m.jpg" alt="P1000821" title="P1000821" width="240" height="180" /></a><a class="thickbox" title="P1000823" href="https://farm6.static.flickr.com/5092/5406959299_20a67d61b6_b.jpg"><img src="https://farm6.static.flickr.com/5092/5406959299_20a67d61b6_m.jpg" alt="P1000823" title="P1000823" width="240" height="180" /></a></div>
入門とうたうだけあって、Hadoopそのものの説明もしっかりと書かれています。何ができ、何ができないか、他のミドルウェアと比べてどういった位置づけになるのか、といった基本的な概念をしっかりと理解できました。何ができないか、というのはミドルウェアを使う上で重要な事柄ですが、なかなかこういった書籍には書かれていない印象があります。

注目は、Hiveに1章を割いていることでしょう。「SQLで処理が実行できるかどうかは、ユーザにとってミドルウェアを選択する大きな基準となる」ということは、Tritonnの開発に参加していて痛感しています。Hiveを大きく紹介することによって、Hadoop導入への敷居が少し低く感じられるようになるのではないでしょうか。

運用に関するトピックが7章から10章にあり、ここもオススメです。

Hadoopを使う場合には、必然的に多数のサーバを扱うことになります。環境構築が自動化されていなければ、構築をする人間がボトルネックとなってしまいます。7章「環境構築の効率化」8章「運用監視とシステムの可視化」では、外部のソフトウェアを用いた実例が載っております。

9章「可用性の向上」では、どのノード・どのコンポーネントに障害があったら、どういった影響があるか、また、そのような障害を防ぐためにはどうすればよいか、といったトピックが扱われています。障害回避できる運用例も紹介されています。

10章「性能向上のためのチューニング」では、各種チューニング項目についての説明が、多くの図を織り交ぜてなされています。どのようなボトルネックが生じうるのか、またどのように調整すればいいのか、といった内容がわかりやすかったです。

Hadoopについて、運用面でのトピックを含め、さまざまなトピックを網羅的に扱っている書籍です。実用的にHadoopを使いたい、といった方にオススメします。

是非お買い求めください。2011/2/1現在、楽天ブックスには在庫あり、Amazonには在庫なしです。

[rakuten]001:9784798122335[/rakuten]

http://www.amazon.co.jp/Hadoop%E5%BE%B9%E5%BA%95%E5%85%A5%E9%96%80-%E5%A4%AA%E7%94%B0-%E4%B8%80%E6%A8%B9/dp/4798122335

そして、私に献本いただけたらこのような愛のあるレビューを書きます。レッツ献本です！（卑しい目をしつつ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>124</wp:post_id>
		<wp:post_date>2011-02-01 22:01:14</wp:post_date>
		<wp:post_date_gmt>2011-02-01 13:01:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hadoop%e5%be%b9%e5%ba%95%e5%85%a5%e9%96%80%e3%82%92%e7%8c%ae%e6%9c%ac%e3%81%84%e3%81%9f%e3%81%a0%e3%81%8d%e3%81%be%e3%81%97%e3%81%9f%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e5%91%8a%e7%9f%a5"><![CDATA[告知]]></category>
		<category domain="category" nicename="%e6%8a%80%e8%a1%93%e3%83%a1%e3%83%a2"><![CDATA[技術メモ]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_77dbcbd442b22dc6f8d124a3db702155</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_b8d786b55d66d2d55e7501da908ac021</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_49f9c84022d3abd235a19e40b6637118</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>新しい概念「サンリオ力」を提唱します</title>
		<link>http://blog.wktk.co.jp/archives/269</link>
		<pubDate>Wed, 24 Oct 2012 15:00:59 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=269</guid>
		<description></description>
		<content:encoded><![CDATA[造語には、力がある。

深澤真紀による「草食男子」は、もはや一般概念といってもよい浸透ぶりである。いち現象を示すための単語というレベルを超えた。もはやその単語自身があらたな価値観を作り出しているように感じる。

<a href="http://www.mri.co.jp/REPORT/JOURNAL/2006/jm06111508.pdf">トヨタ自動車の岡本渉による「見える化」</a>は、「可視化」に置換しても意味が通じる言葉にもかかわらず、好んで使われるし、実際ニュアンスが違うように感じる。

赤瀬川原平による「老人力」、安野モヨコによる「女子力」など、「～力」と名のつく造語がある。僕は、<strong>「サンリオ力」</strong>という造語を提案したい。

「サンリオ力」とは、<strong>多様性を確保すること</strong>、である。多様性そのものではなく、それを確保すること、に重みをおいている。

<a href="http://dic.nicovideo.jp/a/%E3%81%8A%E3%81%BE%E3%81%88%E3%81%AF%E4%BD%95%E3%82%92%E8%A8%80%E3%81%A3%E3%81%A6%E3%81%84%E3%82%8B%E3%82%93%E3%81%A0">おまえは何を言っているんだ</a>って？ サンリオの歴代キャラクター群を見てごらんなさい。
<ul>
	<li><a href="http://www.sanrio.co.jp/characters/year/index.html">1970年代のサンリオキャラクター</a></li>
	<li><a href="http://www.sanrio.co.jp/characters/year/1980.html">1980年代のサンリオキャラクター</a></li>
	<li><a href="http://www.sanrio.co.jp/characters/year/1990.html">1990年代のサンリオキャラクター</a></li>
	<li><a href="http://www.sanrio.co.jp/characters/year/2000.html">2000年代のサンリオキャラクター</a></li>
	<li><a href="http://www.sanrio.co.jp/characters/year/2010.html">2010年代のサンリオキャラクター</a></li>
</ul>
「もうこれは定番だよね」、「あ、こんなキャラクターいたな、なつかしー」と思うキャラクター、多かったと思う。

でもね、<strong>「こんなんあったんや…」</strong>的なキャラクターの多さ！これが「サンリオ力」である。

いくつかキャラクターの例を挙げてみよう。

&nbsp;

カルチャーショックというキャラクターがいる。

<a href="http://www.sanrio.co.jp/characters/detail/cultureshock/index.html"><img alt="" src="https://www.sanrio.co.jp/characters/detail/cultureshock/images/img_001.gif" /></a>
<blockquote>『西洋の文化を学ぶために花の都パリに洋行したお侍さん、
夢之介と鉄之進が体験するカルチャーショック！』</blockquote>
「これが商品化されていた」という事実が僕にとってカルチャーショックだぞ。これがヒットするロジックが、皆目わからない。でも、これ、当たっていたのかもしれない。

&nbsp;

ピエロ・カモメ・きりん、などは、もう一般名詞である。「Windows」と同じですよ。

<a href="http://www.sanrio.co.jp/characters/detail/pierrot/index.html">
<img alt="" src="https://www.sanrio.co.jp/characters/detail/pierrot/images/img_001.gif" />
</a>
<a href="http://www.sanrio.co.jp/characters/detail/kamome/index.html">
<img alt="" src="https://www.sanrio.co.jp/characters/detail/kamome/images/img_001.gif" />
</a>
<a href="http://www.sanrio.co.jp/characters/detail/kirin/index.html">
<img alt="" src="https://www.sanrio.co.jp/characters/detail/kirin/images/img_001.gif" />
</a>

&nbsp;

Twitterで、おなかが痛いことを「ぽんぽんぺいん」と称するのがはやっている。ノンノン。そいつは古いぜ。これからは、「ぽんぽんひえた」だぜ！！！ #ponponhieta

<a href="http://www.sanrio.co.jp/characters/detail/ponponhieta/index.html"><img alt="" src="https://www.sanrio.co.jp/characters/detail/ponponhieta/images/img_001.gif" /></a>

たぶん「みんなのたぁ坊」系を狙ったんだと思う。それにしても、まったくヒットの予感がしない。「もし高校野球の女子マネージャーがドラッカーの『マネジメント』を読んだら」と同じくらいに。僕がサンリオのそれなりに偉い立場だったら、これの商品化リジェクトしてますよ、おそらく。でも、サンリオはコイツを商品化してきた。

そもそも、「みんなのたぁ坊」が成功していた、というのも後知恵である。僕だったら「たぁ坊」もリジェクトしているぞ。しかし、「たぁ坊」は当たった。

<img class="alignnone" title="みんなのたぁ坊" alt="" src="https://www.sanrio.co.jp/characters/detail/tabo/images/index_img_001.jpg" width="357" height="325" />

&nbsp;

昔ファミ通で、こんな話を読んだことがある。クレヨンしんちゃんを読んで、これは当たると思った。ゲーム化権を獲得したいと思い、上司にかけあった。上司は「こんな下品なマンガのゲームが当たるはずがない」とそれをリジェクトした。そういう話だった。臼井儀人作品は「おーえるグミ」が一番好きな僕でさえ、上司の気持ちはよくわかる。「クレヨンしんちゃん」は大当たりだ。

&nbsp;

ハンギョドンもそれなりに当たった。

<img alt="" src="https://www.sanrio.co.jp/characters/detail/hangyodon/images/img_001.jpg" />

「半獣半人」ですよ。絶対カースト外。これが当たったのがなぜか、僕には説明できない。

&nbsp;

死んでいるキャラクターと思われがちな「バッドばつ丸」は、米国人気が高いそうだ。実際、「バッドばつ丸」はハワイのオアフ島生まれである。ああ無駄知識。

<img class="alignnone" title="バッドばつ丸" alt="" src="https://www.sanrio.co.jp/characters/detail/badtzmaru/images/index_img_001.jpg" width="370" height="321" />

<a href="http://ja.wikipedia.org/wiki/%E3%83%9B%E3%83%83%E3%83%88%E3%83%BB%E3%83%81%E3%83%83%E3%82%AF">The Hot Chick</a>というB級映画がある。もちろん、B級映画という呼称は褒め言葉である。とたまたまテレビの深夜放送でやっていた。かなり面白かった。映画内のワンシーン、主人公の女子高生の部屋が映し出されていた。ベッドの上に、なんと「バッドばつ丸」のぬいぐるみが置いてあったのだ。

&nbsp;

イチゴマンというキャラを知っているだろうか。

<img alt="" src="https://www.sanrio.co.jp/characters/detail/ichigoman/images/ichigoman.gif" />

どうみてもキティちゃんです。本当にありがとうございました。
<blockquote>『人間の持つ、腹黒い心や邪悪な心が生み出した「モンスター」と戦うスーパーヒーロー。正体はハローキティ。
あるきっかけで手にした古い絵本の導きで、イチゴマンに変身することに。イチゴ型のスマートフォンを天空に掲げ、みんなで合唱する「パワー・ザ・キティ！」の声が数百万ヘルツに達するとイチゴマンに変身する。』</blockquote>
サンリオが弱い領域である「ヒーロー」を明確に狙っている。「スマートフォン」という単語をわざわざ入れているところも、キャラクターの現代化についてもイニシアチブを執っていこうというあらわれではないか。すごいぞサンリオ。

イチゴマン、なんと<a href="http://www.puroland.co.jp/event/2012_ichigoman_show/">2012年10月27日に、ピューロランドでイベントがあるらしい</a>。

<img alt="" src="https://www.puroland.co.jp/event/2012_ichigoman_show/img/back_img.jpg" />

僕がこの画像を見て、「<a href="http://dic.nicovideo.jp/a/%E3%81%BB%E3%82%81%E6%98%A5%E9%A6%99">ほめ春香</a>やん…」と思ってしまったのは秘密。


<h2>むすび</h2>
「卵は一つのカゴに盛るな」というのは、有名な相場格言である。原文といわれる、マーク・トゥェインの「ノータリン・ウィルソンの悲劇」では、卵はひとつのカゴに盛り、そのカゴをよくよく見守れ、というほうが最適らしいが、そいつは脱線。ノーベル経済学賞を受賞したハリー・マーコウィッツによる「ポートフォリオ理論」でも、対象となる銘柄の数が多ければ多いほど、期待収益が高まり、しかも安定する、と学んだ記憶がある。キャラクタービジネスにおけるキャラクターは、銘柄である。ハイリスク、ハイリターン。数理モデルからも、「サンリオ力」がサンリオのつよさの原点であることを説明できるのではないか。

「多様性が善だ」なんて、単純な論理を展開するつもりはない。質が絶対的に低いモノはあるし、そんなものがいくらあったとしても、全体の質が上がるわけではない。

「多様性を確保する」という文化。ヒドいもの以外は、とりあえず出して、世に問うてみるという姿勢。そんな「サンリオ力」がキャラクタービジネスには求められているのでないか。それは、キャラクタービジネスに限られたものではない。コンテンツビジネス一般に援用できる力ではないのか。

ちなみに、ライバル会社の「San-X」も面白い。

San-Xは、「リラックマ」「たれぱんだ」「こげぱん」「アフロ犬」などで有名なキャラクタービジネス会社である。「ひこねのよいにゃんこ」で有名な「もへろん」さんのキャラクターもSan-Xから出ていたような記憶があるのだが、記憶違いか。著作者人格権はホントに気をつけたほうがいいよね…、というのはまたまた脱線だから置いておく。

San-Xについて、僕は、平成に入ってから起業された会社だと思い込んでいた。実は、San-Xは歴史が古い会社なのだ。

<a href="http://www.san-x.co.jp/company/comp01.html">San-Xの会社概要ページを見てほしい。</a>
1932年創業である。「太平洋戦争」と「リラックマ」が同じ系列に並べられている企業の広報ページなど、そうそうないぞ。

San-Xのサイトのトップページにも、よく知らないようなキャラクターがずらっと並んでいる。実際、ほとんどのキャラクターは市場から消えるんだろう。一回もキデイランドに並ぶこともなく。だが、San-Xにも「サンリオ力」はあるし、それを尊重しようとしていることが、よく伝わってくる。San-Xも、「サンリオ力」がある会社なのだ。「サンリオ力」が長い社歴の間に培われていったのであろう。

あなたの職場、「サンリオ力」がありますか？]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>269</wp:post_id>
		<wp:post_date>2012-10-25 00:00:59</wp:post_date>
		<wp:post_date_gmt>2012-10-24 15:00:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%96%b0%e3%81%97%e3%81%84%e6%a6%82%e5%bf%b5%e3%80%8c%e3%82%b5%e3%83%b3%e3%83%aa%e3%82%aa%e5%8a%9b%e3%80%8d%e3%82%92%e6%8f%90%e5%94%b1%e3%81%97%e3%81%be%e3%81%99</wp:post_name>
		<wp:status>private</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e4%bc%9a%e7%a4%be%e9%81%8b%e5%96%b6"><![CDATA[会社運営]]></category>
		<wp:postmeta>
			<wp:meta_key>_su_rich_snippet_type</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_subscribe</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_social_plugin_settings_box_send</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>祝出版！「検索エンジンはなぜ見つけるのか」</title>
		<link>http://blog.wktk.co.jp/archives/130</link>
		<pubDate>Wed, 02 Mar 2011 10:10:16 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=130</guid>
		<description></description>
		<content:encoded><![CDATA[「検索エンジンはなぜ見つけるのか」という本が、2011/3/10に発売されます。一部大型書店では、すでに先行発売が始まっているようです。

<!--more-->

http://www.amazon.co.jp/%E6%A4%9C%E7%B4%A2%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3%E3%81%AF%E3%81%AA%E3%81%9C%E8%A6%8B%E3%81%A4%E3%81%91%E3%82%8B%E3%81%AE%E3%81%8B-%E2%80%95%E7%9F%A5%E3%81%A3%E3%81%A6%E3%81%8A%E3%81%8D%E3%81%9F%E3%81%84%E3%82%A6%E3%82%A7%E3%83%96%E6%83%85%E5%A0%B1%E6%A4%9C%E7%B4%A2%E3%81%AE%E5%9F%BA%E7%A4%8E%E7%9F%A5%E8%AD%98-%E6%A3%AE%E5%A4%A7%E4%BA%8C%E9%83%8E/dp/4822284611

[rakuten]001:9784822284619[/rakuten]

この本は、Senna/groongaのリードデベロッパーであり、僕の上司（？）である森さんが、5年がかりで書き上げたものです。何度も構成から見直して、ようやく出版にこぎつけたようです。

「コンピュータはなぜ動くのか」というベストセラー本があります。その本に代表される日経BPのなぜシリーズは、１０年後まで通用する基礎知識を身につけることを目的としているようです。この本でも、「ウェブページの検索」という観点で、陳腐化しづらい知識を得ることができます。しかも、数式や疑似コードと向き合うことなしに！

この本は４章構成となっています。

第１章「検索エンジンの目指すもの」では、この本における検索エンジンの定義が示されます。「検索エンジンとは、利用者の情報要求に対して、ウェブ上の情報資源の中から、最善の情報を見つけ出してくることを目標とするサービス」という定義です。情報要求とは何か、最善の情報とか何か、ということも第１章の中で示されます。

第２章「集める」では、いわゆる「クローラ」について解説されています。図書館の蔵書収集との比較とともに、クローラが技術的にどのような要件が求められているのか、が解説されています。

第３章「整理する」では、いわゆる「インデックス」について解説されています。数式や疑似コードなしに（！）Double Array TRIEや転置索引、Burrows-Wheeler変換(BWT)が解説されています。涙ぐましい努力の跡がよく伝わる章です。

第４章「検索する」では、最善の結果を返すための仕組みについて解説されています。TF-IDFやPageRankなどの解説もあります。

ぜひ手に取ってみてください。

<img src="https://farm6.static.flickr.com/5138/5490983233_d56e9213a8.jpg" alt="献本用の山" title="献本用の山" width="500" height="375" />
<h3>追記</h3>
よりよい紹介をしているサイトをリンクします。
<ul>
	<li><a href="http://d.hatena.ne.jp/sleepy_yoshi/20110314/p1">睡眠不足？</a></li>
	<li><a href="http://d.hatena.ne.jp/hkinami/20110320/p1">Project Hews by 木南英夫</a></li>
	<li><a href="http://blog.livedoor.jp/koichiise/archives/1403343.html">ライブドア第九研究室だより</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>130</wp:post_id>
		<wp:post_date>2011-03-02 19:10:16</wp:post_date>
		<wp:post_date_gmt>2011-03-02 10:10:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>130</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e5%91%8a%e7%9f%a5"><![CDATA[告知]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_su_rich_snippet_type</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_058a402155db95d959368c11ad0ef32e</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_61fca09fba6e2142dccdb1c044d7e78f</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ひとり暮らしの男性に、電気フライヤーのススメ</title>
		<link>http://blog.wktk.co.jp/archives/136</link>
		<pubDate>Wed, 02 Mar 2011 12:19:19 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=136</guid>
		<description></description>
		<content:encoded><![CDATA[（<strong>改題しました</strong> 旧題：ひとり暮らしを新しく始める男子が買うべきたった１つのモノ）

ひとり暮らし関連のエントリが人気になる季節です。

30歳男子であるわたくしですが、ひとり暮らしを始める男子にものすごくオススメのアイテムがあるのです。しかし、どこのエントリを見ても、そのアイテムをオススメしていない…しからば、ワシがオススメするしかないじゃろ！

<!--more-->

そのアイテムとは、<strong>電気フライヤー</strong>です。

http://www.amazon.co.jp/%E3%83%84%E3%82%A4%E3%83%B3%E3%83%90%E3%83%BC%E3%83%89-EP-4694PW-TWINBIRD-%E3%82%B3%E3%83%B3%E3%83%91%E3%82%AF%E3%83%88%E3%83%95%E3%83%A9%E3%82%A4%E3%83%A4%E3%83%BC-%E3%83%91%E3%83%BC%E3%83%AB%E3%83%9B%E3%83%AF%E3%82%A4%E3%83%88/dp/B001GQ309K/
http://www.amazon.co.jp/ZOJIRUSHI-%E3%81%82%E3%81%92%E3%81%82%E3%81%92-%E9%9B%BB%E6%B0%97%E3%83%95%E3%83%A9%E3%82%A4%E3%83%A4%E3%83%BC-%E3%83%A1%E3%82%BF%E3%83%AA%E3%83%83%E3%82%AF%E3%82%AB%E3%82%AB%E3%82%AA-EFK-A10-TJ/dp/B0000C9BKP/

TWINBIRDのものは、コンパクトでリーズナブル、使いやすいフライヤーです。
象印のものは、最大ワット数が1000Wと多いです。つまり、加熱が速く、温度を一定に保つ力が強いです。僕はこれをよく使っています。ブレーカーの容量が低い家の場合は、ブレーカー落ちに気をつけてください。

なぜ（電気）フライヤーを勧めるのか、どう活用すればいいのかを説明します。
<a class="thickbox" title="P1000715" href="https://farm6.static.flickr.com/5099/5406926839_a431eac66d_b.jpg"><img src="https://farm6.static.flickr.com/5099/5406926839_a431eac66d.jpg" alt="P1000715" title="P1000715" width="500" height="375" class="aligncenter" /></a>
<h2>油はうまい！</h2>
「うまいは甘い」とは北大路魯山人が言ったらしい言葉ですが、油もうまいです。うまいだけではなく、よい栄養源でもあります。

ティーンズ男子にとって、油がない生活はかなりキツいんじゃないでしょうか。

油ものがあるだけで、男一人暮らしの食卓が華やぎます。
<h2>ふつうの鍋での揚げ物はオススメしない！</h2>
揚げ物をする際に問題となるのは、油はねと温度調整です。

普通の鍋で調理を行う場合、激しくはねた油を必死に掃除する必要があります。油ははねるだけでなく、細かい霧状となって部屋中に充満します。家具の天板や壁紙に油がくっつき、その油にホコリがくっつきます。部屋が加速度的に汚くなるのです。

温度を一定に保つのも面倒です。温度計を持っていたとしても、その温度を保ち続けるのは困難です。ちょっとした用事で鍋の前を離れたら、あっという間に油の温度が発火点に至り、火災になる恐れがあります。コンロが原因の火災のうち、天ぷら油を使っていた割合はかなり多いそうです。

さて、揚げ物用の鍋というものがあります。

http://www.amazon.co.jp/%E3%83%91%E3%83%BC%E3%83%AB%E9%87%91%E5%B1%9E-%E3%82%B0%E3%83%AB%E3%83%A1%E3%82%B9%E3%82%BF%E3%83%83%E3%83%95-%E6%B8%A9%E5%BA%A6%E8%A8%88%E4%BB%98-%E5%A4%A9%E3%81%B7%E3%82%89%E9%8D%8B-H-8561/dp/B0015CBD3U/

この鍋は、油はねガードと温度計をつけることによって、ふつうの鍋で起こる問題を緩和しています。しかし、あくまで緩和です。実際に紹介した揚げ物専用鍋を使ったことありますが、やっぱり油ははねたり部屋に広がったりするし、温度調整は手動で行う必要があります。

電気フライヤーでは、これらの問題に大変強いです。フタをすることによって（通電中はフタを外すように推奨されている機種もあります）油はねや油の気化を押さえ、温度も自動的にある範囲内に保って油が発火点に達するのを防ぎます。超便利＆安全！

また、ひとり暮らしでは、ガスが開通しておらず、IHではなく電熱線式のコンロしかない物件に住む人も多いです。このような物件でも、電気フライヤーなら問題なしです。
<h2>フライをするな、天ぷら・素揚げにせよ！</h2>
フライヤーがあると、ついついフライを作りたくなってしまいます。トンカツ・エビフライ・アジフライ・コロッケ…おいしそうですね。

しかーし！！！フライは面倒です。
<ul>
	<li>小麦粉・卵・パン粉が必要</li>
	<li>それらを食材にまんべんなくつけるため、キッチンバット状のものが必要。</li>
	<li>食材も物も多いので、片づけが面倒</li>
	<li>余った、卵がちょっとついたパン粉とかをどう食べるか考えるのにヤキモキ</li>
</ul>
１回フライを作ってみるだけで「二度とやらねー！」という気分になります。すごく面倒です。

というわけで、天ぷらや素揚げをしましょう！

天ぷらの場合、便利な「天ぷら粉」というものが売ってあります。これと水があれば、あら不思議、天ダネになります。天ダネが余っても大丈夫。揚げれば天かすです。次の日のうどん・そば・そうめんなどにぶっかけましょう。ブラボー！

素揚げも、なかなかおいしい調理法です。ナスを買ってきて素揚げにするとおいしいですよ。

フライをどうしても食べたい場合には、卵の代替品をつかいましょう。

水溶き小麦粉や牛乳溶き小麦粉、水溶き小麦粉＋片栗粉、マヨネーズなどが代用品となります。
要は「どろっとしたノリ状の食材で、パン粉を接着できるもの」であれば代用品となりうるわけです。

また、パン粉だけつけて揚げたフライというのもあります。食材にパン粉がくっつくように、食材の表面（場合によってはパン粉）をよく湿らせてください。

<a href="http://blogs.yahoo.co.jp/may_branch/31479260.html" target="_blank">みきママの＊パン粉だけカツ</a>

<a href="http://cookpad.com" target="_blank"></a><a style="color: #9ea73d; font-weight: bold;" href="http://cookpad.com/recipe/1143630" target="_blank">パン粉だけでジューシー鶏カツ★ by king927</a>

とにかく、楽な調理法が長続きします。なるべくサボってください。

あ、天ダネはよく冷やすようにしてくださいね。
<h2>野菜食え！野菜！</h2>
男性の一人暮らしでは、野菜の摂取が不足しがちです。

生野菜ですと、量を食べることができません。よって、なんらかの方法で野菜に火を通す必要があります。

<a href="http://d.hatena.ne.jp/gamella/20110305/1299330099" target="_blank">蒸し野菜などにして食するのもオススメ</a>ですが、天ぷら・素揚げにするのもおいしい野菜の食べ方です。

野菜はオカズになりづらいですが、揚げ物にするとオカズ度が格段にアップします。

しいたけの天ぷらなんて、もう肉と言っても過言ではないっ！
<h2>スーパーの惣菜を揚げなおせ！</h2>
スーパーの惣菜コーナーで、とんかつや各種フライ・天ぷらなどが売ってあります。しかし、ほとんどの場合はすでに冷え切っています。

そこで、フライヤーで軽く揚げなおしてみましょう。できたてのおいしさに近づくことができます。

また、パン粉までつけてあるが揚げられていない、いわば半製品状態のトンカツなどがスーパーに売ってあることもあります。フライヤーがあればおいしいトンカツがすぐ食べられます。ブラボー！

冷凍食品コーナーにある、ポテトフライなどを買うのもいいですね。

鶏肉に粉をつけた状態で冷凍してある、冷凍から揚げなんかおいしくてオススメです。

[rakuten]zidori:10000555[/rakuten]
<h2>昨日の天ぷらを揚げなおせ！</h2>
夕食に作った天ぷらが、余る場合があります。ただ単に揚げなおしては、衣が固くなってしまっておいしくありません。

そのような場合には、以下のような処置をして揚げなおしてください。衣がサクサクに仕上がります！
<ul>
	<li>天ぷらに、水を霧吹きでかけて揚げなおす</li>
	<li>水にさっとくぐらせたあとキッチンタオルで余分な水分をとって揚げなおす</li>
	<li>薄い水溶き小麦粉をまぶして揚げなおす</li>
</ul>
<h2>余った食材はかき揚げにせよ！</h2>
ひとり暮らしだと、食材が余ります。残り食材の処分は結構頭が痛い問題です。

お鍋に入れていただく、という手もありますが、かき揚げにするのもオススメです。なにより頭を使う必要がありません。そしてそれなりにおいしい！

僕は、<a href="http://www.laidbacktrans.com/entry14.html" target="_blank">もやしのかき揚げ</a>が好きです。もやしはすぐ縮んでしまうので、揚げすぎに注意してください。
<h2>油こし器はよいものを買え！</h2>
コスト面・健康面において、油をキレイにどれだけ使い続けられるかは重要です。油を毎回捨てるとお金がかかりますし、油はただ捨てるだけでも面倒なものです。固めたり、吸わせたりしないといけないですから。

油をキレイにする能力が高く、オイルポット（油を保存できるもの）を兼ねた油こし器は、楽しい揚げ物ライフのため重要です。

僕は、上記の条件を満たした「コスロン」という油こし器を使っています。

[rakuten]marugo:10000014[/rakuten]
[rakuten]marugo:10000070[/rakuten]

この油こし器は、薄いフィルターを200枚重ねにしたものを使って油を濾します。濾した油は、驚くほどキレイになります。油が捨てなければならないほど汚れるまでの揚げ回数・期間が長くなります。コスロンのサイトにあるユーザの声では「これを買ってから１回も油を捨てていない」といった文言も並んでいます。

Amazonで購入されるのであれば、パナソニックの油こし器が評判がよいようです。

http://www.amazon.co.jp/パナソニック-TK-CT10-K-Panasonic-天ぷら油クリーナーレッツフライ-黒/dp/B00200KMD8/

油こしに油を入れる場合には、油を冷まして入れましょう。よりキレイに濾されます。
<h2>フライヤーは毎回洗うな！</h2>
こういう電気フライヤーは、きちんと洗おうと思うととたんに面倒です。電気機器ですからね。

しかし、毎回油こし器で油を濾して保存していさえいれば、フライヤーの中身の洗浄にはそれほど神経質になる必要はありません。細かい揚げカスなどが残っていても、気にせずフタして放置しています。コスロンのフィルターを取り替えるくらいのタイミングで、スポンジと中性洗剤で掃除しています。鉄鍋の中華鍋を毎回中性洗剤で洗わないようなものですね！（強引）

どうしても気になる人は、油を油こし器に入れたあとに、フライヤーの油が入る部分をキッチンペーパーなどで軽くぬぐっておくとよいでしょう。
<h2>まとめ</h2>
電気フライヤーは、一人暮らしの食生活を豊かにしてくれます、それも簡単に。

アイスクリーマーからワッフル焼き器、両面魚焼きグリル、自動千切り機etc…キッチン家電を買っては活用できなかった僕が、今でもガッツリ使っている電気フライヤー。

是非電気フライヤー＆油こし器でステキな男一人暮らしライフを楽しんでください。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>136</wp:post_id>
		<wp:post_date>2011-03-02 21:19:19</wp:post_date>
		<wp:post_date_gmt>2011-03-02 12:19:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%81%b2%e3%81%a8%e3%82%8a%e6%9a%ae%e3%82%89%e3%81%97%e3%82%92%e6%96%b0%e3%81%97%e3%81%8f%e5%a7%8b%e3%82%81%e3%82%8b%e7%94%b7%e5%ad%90%e3%81%8c%e8%b2%b7%e3%81%86%e3%81%b9%e3%81%8d%e3%81%9f%e3%81%a3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e9%a1%9e"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_9090d1bc6346be086ca37ff310bbcc46</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_9da418272c4f52bd74ca1bcd9c3680c9</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_7e7edc00e9fb82751375d820b5af9122</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_su_rich_snippet_type</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_72243e08972d9dbfc4e36c7efa6e4f68</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_697e9c450357a1fb90aae006fc11fbe6</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_45fdd91e78f4b692da809c9a14f49a66</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_16ffdf6173cc078696b3e6c3286440b0</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_eb37ab54099f43af451d67839d71c7c2</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>71</wp:comment_id>
			<wp:comment_author><![CDATA[tasuku]]></wp:comment_author>
			<wp:comment_author_email>blog@wktk.co.jp</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>210.135.97.148</wp:comment_author_IP>
			<wp:comment_date>2011-03-28 20:58:55</wp:comment_date>
			<wp:comment_date_gmt>2011-03-28 11:58:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[一 五明さん、コメントありがとうございます。

パン粉つなぎのハンバーグを一緒に作って冷凍、お手軽カツ、どちらも手間が省けていいですね。
揚げ物のいいところは「揚げちゃえば細かいことは気にしなくて良い」ってところだと思っています。
昔、炊飯機能付きのコンロというものがついている家に住んでいたときは、土鍋でご飯炊いていました。今は面倒なので電気炊飯ジャーです。個人的にはガス炊飯器がおいしいと思います。

mkomiyaさん、コメントありがとうございます。

僕が象印のフライヤーを買ったのは、高円寺のLAOXの閉店セール（！）でした。ほとんどのまともな商品が棚から消えている中、ひっそりとたたずむ展示処分品…それがあげあげ！
全世帯に置かれるべき家電とは思いませんが、得られる便益に比べて売り上げがかなり少ないものと僕も推測しています。
食生活に役立てたならうれしい限りです。エントリ書いてよかった。]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1301313535.75";s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"tasuku";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>55</wp:comment_id>
			<wp:comment_author><![CDATA[どうでもいいけど]]></wp:comment_author>
			<wp:comment_author_email>noone@noone.no</wp:comment_author_email>
			<wp:comment_author_url>http://Website</wp:comment_author_url>
			<wp:comment_author_IP>119.107.231.178</wp:comment_author_IP>
			<wp:comment_date>2011-03-03 22:08:42</wp:comment_date>
			<wp:comment_date_gmt>2011-03-03 13:08:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[独り暮らしスタートにあたり、出費やスペースを節約するという目的のもとで、たった1つしか何かを買ってはいけないという条件が有れば、冷蔵庫が最優先、と言う事を忘れてはいけない。
2つなら、続いて電子レンジ（自分で価格に納得すれば、オーブンレンジ機能付きを使うと、揚げものの温めなどはフライヤー並みとまではいかなくても上手にできる）。
3つなら、テレビを追加。
4つなら、洗濯機を置く場所が有る場合は洗濯機、等々となる。

電気フライヤーは使いこなせれば便利だろうが、主婦ですら使いこなせない人が多く、「畳の腐るこやし」になっているのが実情。実際はとても不便だ。油こしの手間も馴れてからも面倒臭い。男で独り暮らしする者は普通の洗い物ですら面倒に感じる事が多いのが現実。
この人には電気フライヤーは向いていたのだろうが、殆どの人は真似してはいけない。馬鹿を見る。

調理家電は料理が趣味とまではいかなくても、調理作業～後片付けの各手順が楽しいと思える様な人でなければ、男女問わず、汎用性の低い物を買うとムダ以外の何物でも無くなるので要注意。

それにしても（不細工な）顔出しで「趣味で会社経営」とは何とも御目出たい事。]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1299157722.45";s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1299160240.82";s:7:"message";s:53:"tasuku がコメントの状態を approved に変更";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"tasuku";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>56</wp:comment_id>
			<wp:comment_author><![CDATA[tasuku]]></wp:comment_author>
			<wp:comment_author_email>blog@wktk.co.jp</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>110.67.105.92</wp:comment_author_IP>
			<wp:comment_date>2011-03-03 22:53:38</wp:comment_date>
			<wp:comment_date_gmt>2011-03-03 13:53:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[コメントありがとうございます！
エントリを読んでいただけるだけでなく、コメントまで下さる方って結構少ないんですよね…

僕は、たった1つしか何かを買ってはいけないなら、敷布団を買います。]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1299160419.08";s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"tasuku";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>70</wp:comment_id>
			<wp:comment_author><![CDATA[mkomiya]]></wp:comment_author>
			<wp:comment_author_email>kazu.yasutake@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://d.hatena.ne.jp/mkomiya</wp:comment_author_url>
			<wp:comment_author_IP>210.253.144.19</wp:comment_author_IP>
			<wp:comment_date>2011-03-28 18:53:07</wp:comment_date>
			<wp:comment_date_gmt>2011-03-28 09:53:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[一人暮らしの男です
この記事を読んで電気フライヤーを購入しました

このtwinbirdの機種を探したのですが、
秋葉ヨドバシ、池袋ビック、ヤマダ電機では在庫なし、
象印の「あげあげ」にしました。
（量販店の売場を見る限り、電気フライヤーは
まったく売れてない感じですね）
野菜を揚げてオカズになるのが嬉しいです
今日も会社帰りに買って帰るか楽しみです]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:12:"1301313007.4";s:7:"message";s:53:"tasuku がコメントの状態を approved に変更";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"tasuku";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1301305987.22";s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>69</wp:comment_id>
			<wp:comment_author><![CDATA[一　五明]]></wp:comment_author>
			<wp:comment_author_email>timeflow@ybb.ne.jp</wp:comment_author_email>
			<wp:comment_author_url>http://Website</wp:comment_author_url>
			<wp:comment_author_IP>218.115.198.50</wp:comment_author_IP>
			<wp:comment_date>2011-03-28 15:09:45</wp:comment_date>
			<wp:comment_date_gmt>2011-03-28 06:09:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[フライやカツ作るときはハンバーグと一緒に作って(衣の余りがそのまま材料になる)
どっちかを冷凍してます。
一口カツくらいならフライパンに(火に掛けずに)肉と小麦粉入れて揺すって
卵入れてかき混ぜてパン粉入れて…みたいないい加減なやり方でも
それなりに出来たり。

ちなみに米は普通の鍋で炊いてます。]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1301313007.85";s:7:"message";s:53:"tasuku がコメントの状態を approved に変更";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"tasuku";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1301292585.36";s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>59</wp:comment_id>
			<wp:comment_author><![CDATA[みっく]]></wp:comment_author>
			<wp:comment_author_email>dq9_mic@yahoo.co.jp</wp:comment_author_email>
			<wp:comment_author_url>http://www.facebook.com/profile.php?id=100001629797739</wp:comment_author_url>
			<wp:comment_author_IP>121.93.124.133</wp:comment_author_IP>
			<wp:comment_date>2011-03-04 05:10:21</wp:comment_date>
			<wp:comment_date_gmt>2011-03-03 20:10:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[大変興味深い記事でした。私は
「ひとり暮らしを新しく始める男子」ではなく「ひとり暮らし歴15年くらいの男子」ですが、料理をそれほどしているわけでもないというのもありますが、冷蔵庫未保有です。仕事の都合で4月に転居する予定ですが、新しい住まいでは冷蔵庫ではなく「電気フライヤー」をまず購入したいと想いました。ありがとうございます！ちなみに私は冷蔵庫よりも敷布団よりもパソコン（ネット環境）が第一優先でございます（笑）。]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1299183021.98";s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1299206200.33";s:7:"message";s:53:"tasuku がコメントの状態を approved に変更";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"tasuku";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>61</wp:comment_id>
			<wp:comment_author><![CDATA[tasuku]]></wp:comment_author>
			<wp:comment_author_email>blog@wktk.co.jp</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>110.67.105.92</wp:comment_author_IP>
			<wp:comment_date>2011-03-04 11:50:52</wp:comment_date>
			<wp:comment_date_gmt>2011-03-04 02:50:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[みっくさん、コメントありがとうございます！

ひゃー、ダマされてますよ！まず冷蔵庫買いましょう（笑）！

確かに、インターネットジャンキーな僕としても、インターネット環境が第一優先ですね。盲点でした。

調理系アイテムでアイテムを絞って買うとしたら、１位冷蔵庫、２位圧力鍋でしょうか。

冷蔵庫は、僕が冷たい飲み物が大好きだからです。
圧力鍋は、
1. 米が炊ける
2. 蒸したり、揚げたりできる（加圧揚げは国内発売の圧力鍋ではするなと書いてあるはずだがあえて）
3. 大きめのしっかりフタができる鍋として使い勝手がよく、金属も肉厚。
という感じですね。
インターネット上では、圧力鍋派 対 スロークッカー派のアツい戦いが繰り広げられているようです。

人通りの多いところに住むなら、冷蔵庫や調理家電は正直必要性薄いですよね。
東京の高円寺というところに住んでいたときは、飲食店・惣菜屋・２４時間営業スーパーマーケットなどさまざまな施設があり、
コンロも電熱コンロだったこともあり自炊はほとんどしていませんでしたから。]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1299207053.22";s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"tasuku";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>アメリカ電子渡航認証システム（ESTA）のサイトesta.cbp.dhs.govに繋がらない場合の対処法</title>
		<link>http://blog.wktk.co.jp/archives/165</link>
		<pubDate>Fri, 08 Apr 2011 20:48:03 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=165</guid>
		<description></description>
		<content:encoded><![CDATA[ESTAのサイトにつながらない！ESTAのサイトに接続できない！ESTAのサイトが見られない！

そういった人は以下のことを試すといいよ。

<!--more-->
<h2>結論</h2>
診断くん(http://taruo.net/e/)に接続し、REMOTE_ADDRの横にある文字を記憶（127.0.0.1のような数値になっている）。

NTTやケーブルテレビ会社から借りているインターネットに接続するための箱の電源をひっこ抜き（複数の箱があるならすべてを引っこ抜く）、しばらく待ってすべて電源を入れる。

再度診断くんにアクセスし、REMOTE_ADDRの横にある文字が変わっていたら、接続が出来るようになっている可能性がある。

まだ出来ないのであれば、何度か同じことをチャレンジ。何度もやってダメなら、あきらめてネットカフェとかに行くべし。
<h2>結論に至るまで</h2>
アメリカにビザなしで渡航する場合には、ESTAというシステムを通して渡航認証を受けなければならない。ところが、ESTAのサイト(https://esta.cbp.dhs.gov/)に繋がらないことがある。connection timeoutになってしまうのだ。

最初は「落ちてるんでやんの！」とか思っていたけど、頻度も多く、どうも様子がおかしい。

同様の症状に悩んでいる人をWeb上で探すと、OKwave・Yahoo!知恵袋や2chに相談を寄せている人がいた。解決策として「ブラウザの設定を確認しよう、アンチウイルスソフトを確認してみよう」的な一般論しか提示していない。

1サイトだけ、解決策を提示しているブログがあった。そのエントリ名は「<a href="http://ringo.tea-nifty.com/book/2009/01/estapppoe-b122.html" target="_blank">ESTAのサイトにつながらない原因はPPPoEの接続しっぱなし。フレッツ光とルータ接続で注意</a>」というもの。

当該エントリでは、PPPoEの接続しっぱなしが原因と言っているが、当方の環境でPPPoEの接続をしなおしても問題が解決しない。

少し実験した結果、「PPPoEで接続した際にDHCPで振られるグローバルIPによって、接続できるかどうかが変化する」ということがわかった。

先方がグローバルIPベースで何かの接続遮断を行っているとは考えにくいので、DHCPで振られるグローバルIPアドレスによってesta.cbp.dhs.govへの経路が変わっていることが問題なのでは、と推測している。

接続できたときとできなかったときのtracerouteの結果をとっていたのだが、Windowsのcmd.exeでログをとっていなかったため内容が失われた。

tracertの18ホップ目で、
<pre>GigabitEthernet7-0-0.GW9.DCA5.ALTER.NET [152.63.40.21]</pre>
までで止まればサイトの閲覧がNG。

tracertの17, 18ホップ目で、
<pre>GigabitEthernet7-0-0.GW9.DCA5.ALTER.NET [152.63.40.21]
cbp.dhs.gov.gov-gw.customer.alter.net [63.66.37.242]</pre>
まで到達すれば、サイトの閲覧が可能だった。

単にIPのTTLが足りないだけなのかもしれないが、個人的にはサイトにつながるようになったからよい。

渡航直前でESTAに申し込もうとしたが、繋がらなくてパニックになっている人の救いになれば幸い。

あと、追加情報も求む。追加情報の質によっては、よりよい対処法が提案できそうだ。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>165</wp:post_id>
		<wp:post_date>2011-04-09 05:48:03</wp:post_date>
		<wp:post_date_gmt>2011-04-08 20:48:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%82%a2%e3%83%a1%e3%83%aa%e3%82%ab%e9%9b%bb%e5%ad%90%e6%b8%a1%e8%88%aa%e8%aa%8d%e8%a8%bc%e3%82%b7%e3%82%b9%e3%83%86%e3%83%a0%ef%bc%88esta%ef%bc%89%e3%81%ae%e3%82%b5%e3%82%a4%e3%83%88esta-cbp-dhs-gov</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%94%9f%e6%b4%bb%e6%83%85%e5%a0%b1"><![CDATA[生活情報]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_su_rich_snippet_type</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MySQL Conference &amp; Expo 2011でgroonga Storage Engineの発表してきます！ </title>
		<link>http://blog.wktk.co.jp/archives/169</link>
		<pubDate>Fri, 08 Apr 2011 21:24:24 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=169</guid>
		<description></description>
		<content:encoded><![CDATA[Santa Claraで行われるMySQL Conference &amp; Expo 2011で発表してきます。タイトルは、「<a href="http://en.oreilly.com/mysql2011/public/schedule/detail/17317" target="_blank">Fulltext Searching with a groonga Storage Engine</a>」です。

<a href="http://blog.yappo.jp/yappo/archives/000749.html" target="_blank">YappoさんがOSDC.twでgroongaの布教をしてくれました</a>。

今回はgroonga + (Spider) + MySQLなgroonga Storage Engineの布教をしてきます。

僕は発表者に名を連ねていますが、発表に加わるかどうかはよくわからない情勢です。質疑応答で、Yappoさんの「たいぷぷりーず」作戦は使えそうだな、と考えてます。

イベントでは、Diamond SponsorがEnterprise DB(PostgreSQLベースの商用DB)であったり、Sponsorsの中にOracleの名前がないなど、MySQLのビジネス的な立ち位置がどうなっているのか不安ではあったりしますが、そういった様子も見てこようかな、と思っています。

日本から発表する人として、<a href="http://en.oreilly.com/mysql2011/public/schedule/speaker/847" target="_blank">松信さん</a>と<a href="http://en.oreilly.com/mysql2011/public/schedule/speaker/42782" target="_blank">奥さん</a>がいます。松信さんはMySQLの性能チューニング(OSやハードウェアの最適化による)や障害時の自動復旧のお話、奥さんは<a href="https://github.com/ahiguti/HandlerSocket-Plugin-for-MySQL" target="_blank">Handler Socket Plugin</a>のお話をするようです。

それより、カンファレンス後の<a href="http://blog.drizzle.org/2011/03/29/location-for-drizzle-developer-day/" target="_blank">Drizzle Developer Day</a>と<a href="http://kb.askmonty.org/v/storage-engine-summit-2011" target="_blank">Plugins &amp; Storage Engines Summit for MySQL etc.</a>が同じ日って！どっちに出るか…]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>169</wp:post_id>
		<wp:post_date>2011-04-09 06:24:24</wp:post_date>
		<wp:post_date_gmt>2011-04-08 21:24:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mysql-conference-expo-2011%e3%81%a7groonga-storage-engine%e3%81%ae%e7%99%ba%e8%a1%a8%e3%81%97%e3%81%a6%e3%81%8d%e3%81%be%e3%81%99%ef%bc%81</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="category" nicename="%e5%91%8a%e7%9f%a5"><![CDATA[告知]]></category>
		<category domain="category" nicename="%e6%8a%80%e8%a1%93%e3%83%a1%e3%83%a2"><![CDATA[技術メモ]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_su_rich_snippet_type</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ブログ更新停止という病、その快癒に向けて</title>
		<link>http://blog.wktk.co.jp/archives/179</link>
		<pubDate>Mon, 23 May 2011 00:53:31 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=179</guid>
		<description></description>
		<content:encoded><![CDATA[ブログ更新しない病を発病していました。

このブログでの目下の悩みは、Amazon・楽天アフィリエイトで値段や在庫状況が変わるたびにフィードが更新されること。Amazonの場合にはiframeに機械的に置換できるけど、楽天の場合は少々面倒だ。楽天もiframeだけでOKな単品ブログパーツを開発してほしい。もしあったらゴメン。アフィリエイトを主眼にした揚げ物エントリを書いて学んだのは、「簡単には儲からねー」ということですね。あとは、はてなダイアリーはなんだかんだ言って文章の中身にだけ集中できる環境が整っているな、ということを痛感。

ブログに書きたいネタを列挙しておきます。どれも書きかけの原稿がDropboxの底にたまっています。
<ul>
	<li>JTPA シリコンバレーセミナー 2011について(スタートアップが集まるBlack Box Mansionでの宿泊話)</li>
	<li>MySQL User Conference 2011ドタバタ記(Safewayで生ハムを買いまくるお話、facebookのメシがうまい話)</li>
	<li>TOEIC学習エントリ(いかにしてTOEIC初受験から３回目で850点をとったかのチート話、本レビュー)</li>
	<li>Webサイトにおけるランキング話(安易なランキング実装はダメ！ゼッタイ！)</li>
	<li>まじめなカウンタの実装が難しい話(あるいはRDBMSのAUTOINCREMENTやTwitterのTweet IDの話)</li>
	<li>ニコニコ大百科開発引退に伴う振り返りエントリ(技術的・サービス運用的な話）</li>
	<li>運転教則本レビュー(現在一般に売ってる自動車運転教則本を全て買ったので、そのレビュー)</li>
	<li>主要取引先はGoogle/Amazon! 輝かしい株式会社wktkの２期を振り返る(６月決算後)</li>
	<li>Apple製品を買うと魂を抜かれると真剣に信じていた俺がMacBook ProとiPad2を買いマリア観音をあがめる隠れキリシタンになるまで</li>
	<li>レンズ交換式カメラを買うと魂を抜かれると（以下略</li>
	<li>俺は欲しいぞ、こんなDBMS(TinyCDBを核として)</li>
</ul>
どれもそれなりに面白そうなエントリになりそうです。なりそうだからこそ、書き上げた妄想だけでニヤニヤしてしまい筆を置くという悪い状態に陥っています。これらの大作（？）に取り組む前に、日々のゆるやかな更新を心がけたい、と考えています。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>179</wp:post_id>
		<wp:post_date>2011-05-23 09:53:31</wp:post_date>
		<wp:post_date_gmt>2011-05-23 00:53:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%83%96%e3%83%ad%e3%82%b0%e6%9b%b4%e6%96%b0%e5%81%9c%e6%ad%a2%e3%81%a8%e3%81%84%e3%81%86%e7%97%85%e3%80%81%e3%81%9d%e3%81%ae%e5%bf%ab%e7%99%92%e3%81%ab%e5%90%91%e3%81%91%e3%81%a6</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%97%a5%e5%b8%b8"><![CDATA[日常]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_su_rich_snippet_type</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>wpsd_autopost</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>インターネット上で楽しく過ごすために</title>
		<link>http://blog.wktk.co.jp/archives/181</link>
		<pubDate>Wed, 01 Jun 2011 11:53:52 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=181</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://d.hatena.ne.jp/nicodic/20110515/good_bye" target="_blank">ニコニコ大百科というサービスの、企画・開発・運営を３年間やらせてもらった。</a>その幸運に感謝している。

当初は、MediaWikiというWikipediaと同じシステムを改造して匿名掲示板をつけるだけ、という予定だった。実際にMediaWikiの改造をはじめたところ、かなり制約が多かった。「HTML書けるようにしていいですか？」「１から実装していいですか？」と会議で無茶な要求を通し、「Ruby最近書いてなくて忘れそうだからRubyを採用」などのいい加減な実装プランを受け入れてくれた関係者には感謝してもし足りない。

ニコニコ大百科に、「ニコニコ大百科:楽しく過ごすために」という記事がある。僕が初版を書いた記事だ。この記事、結構気に入っている。

小学生４年生くらいのころ、OMRONの2400bpsモデムをオヤジが家に持ち込んできたときから、僕のネットワークライフは始まった（音響カプラじゃないところがヤングですね）。地元長崎にある草の根ネットで活動していたころは、まさに「小学生らしい」行動をしていた。さすがにネットワーク暦20年になると、それなりにうまく振る舞う方法がわかるようになってきた。「ニコニコ大百科:楽しく過ごすために」は、その知識をなんとか言語化できないか、と思って書き上げた記事である。よっぱらいながら、お風呂の中で書いたけど。

この記事で薦めている振る舞い方は、ニコニコ大百科だけでなく、インターネット上のコミュニケーションサービス全般で通用すると考えている。なぜなら、いろいろなサービスを見たり、それを分析した方の評論を読んだりした影響が色濃いからである。「もしドラ」ならぬ、「もしも黒木掲示板でmohtaさん/lalaさん/voidさんから 『味噌煮込みは差別用語です』と言われたら」みたいな感じですね！お３方はそんなことは言わないだろうけど。

現在の版は、引用のところが鼻にかかった感じでやらしい。編集されて、よりコンパクトに、かつより鋭い記事になることを期待します。

現在の版を記念として全文引用します。

<!--more-->
<h2 id="h2-1">ニコニコ大百科を楽しく過ごすために</h2>
ニコニコ大百科での生活を楽しく過ごすために、以下の文章に目を通すことをおすすめします。
<h2 id="h2-2">「楽しくて迷惑をかけないならOK」</h2>
ニコニコ大百科では「楽しくて迷惑をかけないならOK」です。ゆるいです。

人生は短いです。今楽しいことや、将来的に楽しくなることをやりましょう。我慢とか忍耐とか努力とか、現実世界でやり飽きたでしょ？　インターネットサービスくらいはゆるく楽しみたいですよね。

しかし、自分が楽しいことだけを追求しすぎると、他の人が楽しくなくなる場合があります。ここらへんのバランス感覚はユーザの皆様に基本的にお任せしています。ニコニコ大百科の運営は、バランスが著しく崩れていると判断しない限り積極的な介入は行いません。
<h2 id="h2-3">楽しくなくなったら、一旦ニコニコ大百科から離れましょう。</h2>
記事の編集・お絵カキコ・ピコカキコの投稿、皆さん楽しんでやっていることでしょう。しかし、義務感にかられるようになったり、スランプになったり、トラブルに遭ったり、そういうときには無理に編集・投稿をする必要はありません。楽しくないからです。楽しく出来るようになったら、また編集・投稿をお願いいたします。いつでも待ってるよ！
<h2 id="h2-4">ニコニコ大百科より、現実世界での出来事を優先しましょう。</h2>
受験、就転職活動、結婚準備、転勤や留学、会社設立など、人生には今後の人生を左右する大きな出来事があります。これらは大変な時間と労力を消費します。そのようなときには、利用者の皆さんは迷うことなくその出来事に集中してください。終わった後の息抜きとして、また利用してくださるとうれしいです。
<h2 id="h2-5">負の感情を煽る投稿には返信せずに、情報だけを受け取りましょう</h2>
「馬鹿」「死ね」などと罵倒したりするなど、言葉が悪い投稿があります。このような投稿は、読み手の感情を煽ることを狙いとする、人格批判の一種です。多くの場合、投稿をした方自身が感情的になっています。このような投稿に返信を行う必要はありません。そのような人を相手することは貴重な人生の無駄ですし、えてして返答そのものが「負の感情を煽る投稿」になりがちだからです。「<strong>荒らしに反応する人も荒らし</strong>」です。

言葉は悪いけれど、すぐれた情報を多く含んだ投稿もあります。投稿相手も人間です。誤った内容を指摘する場合には、厳しい口調になってしまうこともあります。そのような投稿は「ドラゴンボール」の「ベジータ」や「ゼロの使い魔」の「ルイズ」によってなされたものと考えて読んでみてください。負の感情による攻撃を受けることなく、すぐれた情報だけを取り出すことができます。ふしぎ！
<h2 id="h2-6">指摘は具体的かつおだやかな口調で行いましょう。</h2>
ニコニコ大百科には、誤った情報が投稿されている場合があります。そのような投稿を見かけたら、「これは間違っています。正しくは～です」といったように、具体的かつおだやかに問題点を指摘しましょう。「お前の意見は違う、俺の意見が正しい!」といったような、あいまいかつ激しい口調で指摘を行わないようにしましょう。

正しい内容と正しい伝え方、両方がそろってはじめて相手に届く言葉となるのです。
<blockquote>冒涜の言葉や、卑語を使うと、不愉快な情報を聞きたがらない人間に耳と目をふさぐ権利を与えてしまう。<sup>[1]</sup></blockquote>
<h2 id="h2-7">正義感は、人を幸せにするために使いましょう。</h2>
誹謗・中傷してはいけません。

たとえ、道徳的・法律的に責められるべき事象や人物であっても、誹謗・中傷してはいけません。誹謗・中傷こそ、道徳的・法律的に責められるべきです。
<h2 id="h2-8">間違えたことを発言した場合、撤回しましょう。</h2>
間違えたことを発言してしまうこと、多いですよね。そのような場合、素直に謝りを認めて「発言を撤回します。」と一言書き込みましょう。そして、そのような発言があった場合には、撤回を受け入れましょう。

撤回した発言を蒸し返す人や、間違えたことを発言しても撤回をしない人は、相手にしないようにしましょう。
<h2 id="h2-9">適切な主語を用いましょう。</h2>
自分の意見を投稿する際には、「【私は】こう思う」としっかり主張しましょう。他人の意見を投稿する際は、「【ある人は】こう思っている」と誰の意見なのかを具体的に記しましょう。

意見を投稿する際、根拠なく「世間」「社会」「みんな」などの大きな集団を主語としないでください。それは、責任逃れです。
<blockquote>「これ以上は、世間が、ゆるさないからな」…「世間というのは、君じゃないか。」<sup>[2]</sup></blockquote>
<h2 id="h2-10">感情表現は、前向きなものにしましょう。</h2>
自らの感情を表現する場合には、前向きな表現を用いるようにしましょう。

例えば、AとBという２つの作品があって、あなたはBのほうが好きだとします。この場合、「Aのほうが嫌いだ」と書くのではなく、「Bのほうが好きだ」と書くようにしましょう。
<h2 id="h2-11">議論は幸せになるためにやりましょう。負けても逃げてもいいよ。</h2>
ニコニコ大百科の掲示板では、活発な議論が行われています。どのような議論であれ、目的は「みんな楽しくなる」ことです。それ以外の議論は控えましょう。また、議論の勝ち負けを目的にした投稿もやめましょう。

議論をしていて、ついカッとなるときがあります。そのようなとき、楽しいですか？感情的になって、負の感情をまき散らしているだけではないですか？

議論からは、逃げてもいいのです。パソコンの電源切って、よく寝て、美味しいご飯を食べて、ご近所でも散歩してください。 3日も経てば、あなたの感情はすっきりと落ち着くことでしょう。

楽しくないと感じたら、遠慮なく議論を打ち切ってください。 「議論において、レスを返さなかったほうが負け」と考える方が少なからずいます。 論は、その内容に基づいて記事の充実させるなど「みんなが楽しくなる」ために使われるべきものです。勝った負けたなんてどーでもいいのです。 そもそも、ニコニコ大百科で議論に勝つか勝たないかなんて、世間からしてみればどーでもいいことです。

ニコニコ大百科をご利用くださる皆さんは、「楽しい人生を送る」という勝利を勝ち取っていただきたいものです。
<h2 id="h2-12">再度、「楽しくて迷惑をかけないならOK」</h2>
大事なことなのでもう一度言います。

ニコニコ大百科では「楽しくて迷惑をかけないならOK」です。楽しい人生とニコニコ大百科を！
<h2 id="h2-13">関連項目</h2>
<ul>
	<li><a href="http://dic.nicovideo.jp/a/%E3%81%BB%E3%82%93%E3%82%8F%E3%81%8B%E3%83%AC%E3%82%B9%E6%8E%A8%E5%A5%A8%E3%81%A7%E3%81%99%EF%BC%81">ほんわかレス推奨です！</a></li>
	<li><a href="http://dic.nicovideo.jp/a/%E3%83%8B%E3%82%B3%E3%83%8B%E3%82%B3%E5%A4%A7%E7%99%BE%E7%A7%91%3AWikipedia%E3%81%A8%E3%81%AE%E7%9B%B8%E9%81%95%E7%82%B9">ニコニコ大百科:Wikipediaとの相違点</a></li>
	<li><a href="http://dic.nicovideo.jp/a/%E3%83%8B%E3%82%B3%E3%83%8B%E3%82%B3%E5%A4%A7%E7%99%BE%E7%A7%91">ニコニコ大百科</a></li>
	<li><a href="http://dic.nicovideo.jp/a/%E7%84%A1%E6%95%B5%E3%81%8F%E3%82%93">無敵くん</a></li>
</ul>
<h2 id="h2-14">脚注</h2>
<ol>
	<li>*カート・ヴォネガット「ホーカス・ポーカス」より</li>
	<li>*太宰治「人間失格」より</li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>181</wp:post_id>
		<wp:post_date>2011-06-01 20:53:52</wp:post_date>
		<wp:post_date_gmt>2011-06-01 11:53:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%82%a4%e3%83%b3%e3%82%bf%e3%83%bc%e3%83%8d%e3%83%83%e3%83%88%e4%b8%8a%e3%81%a7%e6%a5%bd%e3%81%97%e3%81%8f%e9%81%8e%e3%81%94%e3%81%99%e3%81%9f%e3%82%81%e3%81%ab</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%97%a5%e5%b8%b8"><![CDATA[日常]]></category>
		<wp:postmeta>
			<wp:meta_key>_su_rich_snippet_type</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>wpsd_autopost</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Debian/Ubuntuで、nginx + FastCGIでWordPressを高速に動かす</title>
		<link>http://blog.wktk.co.jp/archives/184</link>
		<pubDate>Thu, 02 Jun 2011 03:23:59 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=184</guid>
		<description></description>
		<content:encoded><![CDATA[<p>昨日、ブログのエントリをアップしてTwitterで宣伝したら、即サイトが落ちた。ダサすぎる。というわけで、Apache2を廃し、nginx(proxy) + nginx(FastCGI)の構成でWordPressを動かす設定をする。サーバはAmazon EC2。</p>
<p>この構成を試す前に行ったnginx(proxy) + Apache2(mod-php)は簡単に性能を上げることができた。しかし、nginx + nginxではどうもうまくキャッシュしてくれない。HTTPヘッダを見てみると、
<pre>
Expires: Thu, 19 Nov 1981 08:52:00 GMT
Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0
Pragma: no-cache
</pre>
とか出てるし！Expiresに入っている日付から、PHPのsession.cache_limiter = nocache由来のヘッダだとわかる。</p>
<p>なんでPHP由来なのに、Apache経由では同じヘッダが出なかったのか。それはWordPress内の.htaccessでExpiresが設定され上書きされているからのようだ。</p>
<p>とりあえず、index.phpへのアクセスにexpires 2h;をつけたらproxy側のnginxでキャッシュされるようになった。しかし、更新時に2hもコンテンツが保持されるのはイヤだ。というわけで、<a href="http://wordpress.org/extend/plugins/nginx-manager/" target="_blank">NGINX Manager</a>を使って明示的にpurgeするようにする。</p>
<p>バックエンドをnginxにしたのは、メモリ容量が限られたEC2のsmall instanceで動かしたいから。通常の場合はApacheにしたほうが無難。そうしないと変なハマりかたをする。.htaccessを使うApache依存のモジュールもあるし。</p>
<p><br />
sudo aptitude install nginx spawn-fcgi php5-cgi php5-mysql mysql-server<br />
cd /etc/nginx/sites-available<br />vim wktk-blog</p>
<pre># wktk blog
server {
  listen 8080;

  root /home/tasuku/blog_wktk;
  # server_name blog.wktk.co.jp;

  location / {
    index index.php;
    if (-f $request_filename) {
      expires 14d;
      break;
    }
    if (!-e $request_filename) {
      rewrite ^(.+)$ /index.php?q=$1 last;
    }
  }
  location ~ \.php$ {
    include       fastcgi_params;
    fastcgi_pass  127.0.0.1:9001;
    fastcgi_index index.php;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    fastcgi_param PATH_INFO $fastcgi_path_info;
    fastcgi_param SERVER_PORT 80;
    fastcgi_param SERVER_NAME blog.wktk.co.jp;
    expires 2h;
  }
}
</pre>
<p>vim wktk-blog-proxy</p>
<pre># wktk blog reverse proxy

proxy_cache_path  /var/cache/nginx levels=1:2 keys_zone=czone:180m max_size=512m inactive=120m;
proxy_temp_path   /var/tmp/nginx;
proxy_cache_key   "$scheme://$host$request_uri";
proxy_set_header  Host               $host;
proxy_set_header  X-Real-IP          $remote_addr;
proxy_set_header  X-Forwarded-Host   $host;
proxy_set_header  X-Forwarded-Server $host;
proxy_set_header  X-Forwarded-For    $proxy_add_x_forwarded_for;
proxy_buffers     32 16k;

upstream backend {
  ip_hash;
  server 127.0.0.1:8080;
}

server {
  listen 80;

  # root /home/tasuku/blog_wktk;
  server_name blog.wktk.co.jp;

  location /wp-admin { proxy_pass http://backend; }
  location ~ .*\.php { proxy_pass http://backend; }

  expires off;

  set $do_not_cache 0;

  location / {
    set $mobile 0;
    if ($http_user_agent ~* '(DoCoMo|J-PHONE|Vodafone|MOT-|UP\.Browser|DDIPOCKET|ASTEL|PDXGW|Palmscape|Xiino|sharp pda browser|Windows CE|L-mode|WILLCOM|SoftBank|Semulator|Vemulator|J-EMULATOR|emobile|mixi-mobile-converter)') {
      set $mobile 1;
    }
    if ($http_user_agent ~* '(iPhone|iPod|Opera Mini|Android.*Mobile|NetFront|PSP|BlackBerry)') {
      set $mobile 2;
    }
    if ($http_cookie ~* "comment_author_[^=]*=([^%]+)%7C|wordpress_logged_in_[^=]*=([^%]+)%7C") {
      set $do_not_cache 1;
    }
    proxy_no_cache     $do_not_cache;
    proxy_cache_bypass $do_not_cache;
    proxy_cache        czone;
    proxy_cache_key    "$scheme://$host$request_uri$is_args$args$mobile";
    proxy_cache_valid  200 20m;
    proxy_cache_valid  404 5m;
    proxy_pass         http://backend;
  }

  location ~* \.(jpg|png|gif|jpeg|css|js|swf|pdf|ppt|pptx)$ {
    proxy_cache_valid  200 120m;
    expires            864000;
    proxy_cache        czone;
    proxy_pass         http://backend;
  }

  location  ~* \/[^\/]+\/(feed|\.xml)\/? {
    if ($http_cookie ~* "comment_author_[^=]*=([^%]+)%7C|wordpress_logged_in_[^=]*=([^%]+)%7C") {
      set $do_not_cache 1;
    }
    proxy_no_cache     $do_not_cache;
    proxy_cache_bypass $do_not_cache;
    proxy_cache        czone;
    proxy_cache_valid  200 60m;
    proxy_pass         http://backend;
  }
}
</pre>
<p>vim /etc/init.d/spawn-fcgi-php</p>
<pre>#! /bin/sh
### BEGIN INIT INFO
# Provides:          spawn-fcgi-php
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start/stop php-cgi using spawn-fcgi
# Description:       Start/stop php-cgi using spawn-fcgi
### END INIT INFO

# Author: Richard Laskey <me@rlaskey.org>
# for more information, please visit http://rlaskey.org/

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="php-cgi via spawn-fcgi"
NAME=spawn-fcgi-php
PIDFILE=/var/run/$NAME.pid
DAEMON=/usr/bin/spawn-fcgi

# you can change the arguments for spawn-fcgi here:
        # -C 3 implies three children processes
        # -a 127.0.0.1 binds to the loopback device
        # -p XYZ sets the the listening port to XYZ
        # -u and -g set the user/group the process runs as
        # -f is deprecated; -- <command></command> is the preferred syntax
DAEMON_ARGS="-C 3 -a 127.0.0.1 -p 9001 -u www-data -g www-data -P $PIDFILE -- /usr/bin/php-cgi"
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] &amp;&amp; . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (&gt;= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
        # Return
        #   0 if daemon has been started
        #   1 if daemon was already running
        #   2 if daemon could not be started
        # --exec has been replaced by --startas
        start-stop-daemon --start --quiet --pidfile $PIDFILE --startas $DAEMON --test &gt; /dev/null \
                || return 1
        start-stop-daemon --start --quiet --pidfile $PIDFILE --startas $DAEMON -- \
                $DAEMON_ARGS \
                || return 2
        # Add code here, if necessary, that waits for the process to be ready
        # to handle requests from services started subsequently which depend
        # on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
        # Return
        #   0 if daemon has been stopped
        #   1 if daemon was already stopped
        #   2 if daemon could not be stopped
        #   other if a failure occurred
        # removed --name $NAME since the running process is not spawn-fcgi
        start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE
        RETVAL="$?"
        [ "$RETVAL" = 2 ] &amp;&amp; return 2
        # Wait for children to finish too if this is a daemon that forks
        # and if the daemon is only ever run from this initscript.
        # If the above conditions are not satisfied then add some other code
        # that waits for the process to drop all resources that could be
        # needed by services started subsequently.  A last resort is to
        # sleep for some time.
        # commenting out this line; probably won't find processes via --exec
        # start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
        [ "$?" = 2 ] &amp;&amp; return 2
        # Many daemons don't delete their pidfiles when they exit.
        rm -f $PIDFILE
        return "$RETVAL"
}

case "$1" in
  start)
        [ "$VERBOSE" != no ] &amp;&amp; log_daemon_msg "Starting $DESC" "$NAME"
        do_start
        case "$?" in
                0|1) [ "$VERBOSE" != no ] &amp;&amp; log_end_msg 0 ;;
                2) [ "$VERBOSE" != no ] &amp;&amp; log_end_msg 1 ;;
        esac
        ;;
  stop)
        [ "$VERBOSE" != no ] &amp;&amp; log_daemon_msg "Stopping $DESC" "$NAME"
        do_stop
        case "$?" in
                0|1) [ "$VERBOSE" != no ] &amp;&amp; log_end_msg 0 ;;
                2) [ "$VERBOSE" != no ] &amp;&amp; log_end_msg 1 ;;
        esac
        ;;
  status)
       # added -p $PIDFILE, can't find process otherwise
       status_of_proc -p $PIDFILE "$DAEMON" "$NAME" &amp;&amp; exit 0 || exit $?
       ;;
  restart|force-reload)
        # removed  "$NAME", was repetitive
        log_daemon_msg "Restarting $DESC"
        do_stop
        case "$?" in
          0|1)
                do_start
                case "$?" in
                        0) log_end_msg 0 ;;
                        1) log_end_msg 1 ;; # Old process is still running
                        *) log_end_msg 1 ;; # Failed to start
                esac
                ;;
          *)
                # Failed to stop
                log_end_msg 1
                ;;
        esac
        ;;
  *)
        echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" &gt;&amp;2
        exit 3
        ;;
esac

:
</pre>
<p><br />
chmod +x /etc/init.d/spawn-fcgi-php<br />
update-rc.d spawn-fcgi-php defaults<br />
cd ../sites-enabled<br />
ln -s ../sites-available/wktk-blog .<br />
ln -s ../sites-available/wktk-blog-proxy .<br />
/etc/init.d/spawn-fcgi-php start<br />
/etc/init.d/nginx start</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>184</wp:post_id>
		<wp:post_date>2011-06-02 12:23:59</wp:post_date>
		<wp:post_date_gmt>2011-06-02 03:23:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>debianubuntu%e3%81%a7%e3%80%81nginx-fastcgi%e3%81%a7wordpress%e3%82%92%e9%ab%98%e9%80%9f%e3%81%ab%e5%8b%95%e3%81%8b%e3%81%99</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[WordPress]]></category>
		<category domain="category" nicename="%e6%8a%80%e8%a1%93%e3%83%a1%e3%83%a2"><![CDATA[技術メモ]]></category>
		<wp:postmeta>
			<wp:meta_key>_su_rich_snippet_type</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>wpsd_autopost</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JavaでPlay frameworkを試しに遊んでみるもさっそく詰まったでござる</title>
		<link>http://blog.wktk.co.jp/archives/192</link>
		<pubDate>Sat, 16 Jul 2011 21:25:10 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=192</guid>
		<description></description>
		<content:encoded><![CDATA[ひさびさにJavaを触りたいと思っていた。理由はすっかり忘れているから。

ニコ生のプログラミング放送で、どのフレームワークでWebシステムを作ったほうがいいか聞いてみたところ、Play frameworkというのをおすすめされた。Java製（ツール類はPython製もあり）。というわけで、チュートリアルを触って遊んでいたら、いきなり詰まった。初のテストを書く部分で。

以下のようなエラーが自動コンパイル時に発生する。
<pre>Compilation error (In /app/models/user.java around line 9)
The file /app/models/user.java could not be compiled. Error raised is : The public type User must be defined in its own file</pre>
user.javaというファイル名なのにUserというpublicクラスを定義しようとしてエラー。しかし、ファイルシステム上のファイル名はきちんとUser.javaなんだが…

試しに、アプリケーションのtmpディレクトリを削除いてみたら、エラーが変わり
<pre>Compilation error (In /app/models/user.java around line 9)
The file /app/models/user.java could not be compiled. Error raised is : The type User is already defined</pre>
と出るようになった。

原因は、初のテストを書く部分で
<pre>User bob = user.find("byEmail", "bob@gmail.com").first();</pre>
と書いていたこと。
<pre>User bob = User.find("byEmail", "bob@gmail.com").first();</pre>
に修正したら動いた。

名前空間にuserがない -&gt; user.javaというファイルをmodel内で探す -&gt; open時にファイル名の大文字小文字を区別しないシステムだと(Windows/Mac) User.javaをuser.javaでも開ける -&gt; Userの多重定義もしくはファイル名との相違
ということらしい。うおお。

Twitterで、ひさびさに触ったJavaにまだHashMapのリテラルがないことを嘆いてみた。しかし、HashMapのリテラルがないことが、Javaの設定ファイル文化を推し進めているのかな？AnnotationsがついたあたりからJavaを触っていないのでしばらくリハビリしてみる。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>192</wp:post_id>
		<wp:post_date>2011-07-17 06:25:10</wp:post_date>
		<wp:post_date_gmt>2011-07-16 21:25:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>192</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_su_rich_snippet_type</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SALSA AIR/Cosmolite/Liquis/ZERO Air、どのスーツケースを買うかで悩む</title>
		<link>http://blog.wktk.co.jp/archives/196</link>
		<pubDate>Sat, 23 Jul 2011 06:39:17 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=196</guid>
		<description></description>
		<content:encoded><![CDATA[スーツケース選びで悩んでいる。

RIMOWA SALSA AIR 78cmと、Samsonite Cosmolite Spinner 74cmと、antler Liquis 75cmと、ZERO HALLIBURTON ZERO air。サルサエアーが一番容量がでかいが強度的に弱いのかも、コスモライトは貝殻の形状分容量が削られている、antlerは158cmの制限にひっかかる、ZERO airも角が削られている。

Samsonite Cosmolite Spinnet 74cmは実際使っているところを見たことがあり、すごくよいものだった。コストパフォーマンスもよいし。

寝かせて考える。

[rakuten]selection:10007431[/rakuten]
[rakuten]glv:10023533[/rakuten]

[rakuten]getueno:10001812[/rakuten]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>196</wp:post_id>
		<wp:post_date>2011-07-23 15:39:17</wp:post_date>
		<wp:post_date_gmt>2011-07-23 06:39:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%83%aa%e3%83%a2%e3%83%af-%e3%82%b5%e3%83%ab%e3%82%b5-%e3%82%a8%e3%82%a2%e3%83%bc%e3%81%a8%e3%82%b5%e3%83%a0%e3%82%bd%e3%83%a9%e3%82%a4%e3%83%88-%e3%82%b3%e3%82%b9%e3%83%a2%e3%83%a9%e3%82%a4</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%97%a5%e5%b8%b8"><![CDATA[日常]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_su_rich_snippet_type</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DeNAに転職いたしました</title>
		<link>http://blog.wktk.co.jp/archives/202</link>
		<pubDate>Tue, 09 Aug 2011 10:20:34 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=202</guid>
		<description></description>
		<content:encoded><![CDATA[2011年6月、有限会社未来検索ブラジルを退職し、株式会社ディー・エヌ・エーに転職いたしました。

前職でお世話になった多くの方々にじゅうぶんに挨拶できていない状態で、大変申し訳ございません。現職では、スマートフォン向けソーシャルゲームの開発を行っております。今後ともよろしくお願いいたします。

<a href="http://blog.shibu.jp/article/43616649.html" target="_blank">渋川さん</a>と一緒に撮影した写真を掲載します。

<div><a class="thickbox" title="P1040177" href="https://farm7.static.flickr.com/6125/6024273571_31deb49003_b.jpg"><img src="https://farm7.static.flickr.com/6125/6024273571_31deb49003.jpg" alt="P1040177" title="P1040177" width="500" height="375" /></a></div>

目が笑っていない人が僕です。

<div><a class="thickbox" title="P1040178" href="https://farm7.static.flickr.com/6193/6024272833_d4d0e16659_b.jpg"><img src="https://farm7.static.flickr.com/6193/6024272833_d4d0e16659.jpg" alt="P1040178" title="P1040178" width="500" height="375" /></a></div>

目をつぶっている人が僕です。

結論：写真映りもっとよくなりたいよね]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>202</wp:post_id>
		<wp:post_date>2011-08-09 19:20:34</wp:post_date>
		<wp:post_date_gmt>2011-08-09 10:20:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dena%e3%81%ab%e8%bb%a2%e8%81%b7%e3%81%84%e3%81%9f%e3%81%97%e3%81%be%e3%81%97%e3%81%9f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%97%a5%e5%b8%b8"><![CDATA[日常]]></category>
		<wp:postmeta>
			<wp:meta_key>_su_rich_snippet_type</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>147</wp:comment_id>
			<wp:comment_author><![CDATA[tasuku]]></wp:comment_author>
			<wp:comment_author_email>blog@wktk.co.jp</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2012-03-05 21:12:55</wp:comment_date>
			<wp:comment_date_gmt>2012-03-05 12:12:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[コンタクトフォーム放置していたら動かなくなっていました。
ご指摘ありがとうございます。
コンタクトフォームを修正させていただきましたので、そちらから連絡よろしくお願いいたします。]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>145</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1330949575.5348";s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"tasuku";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>145</wp:comment_id>
			<wp:comment_author><![CDATA[R]]></wp:comment_author>
			<wp:comment_author_email>R@R.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2012-02-17 10:42:28</wp:comment_date>
			<wp:comment_date_gmt>2012-02-17 01:42:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[株式会社ｗｋｔｋのコンタクトより問い合わせさせて頂こうとしたところエラーのようです。どちらへご連絡すればよろしいでしょうか？]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1329442948.4243";s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1330949585.3991";s:7:"message";s:53:"tasuku がコメントの状態を approved に変更";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"tasuku";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>MySQL Casual Talks #2で発表しました</title>
		<link>http://blog.wktk.co.jp/archives/208</link>
		<pubDate>Wed, 10 Aug 2011 01:45:06 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=208</guid>
		<description></description>
		<content:encoded><![CDATA[MySQL Casual Talks #2にて発表してきました。「超カジュアルに使うMySQL」という内容で、いつものごとくジョーク枠担当です。

発表資料は以下のとおりです。

<div style="width:425px" id="__ss_8813654"> <strong style="display:block;margin:12px 0 4px"><a href="http://www.slideshare.net/TasukuSuenaga/mysqlcasualtalks2suenaga" title="超カジュアルに使うMySQL @ MySQL Casual Talks #2" target="_blank">超カジュアルに使うMySQL @ MySQL Casual Talks #2</a></strong> <iframe src="http://www.slideshare.net/slideshow/embed_code/8813654" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe> <div style="padding:5px 0 12px"> View more <a href="http://www.slideshare.net/" target="_blank">presentations</a> from <a href="http://www.slideshare.net/TasukuSuenaga" target="_blank">Tasuku Suenaga</a> </div> </div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>208</wp:post_id>
		<wp:post_date>2011-08-10 10:45:06</wp:post_date>
		<wp:post_date_gmt>2011-08-10 01:45:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mysql-casual-talks-2%e3%81%a7%e7%99%ba%e8%a1%a8%e3%81%97%e3%81%be%e3%81%97%e3%81%9f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="category" nicename="%e6%8a%80%e8%a1%93%e3%83%a1%e3%83%a2"><![CDATA[技術メモ]]></category>
		<wp:postmeta>
			<wp:meta_key>_su_rich_snippet_type</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Scala + MongoDB + Herokuで2chクローンを作る（連載第１回）</title>
		<link>http://blog.wktk.co.jp/archives/214</link>
		<pubDate>Mon, 17 Oct 2011 11:18:08 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=214</guid>
		<description></description>
		<content:encoded><![CDATA[人生で3回2chクローン掲示板システムをプログラムし、運用したことがある。

まずはじめは、C++。boostを使ってテンプレート満載な構成だった。VC6でコンパイルできないパターンがあって泣いたっけ。コンパイルの「遅さ」にほくそ笑んでた。あの頃は若かった。

そのコードを使って東京工業大学掲示板というWeb掲示板システムを運用していた。C++では機動的な新機能開発が難しいことを、すぐに思い知った。当時使ったことがなかったPHPで試しにリライトしてみた。数時間で開発できちゃった。すぐリプレイスしちゃうよね。

ニコニコ大百科というWikiシステムを書いたときにも、付随する2ch式の掲示板システムを書いた。Rubyだった。Rubyで実用的なWebアプリケーションを書いたことがなかったが、これも難なく実装することができた。UTF-8を採用したので、トリップの互換性を取るのが面倒だった。

PythonではDjango/Kayそれぞれで掲示板が読み書きレベルでいるくらいまで書いたが、サービスインすることはなかった。

先日、@bibrostさんとお会いする機会があり、ScalaとMongoDBのよさを熱弁されていた。さらに、GraphDBの勉強会でも再度お会いし、これは運命(!?)というしかない状態。さらに、Python Dev. festaで、@voluntasさんがHerokuの話をしていて、そいえば使ったことないなー、と思った。

ピコーン！これらを組み合わせて、2chクローン作ってみて勉強すればよくね？俺の技術catch upは2chクローンを書くことから始まる、的な。

というわけで実録「新しいミドルウェア使うときは大体こんな感じでやるよね」的なエントリを連載します。

Scala始めるならまずこれ、コップ本を読みだした。最近技術書を通しで読めなくなっている僕にとってはキツい厚さ。とりあえず14章まで目を通す。また後で続き読む。

本を読み過ぎたので、浮気してどんなフレームワークを使うかをWeb検索をして考える。ScalaのWebフレームワークは、LiftとPlay! frameworkが著名か。UnfilteredとかScalatraもあるか。

ここで一考。サーバはデータだけを返して、各種レンダリングはクライアントでやらせよう。ほら今時はスマホアプリの時代ですよ。サーバはデータだけ返して、クライアントでレンダリングですよ。SEO的には悪そうだけど、まあスケールはしそうだよね。そういう観点だと、Webフレームワークは使う必要はないか。そしたら、Twitterのfinagleでも使ってみるかね。HTMLが欲しくなったら、薄いラッパをかませばいいし。@bibrostさんもそんな構成勧めてた気がする！

ScalaからMongoDBに接続するにはどうすればいいかなー。「Scala MongoDB」でGoogle検索。どれどれどんなドライバ使ってんのかなー…。１位、Salat。２位、lift-mongodb。３位、Casbah。ぎゃー。全部名前違うやんけ！不吉な香りがするぞ。

んでも、それぞれ中身を見てみると、SalatはCasbahを用いたO/Dマッパー、lift-mongodbはLift内にあるドライバらしい。Liftは使わないし、依存関係も軽くしたいので、Salat/Casbahを使うしかない。MongoDBを使うので、せっかくだったらO/Dマッパー使ってみるか。O/Rマッパーはあんまり使ったことないけど。O/Dマッパーって単語は正しいのかしら。

Rogueとか、Java阪ドライバのScalaラッパとかもあるらしい、という文章が目に入った気がするが、全力でスルー。

調査の結果、要件ざっくり決める。こんな感じだろ。
<ul>
	<li>Herokuでホスティングする</li>
	<li>Scalaで書く(はじめて)</li>
	<li>MongoDBをストレージとする(はじめて)、Salatでつなぐ</li>
	<li>finagle使う(はじめて)</li>
	<li>test firstで書いてみる(ニガテ)</li>
	<li>Webクライアントは、HTML5 + CSS3 + jQuery(まぁまぁ書ける)</li>
</ul>
「finagle MongoDB」でGoogle検索。
<a href="https://github.com/robi42/heroku-finagle-rogue" target="_blank"> Heroku + finagle + MongoDBのサンプルコード発見!!</a>
あ、でもコイツはRogueを使ってるな…まあいい。

「finagle Salat」でGoogle検索。
ムムム…意味ある検索結果が見つからない。

「scala MongoDB Heroku」でGoogle検索。
<a href="http://devcenter.heroku.com/articles/scaling-out-with-scala-and-akka " target="_blank"> Scaling Out with Scala and Akka on Heroku</a>ってのが見つかる。
メモっとこ。

検索結果を見ていると、またよさげなものが見つかる。
<a href="http://janxspirit.blogspot.com/2011/01/quick-webb-app-with-scala-mongodb.html" target="_blank"> A Quick WebApp with Scala, MongoDB, Scalatra and Casbah</a>
Scalatraだけど、それ以外の部分は参考になりそう。

まあ、こいつらを見ながら悪魔合成的にテストコードを書いていけば、
Scala + MongoDB + finagle + Salat on Heroku
でコード書いていけるだろう。

タイミングがよいことに、今週は以下の２つの勉強会に参加することに。
<a href="http://atnd.org/events/20683" target="_blank">MongoDB ソースコードリーディング</a>
<a href="http://partake.in/events/23b82f44-aaed-4479-a2e3-488cfdabcce2" target="_blank">Scala勉強会第56回 in 渋谷</a>
いろいろ情報仕入れられそう。

プログラムは、ニコ生のライブコーディングでガシガシ仕上げていく予定。
次回に続く。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>214</wp:post_id>
		<wp:post_date>2011-10-17 20:18:08</wp:post_date>
		<wp:post_date_gmt>2011-10-17 11:18:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>scala-mongodb-heroku%e3%81%a72ch%e3%82%af%e3%83%ad%e3%83%bc%e3%83%b3%e3%82%92%e4%bd%9c%e3%82%8b%ef%bc%88%e9%80%a3%e8%bc%89%e7%ac%ac%ef%bc%91%e5%9b%9e%ef%bc%89</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="2ch%e3%82%af%e3%83%ad%e3%83%bc%e3%83%b3"><![CDATA[2chクローン]]></category>
		<category domain="category" nicename="mongodb"><![CDATA[MongoDB]]></category>
		<category domain="category" nicename="scala"><![CDATA[Scala]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_su_rich_snippet_type</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Scala + finagle + MongoDB + Herokuで2chクローンを作る（連載第2回）</title>
		<link>http://blog.wktk.co.jp/archives/217</link>
		<pubDate>Thu, 03 Nov 2011 02:18:42 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=217</guid>
		<description></description>
		<content:encoded><![CDATA[タイトルにfinagleを加えて第２回。

Scala勉強会(56回)に参加したら、<a href="http://twitter.com/xuwei_k">@xuwei_k</a> さんが<a href="http://d.hatena.ne.jp/xuwei/20111019">casbahのチュートリアルセッション</a>をしてくれた。いやー、前回のブログは全く有益な情報はないのにもかかわらず、書いておいてよかった。アウトプット重要。

casbahはJava版ドライバの薄いラッパであること。MongoDB -&gt; Java、またはJava -&gt; Scalaでそれぞれインピーダンスミスマッチがあることを教えてもらった。あと、実際に人が開発している様子を見れたのは貴重。コマンドラインでの実行方法とか、ちょっとしたデバッグの方法とか。こういうのは、勉強会に参加する大きなメリット。

Casbahを使ってScalaでデータを入れてみるか。ますは<a href="http://api.mongodb.org/scala/casbah/current/setting_up.html#installing-setting-up-casbah">Casbahのインストールドキュメント</a>を読む。むむむ、インストール方法の選択肢が5つもある。それぞれのメリット・デメリットがよくわからないなぁ… <a href="http://blog.restartr.com/2011/03/07/access-to-mongodb-in-scala-with-casbah/">ScalaからMongoDBへアクセスする – Casbah編</a> ではsbtというのを使っていたので、それ使ってみよう。

sbtとはなんぞや。コップ本の巻末索引を見るとあった。どうやらビルドツールらしい。コップ本には基本的にsbtの解説がない。

<a href="https://github.com/harrah/xsbt/wiki">sbtのページにある手順</a> を参考にして、導入。またインストール方法の選択肢がいっぱいあるのかと思いきや、jar配置して、起動スクリプトを書くだけでいいらしいので楽チン…。かと思いきや、sbtを実行するとエラーが出まくる。
<pre>Error: Could not retrieve JNA</pre>
どうやら依存しているJNAの自動フェッチに失敗しているらしい。

~/.ivy2/local/net.java.dev.jna/jna/3.2.3/jars/
にjna-3.2.3.jarをjna.jarにリネームして置いてあげたら、
<pre>Error: Could not retrieve Scala 2.9.1</pre>
だって。

ここでふて寝しそうになったが、Debianで動かすのをやめてMacで動かしてみる。最近のオシャレミドルウェアは大体Macで簡単に入るようになっている。そうでないと開発者に使ってもらえないからねー。マーケティング的に。

というわけで、Macで動かしたらあっさりsbt動いた。sbt起動時のjavaのオプションに、-Dfile.encoding=UTF-8もつけるようにしておく。

<a href="http://d.hatena.ne.jp/ymraintree/20110714/1310610874">mongodb+casbah+scalaのページ</a> を参考に、build.sbtを書く。

Antはずっと前に触ったことあるけど、MavenとかIvyとか全然知らんかった僕。とりあえず、プロジェクトファイルを書けば、プロジェクトの生成と依存ライブラリの導入ができるらしい。

build.sbtってファイルはこんな風に書けばいいのかな？
<pre>name := "Clone2ch"
version := "1.0"
scalaVersion := "2.9.1"
libraryDependencies ++= Seq(
  "com.mongodb.casbah" % "casbah_2.9.0-1" % "2.1.5.0"
)</pre>
試しにsbt起動したらエラー。eof expected but ';' found.だと。
どうやら、各行ごとに空行を挟む必要があるみたい。空行挟んだら通った。
どういうパースをしているのかいまいちわかってない。
<pre>mkdir -p src/main/scala
vim src/main/scala/TestMongo.scala
---
object TestMongo {
  def main(args: Array[String]) {
    println("test mongo")
  }
}
---</pre>
んで、sbt runとかすると、「test mongo」って表示される。ふー、長かったぜ。初めての対話環境外でのScalaプログラミング。んじゃ、さっそくMongoDBに値を突っ込んでみよー。
<pre class="syntax scala">import com.mongodb.casbah.Imports._

object TestMongo {
  def main(args: Array[String]) {
    val connection = MongoConnection()
    val db = connection("clone2ch")
    val collection = db("bbs")
    collection += MongoDBObject(
      "name" -&gt; "lobby",
      "name_jp" -&gt; "ロビー",
      "domain" -&gt; "mentai.2ch.net",
    )
    collection.find().foreach(println)
  }
}</pre>
エラー。どうやら、MongoDBObjectのファクトリメソッドに渡している最後のコンマがまずいらしい。取ってみる。…動かない。import com.mongodbの時点で、comにmongodbなんてメンバないぜと言われる。

しばらく悩んだ結果、pwdがsrc/main/scalaだったのがダメみたい。sbtが見るbuild.sbtはカレントにないとダメなのね。Hello, World的なものの場合には何もimportしていなかったから、カレントにbuild.sbtがなくてもsbt runが問題なく動作していたらしい。build.sbtがあるディレクトリまで上がって実行。
<pre>"_id" : { "$oid" : "4e9c5f8e03644d5841503e66"} , "name" : "lobby" , "name_jp" : "ロビー" , "domain" : "mentai.2ch.net"}</pre>
おおー、動いたきゃっきゃ。もっかいrun!
<pre>{ "_id" : { "$oid" : "4e9c5f8e03644d5841503e66"} , "name" : "lobby" , "name_jp" : "ロビー" , "domain" : "mentai.2ch.net"}
{ "_id" : { "$oid" : "4e9c5feb036461f9a18ebaad"} , "name" : "lobby" , "name_jp" : "ロビー" , "domain" : "mentai.2ch.net"}</pre>
ぎゃーレコードが２つに増えた。nameをidにすればいいのかな？でもnatural keyとsurrogate keyは分けたいよね。$oidはどうやら一意でかつ必ず付与されそうだから、natural keyをそのままidとしても問題ないのかな？と思ったけど、nameをid_とするのはやめておこう。

unique制約的なものはどうやって付与するんだろう。

「mongodb unique constraint」でGoogle検索。MongoDBのJavaScriptでは
<pre>db.bbs.ensureIndex({name: 1}, {unique: true});</pre>
的な感じでunique制約が付けられるようだ。

「ensureIndex casbah」でGoogle検索。
<pre>def ensureIndex [A] (keys: A, name: String, unique: Boolean)(implicit arg0: (A) ⇒ DBObject): Unit</pre>
でuniqueインデックスが付けられるらしい。

ふと思ったこと。シャーディング時のunique制約確認はどうやっているんだろう。まあ、bbsはシャーディングするほどのレコード量にならないからいいか。

<a href="http://www.mongodb.org/display/DOCS/SQL+to+Mongo+Mapping+Chart">SQL to Mongo Mapping Chart</a>が便利。あと、これも勉強会で教えてもらったのだが、sbt consoleが便利。sbtのプロジェクト環境のもとで、対話的な実行ができる。

さて、実際にモデリングを始めてみよう。

２ちゃんねる掲示板の要件を簡単に整理。
<ul>
	<li>掲示板は、ホスト名と掲示板名で一意に特定される。</li>
	<li>スレッドは、掲示板とスレッドIDで一意に特定される。</li>
	<li>レスは、スレッドとレス番号で一意に特定される。</li>
</ul>
be板も考えると、
<ul>
	<li>ユーザは、メールアドレスで一意に特定される。</li>
	<li>レスには、ユーザが1対1対応する、もしくはユーザが空である。</li>
</ul>
というわけで、基本的に1対多なリレーションが多いわけですな。

<a href="http://d.hatena.ne.jp/masa_w/20101130/1291084939">MongoDBにおける関連（Relation）のスキーマ設計</a> を読むと、１つのCollectionになるべく詰めてあげたほうが効率がよいらしい。しかし、Collectionには最大サイズがあるため、実用的にはCollectionを分割するようだ。今回は、それぞれのCollectionを別に分けて設計したい。

しかし、Scalaらしいオブジェクトモデリングがわからん。素直にBbs、BBSThread、Res、Userとかをcase classで書き起こせばいいんだろうか。また、日付型は何を使うのがいいのかな？…これは勉強不足だな。というわけで、Scalaで書かれたソースコードを読むお勉強モードに切り替える。

finagleを使うのであれば、finagleのサンプルコードをついでに見るのがよいだろう。Google検索の結果により、<a href="https://github.com/jlcheng/hello-finagle">Hello fingleという素敵なプロジェクト</a>を参考にすることにする。

今日はScalaハッカソンに参加中。GMOのカフェは居心地がとてもよい。白熱電球色でありながら、光量が確保してあって、音響もちょうどいい。あと、クリスタルのドラえもんブックエンドがある。GMOすばらしい。多謝。Scalaでお仕事もしているらしいし。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>217</wp:post_id>
		<wp:post_date>2011-11-03 11:18:42</wp:post_date>
		<wp:post_date_gmt>2011-11-03 02:18:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>scala-finagle-mongodb-heroku%e3%81%a72ch%e3%82%af%e3%83%ad%e3%83%bc%e3%83%b3%e3%82%92%e4%bd%9c%e3%82%8b%ef%bc%88%e9%80%a3%e8%bc%89%e7%ac%ac%ef%bc%92%e5%9b%9e%ef%bc%89</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="2ch%e3%82%af%e3%83%ad%e3%83%bc%e3%83%b3"><![CDATA[2chクローン]]></category>
		<category domain="category" nicename="mongodb"><![CDATA[MongoDB]]></category>
		<category domain="category" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="category" nicename="%e6%8a%80%e8%a1%93%e3%83%a1%e3%83%a2"><![CDATA[技術メモ]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_su_rich_snippet_type</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Scala + finagle + MongoDB + Herokuで2chクローンを作る（連載第3回）</title>
		<link>http://blog.wktk.co.jp/archives/220</link>
		<pubDate>Sat, 05 Nov 2011 17:23:53 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=220</guid>
		<description></description>
		<content:encoded><![CDATA[11/3に、@xuwei_k さんの誕生祝 &amp; Scalaハッカソン！に参加した。とりあえず、Hello Finagleを見ながら、Finagle製のWebサーバを立てることを目指す。まずは、静的なHTMLファイル返答するところまで作ろう。

むむむ…sbtの標準ディレクトリ構成がわからん。sbtのディレクトリ構成はMaven由来らしいので、<a href="http://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html">Mavenのディレクトリ構成</a>を見る。

どうやら、src/main/webappというディレクトリを掘ればいいらしい。ホントにこれでいいのかな。「sbt resources 」でGoogle検索。そのものずばりな、<a href="http://stackoverflow.com/questions/3868708/what-are-resources-folders-in-sbt-projects-for">What are “resources” folders in SBT projects for?</a>という質問を発見。そこのリンクから、さらに<a href="http://stackoverflow.com/questions/5285898/how-to-get-a-resource-within-scalatest-w-sbt">how to get a resource within scalatest w/ sbt</a>を見る。

どうやら、リソースファイルのパスprefixはgetClass.getResource()で取得するのがJavaでは普通で、Scalaでもそうするらしい。Javaに詳しくないことがバレてしまう。staticに配信するHTMLファイルはsrc/main/resourcesかsrc/main/webappかどちらに置いたほうがいいのか、よくわからなくなってきたぜ。とりあえずwebappに置くことにする。

<a href="https://github.com/twitter/finagle/blob/master/finagle-example/src/main/scala/com/twitter/finagle/example/http/HttpServer.scala">finagleを用いたWebサーバのひな形（あきこ）</a>がある。どうやら、<a href="http://www.jboss.org/netty">Netty</a>が用意するHTTPハンドラを使っているらしい。このひな形をベースに、
<ul>
	<li>^/$, ^/css, ^/js -&gt; staticなファイルを返す、mime-typeは拡張子からマッピングする</li>
	<li>それ以外は、それぞれのcaseクラスにマッピングしてハンドリングする</li>
</ul>
みたいなことを書いていけばいいだろう。しかも、パスからのdispatchで、matchとか使えばScalaっぽくなるっしょ!?

まずは、HTTP Methodのハンドリングだな。NettyのHTTPRequestのメソッドであるgetMethod()でパターンマッチするのが常道か。「"getMethod match"」でGoogle検索。それでひっかかった、<a href="http://code.google.com/p/punk/">PunkというWebフレームワーク</a>がサイズ小さそうなので読んでみる。

ソースを読む上で、vimのsyntax highlightが欲しい。
<pre class="syntax bash">sbaz install scala-tool-support
cp -R /usr/local/Cellar/scala/2.9.1/libexec/misc/scala-tool-support/vim/ ~/.vim</pre>
という風にしたら、syntax highlightがついた。いえー。

Punkでは、静的ファイルをどのように読み込み、クライアントに返しているのか。
<pre class="syntax bash">ack File</pre>
でgrep。src/main/scala/punk/PunkFilter.scalaにreadFile()というメソッドがあるらしい。
<pre class="syntax scala">    private def readFile(url: URL) = {
      scala.io.Source.fromURL(url).mkString
    }</pre>
うーむ。scala.io.Source.fromURL(url).mkStringってその場で文字列作るから、ファイルI/O待ってブロックするんじゃねーの？
FinagleのイベントループにFile I/Oも載せられるような何かはないのかなー。初心者のクセに欲張りかもしらんけど。

と思ったらあったー、<a href="https://github.com/twitter/finagle#Using%20Future%20Pools">Finagleのドキュメント内、Using Future Pools</a>。

FinagleはFutureという型をよく使うが、一種の遅延評価みたいなもんだろう。上記のサンプルに、importを補うとこんな感じか。
<pre class="syntax scala">import com.twitter.finagle.Service
import com.twitter.util.FuturePool
import java.util.concurrent.Executors

class ThriftFileReader extends Service[String, Array[Byte]] {
  val diskIoFuturePool = FuturePool(Executors.newFixedThreadPool(4))

  def apply(path: String) = {
    val blockingOperation = {
      scala.Source.fromFile(path) // potential to block
    }
    // give this blockingOperation to the future pool to execute
    diskIoFuturePool(blockingOperation)
    // returns immediately while the future pool executes the operation on a different thread
  }
}</pre>
このThriftFileReaderを実行してみると、型エラーが出た。fromFileはscala.io.BufferedSourceを返すが、FuturePool.apply()は、Array[Byte]を受け取る。scala.io.BufferedSourceからArray[Byte]に変換する方法を調べよう…と思ったけど、面倒なのでやめる。toArrayあたりでいいのかな？

とりあえず、同期でもいいからファイルをHTTP経由で返すところまでもっていこう。
<pre class="syntax scala">response.setContent(copiedBuffer(scala.io.Source.fromFile("src/main/webapp/index.html").mkString, UTF_8))</pre>
うむ。ブラウザからアクセスしたところ、index.htmlが表示された。しかし、このcopiedBufferをはさむところがなんかダサいな。

responseはNettyのHttpResponseのインスタンス。setContentはバッファを受け取る。fromFile()はscala.io.BufferedSourceを返す。setContentが受け取るのはorg.jboss.netty.buffer.ChannelBufferインターフェース互換のもの。うまくやれば直接変換できそうな予感。そうすれば、FuturePoolでラップしなくても、実際にI/Oが必要となったときにFile -&gt; Networkに直に転送してくれたりできそうな気配がする。けど、これもあまり深追いしないでおく。

pathによってきちんと返すファイルを変えよう。
<pre class="syntax scala">response.setContent(copiedBuffer(scala.io.Source.fromFile("src/main/webapp" + request.getUri).mkString, UTF_8))</pre>
動作した。

上記のサンプルは、「/」へのアクセスでindex.htmlを返してくれない。また、ありがちな「../../../etc/passwd」的なものに弱い。前者について、HttpRequestのパスが「/」の場合には「/index.html」と解釈するようにしよう。後者について、パスを作ったあとパスの正規化をして、そのprefixをチェックする、っていうのが一般的な処理だろう。今回は、Scalaの正規表現を勉強したいので、とりあえず「..」という部分文字列があったら例外を投げるようにしてみる。

こんな感じでよかんべ。「..」にマッチする正規表現をソースコードに埋め込むのは面倒だ。最初は、"\\.\\."と書いたが、"""\.\."""とも書けるようだ。
<pre class="syntax scala">  val tentenRegex = """\.\.""".r
  val path = request.getUri

  val filePath = "src/main/webapp/" + path match {
    case tentenRegex() =&gt; throw new Exception
    case "/" =&gt; "/index.html"
    case _ =&gt; path
  }</pre>
初match！どきどき…あれれ、動作しない。ルートにアクセスしても、/index.htmlの内容を返してくれない。なんでだろ？調べてみると、pathが「/」の際に、２個目のcaseにマッチしていないようだ。なんでだ。俺たちはまだ、青春知らずさ。

ためしにifでマッチするかどうか試してみるか。
<pre class="syntax scala">  val path = request.getUri

  if (path == "/") {
    println("match de-su")
  }</pre>
match de-suって表示された。ifだとうまくいくようだ。なんでだろう。matchへの理解不足だな。とりあえず、スタンドアロンのmatch検証プログラムを書いて動作させるか。道のりは遠い。

今回の分はコミットしていないですが、<a href="https://github.com/gunyarakun/clone2ch">githubでソースコードを公開し始めました</a>。<a href="http://com.nicovideo.jp/community/co1170019">ニコニコ生放送でライブコーディング（という名のつぶやき放送）もやっております</a>。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>220</wp:post_id>
		<wp:post_date>2011-11-06 02:23:53</wp:post_date>
		<wp:post_date_gmt>2011-11-05 17:23:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>scala-finagle-mongodb-heroku%e3%81%a72ch%e3%82%af%e3%83%ad%e3%83%bc%e3%83%b3%e3%82%92%e4%bd%9c%e3%82%8b%ef%bc%88%e9%80%a3%e8%bc%89%e7%ac%ac3%e5%9b%9e%ef%bc%89</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="2ch%e3%82%af%e3%83%ad%e3%83%bc%e3%83%b3"><![CDATA[2chクローン]]></category>
		<category domain="category" nicename="mongodb"><![CDATA[MongoDB]]></category>
		<category domain="category" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="category" nicename="%e6%8a%80%e8%a1%93%e3%83%a1%e3%83%a2"><![CDATA[技術メモ]]></category>
		<wp:postmeta>
			<wp:meta_key>_su_rich_snippet_type</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>第1回ニコニコ学会βでダダすべり発表してきました</title>
		<link>http://blog.wktk.co.jp/archives/225</link>
		<pubDate>Wed, 07 Dec 2011 16:56:24 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=225</guid>
		<description></description>
		<content:encoded><![CDATA[第1回ニコニコ学会βという学会で発表させていただきました。運営の皆様がた、発表の機会を設けてくださり誠にありがとうございます。職場の皆様がた、忙しいさなか有給使ってごめんなさい。

ニコニコ動画そのもののデータ研究をやっている人が少ないこと、またデータ研究は３分間での解説が難しいこと、この２点に悩んだ結果、「ともかくウケ狙い」といういつもの路線に落ち着いた次第です。当初の予定には入っていた、マック赤坂ばりに「みなさ〜ん…"ニコニコっ"…してますかぁ〜」というネタは、やらなくてよかったと今となっては心底思っています。

<a href="http://www.wktk.co.jp/public/gunyara-nicogakkai-2011-12-06.zip">学会で紹介した、ニコニコ動画タグの関係性を表した生データ（重みなしグラフ、lgl形式）と、それをデンドログラム・Voronoi Treemapで図示したpdfをダウンロードできるようにしました。</a>

<img src="https://farm8.staticflickr.com/7166/6472323183_62970470f1_o.jpg" alt="" title="ニコニコ動画タグ解析" width="384" height="384" class="aligncenter" />

発表当日いい忘れたことがあります。やはり、ニコニコ動画は「音楽サイト」だな、ということです。
<ul>
	<li>商用音楽</li>
	<li>同人音楽、ボーカロイド（打ち込み文化）</li>
	<li>歌ってみた、踊ってみた（音楽はあくまでネタのひとつ、みんなが知っている曲が対象）</li>
</ul>
が大きな３ジャンルを占めています。ドワンゴはもともと着メロサイトをやっていたこともあり、やはり音楽コンテンツが強い会社、ということなのでしょうか。

また、東方・アイマス・Vocaloidのいわゆる御三家は、「部品化」されているという印象を持っています。これらは、ニコニコ動画でコンテンツを作る際の欠かせないミドルウェアです。ゲーム・音楽・キャラクターの３大要素を兼ね備えた、新しい御三家の登場を期待します。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>225</wp:post_id>
		<wp:post_date>2011-12-08 01:56:24</wp:post_date>
		<wp:post_date_gmt>2011-12-07 16:56:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e7%ac%ac1%e5%9b%9e%e3%83%8b%e3%82%b3%e3%83%8b%e3%82%b3%e5%ad%a6%e4%bc%9a%ce%b2%e3%81%a7%e3%83%80%e3%83%80%e3%81%99%e3%81%b9%e3%82%8a%e7%99%ba%e8%a1%a8%e3%81%97%e3%81%a6%e3%81%8d%e3%81%be%e3%81%97</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e9%a1%9e"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_su_rich_snippet_type</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Make JDBC metadata class for Querydsl on Gradle with settings written by YAML</title>
		<link>http://blog.wktk.co.jp/archives/229</link>
		<pubDate>Mon, 05 Mar 2012 12:45:55 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=229</guid>
		<description></description>
		<content:encoded><![CDATA[This is an example of build.gradle to make JDBC metadata class for Querydsl.
JDBC settings are written in ../config.yaml. The target RDBMS of JDBC is MySQL.
It's not smart, although it works well.
<pre class="syntax groovy">// vim: set expandtab ts=2 sw=2 nowrap ft=groovy ff=unix : */
sourceCompatibility = 1.6 // TODO: 1.7
version = '1.0'
group = 'jp.co.wktk.apiserver'

apply plugin: 'java'
apply plugin: 'jetty'

jettyRun.contextPath = ''
jettyRunWar.contextPath = ''

task wrapper(type: Wrapper) {
  gradleVersion = '1.0-milestone-8a'
}

import groovy.sql.Sql
import com.mysema.query.sql.MetaDataExporter

sourceSets {
  main {
    java {
      srcDir getGeneratedSrcPath()
    }
  }
}

// This build script uses snakeyaml for load YAML settings about database for Querydsl.
import org.yaml.snakeyaml.Yaml
buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath group: 'org.yaml', name: 'snakeyaml', version: '1.10'
    classpath group: 'com.mysema.querydsl', name: 'querydsl-sql', version: '2.3.1'
  }
}

repositories {
  mavenCentral()
  maven {
    url 'http://source.mysema.com/maven2/releases/' // for Querydsl
  }
  maven {
    url 'http://mvnrepository.com/' // for MySQL
  }
}

configurations {
  mysqlDriver
}

dependencies {
  compile(
    // for querydsl
    [group: 'com.mysema.querydsl', name: 'querydsl-sql', version: '2.3.1'],
    [group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.6.1'],
    // for yaml
    [group: 'org.yaml', name: 'snakeyaml', version: '1.10']
  )
  testCompile(
    [group: 'org.testng', name: 'testng', version: '6.4']
  )
  runtime(
    // for MySQL
    [group: 'mysql', name: 'mysql-connector-java', version: '5.1.18']
  )
  mysqlDriver group: 'mysql', name: 'mysql-connector-java', version: '5.1.18' // for MySQL
}

compileJava {
  doFirst {
    // load config from YAML
    File configFile = new File('../config.yaml')
    Yaml yaml = new Yaml();
    def config = yaml.load(configFile.newReader())
    def dbConfig = config.database;

    // Load MySQL Driver
    configurations.mysqlDriver.each {file -&gt;
      gradle.class.classLoader.addURL(file.toURI().toURL())
    }

    // Create classes for Querydsl
    def sql = Sql.newInstance("jdbc:mysql://${dbConfig.host}:${dbConfig.port}/apiserver",
      dbConfig.username,
      dbConfig.password,
      'com.mysql.jdbc.Driver')
    MetaDataExporter exporter = new MetaDataExporter();
    exporter.setPackageName('jp.co.wktk.apiserver.persistence')
    exporter.setTargetFolder(getGeneratedSrcPath())
    exporter.export(sql.getConnection().getMetaData())
  }
}

test {
  useTestNG()
}

def getGeneratedSrcPath() {
  new File(
    buildDir.absolutePath + File.separator +
    'generated-src' + File.separator +
    'java')
}</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>229</wp:post_id>
		<wp:post_date>2012-03-05 21:45:55</wp:post_date>
		<wp:post_date_gmt>2012-03-05 12:45:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jdbc-metadata-class-querydsl-gradle-settings-written-yaml</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gradle"><![CDATA[Gradle]]></category>
		<category domain="category" nicename="groovy"><![CDATA[Groovy]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="querydsl"><![CDATA[Querydsl]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_su_rich_snippet_type</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JSON on HTTPやWeb APIを各言語でどうやって実装するのか</title>
		<link>http://blog.wktk.co.jp/archives/234</link>
		<pubDate>Sat, 24 Mar 2012 15:03:17 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=234</guid>
		<description></description>
		<content:encoded><![CDATA[HTTPでアクセスして、JSONを返すようなWebサーバを書きたいとする。 どんな言語を選ぶか。どんなミドルウェアを選ぶか。どんなライブラリを選ぶか。

たとえば、TIOBE Softwareが公表している<a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html">「Programming Community Index(PCI)」という指標がある。</a>人気のあるプログラミング言語の数値化。これを見ていて思ったのは、「多すぎだよね、プログラミング言語」ということ。これらのうち、どの言語を勉強し、どの言語をプロジェクトに採用すべきなのか。

その感触を得るために、 「同じ仕様のREST serviceを複数言語で実装したらいいんじゃね？」 と思った。いくつかの言語で実装を起こしてみている。
<h2>前提条件</h2>
大規模な開発を想定する。ユーザの規模が大規模。トランザクション数が大規模。そして、開発者が大規模。

実用的かつモダンな開発を想定する。プロジェクト毎のバージョンを固定したモジュール管理、コード埋め込みドキュメント、ユニットテスト、継続的インテグレーション、A/Bテスト、ロギング、死活監視、プロファイリング、エラー時のわかりやすいスタックトレース、ホットデプロイ、セキュリティ、認証、ランキング、memcachedでのキャッシュ、Accept-Languageによる文言の多言語化などである。

Web APIの仕様は、<a href="http://www.slideshare.net/apigee/restful-api-design-second-edition">RESTful API Design Second Edition</a>を参考にする。HATEOASな設計にそれほどこだわらずに。
<h2>要件</h2>
言語は、以下の3つを当初のターゲットとする。
<ul>
	<li>Perl</li>
	<li>Ruby</li>
	<li>Java</li>
</ul>
以下のような要件とする。よくあるWebシステムで、API提供寄り、というイメージ。
<ul>
	<li>JSON via HTTP <a href="http://gunyarakun.github.com/api-server-standard/api.html">詳細な仕様はGitHub Pagesを参照のこと。</a></li>
	<li>かんたんなCRUD。</li>
	<li>データベースのパスワードなど各種設定は、YAMLから読み込む</li>
	<li>複数人での開発を前提とする。RouterとかDispatcherのような、HTTP path to methodのマッピングは分割可能とする。</li>
	<li>RDBMSはMySQL。余計な論点を持ち込まないため。</li>
	<li>依存パッケージはプロジェクトローカルに配置し、インターネットから自動fetchする</li>
	<li>かんたんなHTMLをテンプレートを通じて返すことができる。ちょっとした動的HTMLを返したいこともある。</li>
	<li>静的なファイルをHTTP経由で配信できる。</li>
	<li>APIサーバ用途がメインだが、ちょっとした動的HTMLを返したいこともあるだろう。</li>
	<li>O/Rマッパーは使わないかわりに、SQL builderを使う。</li>
	<li>HTTP RequestのAcceptヘッダの先頭を見て、HTMLの場合にはJSONをインデントつけて見やすくしたHTMLとして出力してほしい</li>
	<li>エラーの場合、HTTP RequestのAcceptヘッダの先頭を見て、HTMLでない場合にはJSONのフォーマット内にリッチなエラー情報を埋め込んで欲しい</li>
</ul>
ドキュメントはSphinxで書く。RESTfulなAPIの仕様を書くために、<a href="https://github.com/deceze/Sphinx-HTTP-domain">Sphinx HTTP Domain</a>を導入。

以下、各言語で未完成ながらもミドルウェア選定・実装をしてみた感想を述べる。
<h2>Ruby</h2>
まず、Rubyから実装してみた。テストはほぼ未着手。

選んだミドルウェア・ライブラリはこちら。

Unicorn/Sinatra/mysql2/Arel/yaml/json/YARD yard-sinatra/rspec rake-test/memcached/RubyProf/shotgun/rack-protection/split/rvm gem

SQL BuilderであるはArelはActiveRecordの一部となっている。よって、最小限のActiveRecordのメソッドも使う。

ついでに、Travis CIで継続的インテグレーションを行う。

Sinatraのかわりに、<a href="https://github.com/intridea/grape/wiki">grape</a>と<a href="http://restfulie.caelum.com.br/">restfulie</a>の採用も考えたけど、周辺のプロダクトやドキュメントの充実っぷり、HTMLでのスタックトレースのキレイさに惹かれたんよ…。
<h2>Perl</h2>
Perlでは、簡単なプロトタイプ実装をしてみた。仕様をフル実装はできていないし、Dispatcherも分割できていない。

選んだミドルウェア・ライブラリはこちら。自信ないなー。

Starlet/Amon2/DBD::mysql/SQL::Maker/YAML::XS/JSON::XS/POD/Test::Unit Test::WWW::Mechanize::PSGI/Cache::Memcached::Fast/Devel::NYTProf/Plack::Loader::Shotgun/Amon2::Plugin::Web::CSRFDefender/(A/B testing framework見つからず)/cpanm

Perlで一番いやだったのは、JSONで「数値」を返すために加工が必要なこと。MySQL由来の「数値」は、明示的な加工をしない限り「数字」になってしまう。JSON Schema的なものを使えばいいんだろうけど。

WAFについて、Mojolicious::LiteかAmon2か悩んだ。Mojolicious::Liteのほうが見た目的にシャレオツな書き方ができる気がする。特にフック部分。あと、コップの水が溢れるエラー画面がカッチョイイ。国内Perl Mongersへの刺さり具合を考えてAmon2とした。

PSGIベースのA/Bテストフレームワークはあるのかな。<a href="https://github.com/andrew/split">Rubyのsplit</a>的な。

あとは、Doxygen的なものをPODでやるのはどうするんだろう。<a href="https://github.com/pvande/yard-perl-plugin">YARDでPerlのドキュメントを書く、ってものもあったけどアクティブじゃない。</a>
<h2>Java</h2>
Javaのコードは久しく書いていない。知識レベルが、JDK 1.3で止まっている。 そのせいもあり、Javaのミドルウェア選定は悩んでいて、プロトタイプ実装しかできていない。

選んだミドルウェア・ライブラリはこちら。自信ゼロ。

Jetty/htmleasy(resteasy)/ConnectorJ/Querydsl/SnakeYAML/JSON.simple/JavaDoc/TestNG Spock/xmemcached/(JVMTI対応の何かのプロファイラ)/Gradle Jetty Plguin/(Servlet用のセキュリティフィルター探してない)/(A/B test framweworkも探してない)/Gradle Ivy

Sinatraライクなフレームワークは、Spark/Napalm/htmleasyの3つを発見。 htmleasyは、JBossのRESTEasyというJAX-RS実装を元にしているようだ。 3フレームワークの中では、一番開発が活発そうだ。これにしよう。

そもそも、JAX-RSという仕様があるのを知らなかった。なんでも仕様があるなJava。リファレンス実装はJersey。Apache CXFなんて実装もある。

SQL builderは<a href="http://www.jooq.org/">jOOQ</a>、<a href="http://www.querydsl.com/">Querydsl</a>、<a href="http://iciql.com/">iciql</a>で悩んだ。Querydslは<a href="http://www.springsource.org/spring-data/jpa">Spring JPA</a>や<a href="http://www.springsource.org/spring-data/jdbc-extensions">Spring Data JDBC Extension</a>でもサポートされている。よって、Querydslを選択した。

問題なのはJDBCラッパ。まずは、生JDBC + Querydslを検討し、プロトタイプ実装をしてみた。次に、Spring JPA + Querydsl、Spring Data JDBC Extension + Querydslも考えた。いまいちどれがいいのかわからないし、htmleasy(RESTeasy)と食いあわせがよいものがわからない。

ビルドツールはGradle。sbtと迷った。Scala版を書くならsbtなので、JvaはGradleでいくことに。YAML読み込みやQuerydslのモデルクラス作成も頑張って書いてみた。Maven Pluginで用意されている機能を移植するのはめんどいなー。Gradleでのライブラリ読み込みがいまいちよくわかっていない。<a href="http://togetter.com/li/260291">今どきのJavaっ子はGradleだよねー</a>というのにほだされた。実際、Gradleのほうが小回りが利いてよい。

DI containerはGuice。XML書かなくてよいという噂だけで選択。んでも、DI containerのキモをつかめてないんだよなー。モデルクラスをPOJOにしたいでしょ？ってくらいの認識しかないんだなこれが。
<h2>JRuby + Netty</h2>
これは飛び道具的な。ちょっとネタ的だが、意外といけるんじゃねと思っていたりする。とりあえず、HTTPで固定のレスポンスを返すまで実装してみた。

<a href="http://netty.io/">Netty</a>とは、非同期I/Oネットワークアプリケーションフレームワーク。こないだまでJBoss内のプロジェクトだった気がしたけど、どうやら独立したらしい。

ちなみに、Nettyを使ったRack対応サーバとして、<a href="http://kevwil.github.com/aspen/">aspen</a>というものがある。
<h2>Python / PHP / Scala / C# / JavaScript</h2>
未着手だが、これらの言語でも実装したい。

Pythonはさほど問題なくミドルウェアの選定も開発もできそう。PHPはRESTなんてガン無視しつつ生PHPで書くが好みだが、かなりミドルウェア選定で悩みそう。Scalaは2ch cloneの開発が止まっているが、そちらを先にやりたい。C#は、MS系に寄せるか、そうでないかで選択肢がありそう。JavaScriptだとNodeを使うんだろうが、どのくらいミドルウェア揃っているんだろう。
<h2>TODO</h2>
まだまだやるべきことは多い。俺TDD苦手だな。テストがあることが重要なのではなく、コードがテスタブルであることは重要だ、という信念は持っている。しかし、やはりテストを書くのはめんどい。
<ul>
	<li>各言語で仕様を満たす。</li>
	<li>テストカバレッジ100%を目指す。</li>
	<li>ドキュメントカバレッジ100%を目指す。</li>
	<li>OAuth2認証</li>
	<li>memcachedでGETの場合のキャッシュを行う。</li>
	<li>日次バッチ</li>
	<li>A/B test</li>
	<li>ランキング</li>
	<li>fluentdによるロギング</li>
	<li>死活監視、リソース監視</li>
</ul>
各言語でスループットの計測も行いたい。早ければ正義というわけでもないが、生産性と性能とのトレードオフを見極めたい。TPC-C/Eとまでは言わないが、何かしらのJSON/HTML on HTTPの標準的な性能評価法が確立していて欲しい。

現時点の僕の実装は、各言語とも完成度が低い。同じハードウェアで計測する場合でも、OSの設定や、JVMの設定、コンパイルオプションも性能に大きく影響する。それらの数値をチューニングした上で計測を行う必要がある。適切なチューニングを行わないままベンチマークを行い、その結果をブログに掲載したらどうなるか。想像するだに身震いする。モヒカンの宴。abかhttperfあたりでの性能計測シェルスクリプトを書くくらいに留めておこう。ヘタレ俺。
<h2>まとめ</h2>
結局、どの言語・ミドルウェア・ライブラリが適しているかの結論は出せていない。そして、将来的にも出せる見込みはない。ただ、各言語でこのプロジェクトが目指すところを実装することには意味を感じている。実用的なWeb APIプログラムを書くときの基礎はあるべきだ。

今回のプロジェクトは、メジャーな3言語を対象とした。情報があふれている3言語なのに、調査にかなり時間を費やした。情報があふれているからこそ、調査に時間がかかるのかもしれない。

なぜJavaの調査をしたか。これからの大規模サーバサイドWeb開発環境は、いよいよJVM上に寄っていくのではないか、と予想しているからである。

バックエンドのロジック部分と、フロントのビュー作成部分は分けたい。お互いを呼び出す必要がある。 内部APIを呼び出しするだけなのに、HTTP(あるいはThriftでも)のオーバーヘッドに耐えなければならない。それはつらい。すべてJVM内部で閉じていれば、関数呼び出しで済むのだ。

仮にJVM外の言語から機能を利用しようとすれば、それこそHTTP経由でアクセスすればよい。HTTPクライアントライブラリがないWeb向け実用言語はないだろう。HTTPさえサポートすれば、最低限の相互運用性は確保できる。たとえば、全銀協標準プロトコル@TCP/IPはCORBAを採用しているが、Web系に限れば、もはやCORBAもSOAPも出る幕はないだろう。

バックエンドのロジック部分は静的型付言語のほうがいいのではないか。<a href="http://tech.cm55.com/wiki/scala/ruby">動的型付言語は使い物にならない</a>という意見もあるが、そこまでは思っていない。しかし、純粋なロジック部分については静的型付言語で書きたい。

フロントのビュー作成部分は、やはりゆるく・スピーディーに書きたい。また、教育コストが低くあって欲しい。そして、「楽しく」あってほしい。

JVM言語でメジャーなのは、Java/Groovy/Jython/JRuby/Clojure/Scala/Kotlinか（JPerlは名前的に紛らわしいな…）。それはともかく、これらの言語のどれを採用すべきか。

個人的には、JRuby on RailsとScalaの組み合わせなんかが面白いと思っている。Ruby on Railsはちまたに解説も大量にある。少しのお膳立てをしてあげれば、JRuby on Railsも難しくない。<a href="http://www.infoq.com/articles/linkedin-scala-jruby-voldemort">LinkedInの事例もあるよね。</a>TwitterはJavaとRubyをThriftでつないでいるから、これはまた違った路線。

しかし、<a href="http://toyoshi.hatenablog.com/entry/2012/03/09/143753">各言語で知らなきゃいけないことが多すぎないか。</a>本来は3言語で仕様を完璧に満たして公開したかったが、途中公開に踏み切ったのは、そもそものミドルウェア・ライブラリ選定に早めにツッコミもらったほうがよさそうだ、という判断による。JSONパースライブラリが複数あってどれ選べばいいかわからないという状況は、「多様性があっていいよね」とプラスに捉えられるほど僕の人生は余っていない。

「なんでこの言語がないんだ！」という方々。 「こんなミドルウェア・ライブラリ選ぶなんてセンスねーな」という方々、 pull requestお待ちしております。マジで。書いてて自信ないんで。

<a href="https://github.com/gunyarakun/api-server-standard">リポジトリはこちら。</a>

スペシャルサンクスで、同僚の稲川さんと、勤め先のハッカソン部(部長 <a href="http://www.hatena.ne.jp/riywo/">id:riywo</a>）、java-ja温泉参加者のみなさま。はてブで意見いただいた方もありがとうございます。たしかに話を聞いているとPlay! 2は合致してそうなんだよなー…]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>234</wp:post_id>
		<wp:post_date>2012-03-25 00:03:17</wp:post_date>
		<wp:post_date_gmt>2012-03-24 15:03:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>json-http%e3%82%84web-api%e3%82%92%e5%90%84%e8%a8%80%e8%aa%9e%e3%81%a7%e3%81%a9%e3%81%86%e3%82%84%e3%81%a3%e3%81%a6%e5%ae%9f%e8%a3%85%e3%81%99%e3%82%8b%e3%81%ae%e3%81%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gradle"><![CDATA[Gradle]]></category>
		<category domain="category" nicename="groovy"><![CDATA[Groovy]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="category" nicename="perl"><![CDATA[Perl]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="category" nicename="querydsl"><![CDATA[Querydsl]]></category>
		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_su_rich_snippet_type</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>159</wp:comment_id>
			<wp:comment_author><![CDATA[Naoki]]></wp:comment_author>
			<wp:comment_author_email>naoki1783@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2012-04-11 21:49:44</wp:comment_date>
			<wp:comment_date_gmt>2012-04-11 12:49:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[こんにちは。naokiと申します。学生ですが、なんとなく"DeNA　転職"で探していてこのblogを発見しました。

先週土曜日に御社の面接を受けさせていただき、写真を見てびっくりしたのですが、おそらくグニャラさんに面接していただいたと思いますｗその節はありがとうございました！
日曜日に三次です。ここまで本気で行きたいと感じた企業初めてなので、頑張ります。]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1348034454.1079";s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"tasuku";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1334148584.4132";s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Plack::Middleware::DeflaterとAndroidブラウザとの食い合せがよくない件</title>
		<link>http://blog.wktk.co.jp/archives/244</link>
		<pubDate>Sun, 17 Jun 2012 10:27:14 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=244</guid>
		<description></description>
		<content:encoded><![CDATA[下記の問題は、Plack::Middleware::Deflater 0.08で修正されました。kazeburoさん、ありがとうございます！

<del>Plack::Middleware::Deflaterで、Androidブラウザでだけ表示がされなかったり、コンテンツが途中で切れてしまう不具合に悩んでいる(Android 2.3.3 simulator, 2.3.4実機で確認)。</del>PCブラウザ、iPhoneだとOK。

再現手順は以下のとおりだけど、なんでじゃろ。解析のためにAndroidをビルドするのもなー。
<pre class="syntax perl">#!/usr/bin/env perl
use strict;
use warnings;
use utf8;

use Plack::Builder;
use Plack::Request;

builder {
  enable "Deflater",
    content_type =&gt; ['text/html'],
    vary_user_agent =&gt; 1;
  sub {
    my $env = shift;
    return [200, ['Content-Type' =&gt; 'text/html'],
      ['&lt;html&gt;&lt;head&gt;&lt;title&gt;Android Error&lt;/title&gt;&lt;/head&gt;&lt;body&gt;This text cannot be shown in Android&lt;/body&gt;&lt;/html&gt;']];
  }
};</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>244</wp:post_id>
		<wp:post_date>2012-06-17 19:27:14</wp:post_date>
		<wp:post_date_gmt>2012-06-17 10:27:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>plackmiddlewaredeflater-%e3%81%a8-android</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="perl"><![CDATA[Perl]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_su_rich_snippet_type</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>冬だ！グニャ鍋だ！（俺式ピェンローレシピ）</title>
		<link>http://blog.wktk.co.jp/archives/253</link>
		<pubDate>Sun, 21 Oct 2012 12:51:13 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=253</guid>
		<description></description>
		<content:encoded><![CDATA[急に肌寒くなってきました。読者の皆様はいかがお過ごしでしょうか。

冬といえば鍋の季節。我が家では、「グニャ鍋」の出番ですね。元ネタは、舞台美術家の妹尾河童さんの著書「河童のスケッチブック」で紹介されている「ピェンロー」です。あまりのおいしさ＆手軽さに、こればっかり食べていたのですが、その過程でちょっとアレンジされています。量は全部適量な。
<h3>材料</h3>
<ul>
	<li>豚バラ</li>
	<li>ごま油</li>
	<li>干ししいたけ</li>
	<li>だし昆布（オリジナルでは使わない）</li>
	<li>塩昆布（オリジナルでは使わない）</li>
	<li>七味唐辛子、もしくは一味唐辛子＋山椒（オリジナルでは一味唐辛子）</li>
	<li>マロニー（なるべく太麺タイプ）、もしくは葛きり（オリジナルでは春雨）</li>
</ul>
<h4>オプション</h4>
<ul>
	<li>鶏モモ肉もしくは鶏手羽先</li>
	<li>食べたければ、豆腐（オリジナルでは使わない）</li>
	<li>日本酒（オリジナルでは使わない）</li>
</ul>
今回はフルセットで。

<a class="thickbox" title="材料一覧" href="https://farm9.staticflickr.com/8328/8107981343_fbcea4d1de_b.jpg"><img title="材料一覧" src="https://farm9.staticflickr.com/8328/8107981343_fbcea4d1de.jpg" alt="材料一覧" width="500" height="375" /></a>

この豚バラからおいしいダシが出るのです。

<a class="thickbox" title="豚バラ先生" href="https://farm9.staticflickr.com/8194/8107991188_d321e35881_b.jpg"><img title="豚バラ先生" src="https://farm9.staticflickr.com/8194/8107991188_d321e35881.jpg" alt="豚バラ先生" width="500" height="375" /></a>
<h3>準備</h3>
白菜は、芯と葉っぱの部分を分ける。自分はキッチンばさみで１枚ずつ切り分けているが、ざっくり包丁で二分割するのでも可。芯の部分は千切りに。葉っぱの部分は手で適当に２・３分割する。
<h4>オプション</h4>
<ul>
	<li>モモ肉があれば、自分が食べたい大きさに切り分けておく。</li>
	<li>干ししいたけはお茶碗に入れて、ちょっと水入れてラップして電子レンジでチン。そのまま投入でも可。</li>
	<li>マロニーや葛きりは、100均のパスタゆで容器などを使って、軽く戻しておく。そのまま投入でも可。</li>
</ul>
<h3>手順</h3>
1. 鍋に「干ししいたけともどし汁」を入れ、だし昆布と、白菜の芯の部分を入れる。
2. 日本酒を少量入れ、水をどぼどぼ入れ、火にかける。

<a class="thickbox" title="グツグツ" href="https://farm9.staticflickr.com/8331/8107981677_f70709ec0e_b.jpg"><img title="グツグツ" src="https://farm9.staticflickr.com/8331/8107981677_f70709ec0e.jpg" alt="グツグツ" width="500" height="375" /></a>

3. 沸騰してきたら、豚肉と鶏肉をくっつかないようにバラして入れる。
4. 煮込む。弱火～中火がよい。
5. 白菜の芯の部分が透明になってきたら、白菜の葉っぱの部分を重ね入れ、マロニー的なものを入れる。豆腐を入れる場合はこのタイミングで。

<a class="thickbox" title="見えねー" href="https://farm8.staticflickr.com/7182/6776277360_bdcef59b2f_b.jpg"><img title="見えねー" src="https://farm8.staticflickr.com/7182/6776277360_bdcef59b2f.jpg" alt="見えねー" width="500" height="375" /></a>

6. 葉っぱがクタってきたら、ゴマ油を２周くらいまわしかける。たっぷりと、多すぎかもってくらいに。

<a class="thickbox" title="見えた！" href="https://farm9.staticflickr.com/8328/8107991862_31eafcf618_b.jpg"><img title="見えた！" src="https://farm9.staticflickr.com/8328/8107991862_31eafcf618.jpg" alt="見えた！" width="500" height="375" /></a>

7. 器にゴマと塩昆布、七味唐辛子を入れておく。そこに少し煮汁をかける。その上に、適当な具材を取る。

<a class="thickbox" title="ウマスープ" href="https://farm8.staticflickr.com/7192/6776278056_277e70870e_b.jpg"><img title="ウマスープ" src="https://farm8.staticflickr.com/7192/6776278056_277e70870e.jpg" alt="ウマスープ" width="500" height="375" /></a>

<a class="thickbox" title="マルマル盛り盛り" href="https://farm9.staticflickr.com/8191/8107992134_3bf72d520b_b.jpg"><img title="マルマル盛り盛り" src="https://farm9.staticflickr.com/8191/8107992134_3bf72d520b.jpg" alt="マルマル盛り盛り" width="500" height="375" /></a>

8. おいしくいただく。食べながら塩昆布、七味唐辛子、塩、ゴマなどを適宜追加投入して、スープの味を自分好みに保つ。
9. 残ったダシで、うどん作ったり、雑炊作ったり、次の日の鍋のために濾して取っておく。
<h3>連日食べ続けるための工夫</h3>
この鍋は、残り汁を取っておいて、白菜・豚バラ・マロニーを追加すればずっとおいしくいただけます。
<ul>
	<li>残り汁は粗く濾しておいて、冷蔵しておきましょう。</li>
	<li>豚バラは、大量に買って小分けにして冷凍しておきましょう。かなり持ちます。</li>
	<li>鶏肉は初日のみ入れて、２日目以降は豚バラだけでもOKです。初日から鶏なしでもいけます。</li>
</ul>
<h3>いただいたアドバイス</h3>
<blockquote class="twitter-tweet tw-align-center" lang="ja"><p>何かと思ったらピェンローに「グニャ鍋」とかわけわからん名前勝手に付けんな。鶏肉は豚肉と同量入れるのが基本。干し椎茸の戻し汁が薄いと台無しになるので量をケチらない。まずは妹尾河童のレシピ通りやれ。 / “冬だ！グニャ鍋だ！（俺式ピェン…” <a href="http://t.co/dcbyk8rk" title="http://htn.to/zh45ez">htn.to/zh45ez</a></p>&mdash; はどぼささん (@hardbossa) <a href="https://twitter.com/hardbossa/status/262861250042662912" data-datetime="2012-10-29T10:19:40+00:00">10月 29, 2012</a></blockquote>
<script src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
鶏・豚・干し椎茸のダシがからみあうのがこの鍋のおいしさ。僕も干し椎茸の量は多めで作っています。ぜひぜひオリジナルレシピもお試しください！
<h3>影響を受けたレシピ</h3>
<ul>
	<li><a title="ピェンロー（白菜鍋）レシピ" href="http://anond.hatelabo.jp/20071207170751">ピェンロー（白菜鍋）レシピ</a>
たぶん、これ見て最初につくった。七味禁止、と言っているが、守ってませんサーセン。山椒で麻したくて。</li>
	<li><a href="http://cookpad.com/recipe/714987">ピェンロー鍋（扁炉鍋） by noriran</a>
日本酒はココ起源。</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>253</wp:post_id>
		<wp:post_date>2012-10-21 21:51:13</wp:post_date>
		<wp:post_date_gmt>2012-10-21 12:51:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>253</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%97%a5%e5%b8%b8"><![CDATA[日常]]></category>
		<wp:postmeta>
			<wp:meta_key>_su_rich_snippet_type</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>飽きっぽい30男が4ヶ月でTOEIC 850点を取った3つの方法</title>
		<link>http://blog.wktk.co.jp/archives/257</link>
		<pubDate>Sun, 21 Oct 2012 14:49:48 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=257</guid>
		<description></description>
		<content:encoded><![CDATA[英語学習、すぐ飽きちゃいますよね。はてなブックマークなどで人気の英語学習エントリを見ていると、僕から見ればかなりストイックな勉強方法を実践されている方が多いようです。僕はムリっす。

たとえば、DUO 3.0という定評のある単語帳を買ったんです。「Bobという人が面白い！」という評判でしたが、20ページくらい目を通しただけで挫折しました。最初Bobぜんぜん出てこないし。覚えているのは、「Natto smells awful」だけ。

そんな僕でも、TOEIC 850点を初受験から4か月で取ることができました。

<a class="thickbox" title="TOEICスコアの上がり具合" href="https://farm9.staticflickr.com/8331/8108659887_1e4399b5a3_b.jpg"><img title="TOEICスコアの上がり具合" src="https://farm9.staticflickr.com/8331/8108659887_1e4399b5a3.jpg" alt="TOEICスコアの上がり具合" width="500" height="375" /></a>

やったことは以下の3つ。
<ul>
	<li>発音を練習する</li>
	<li>Nintendo DSで遊ぶ</li>
	<li>TOEICの試験特性を知る</li>
</ul>
それぞれについて解説します。
<h3>発音を練習する</h3>
そもそも、今まで英語の発音など一切気にしたことがありませんでした。

[l][r]や[s][θ]・[z][ð]の違いはもちろん、日本語の「あ」に近い母音である[æ][ʌ][ɑː][ə]などの違いも全て無視していました。

発音練習本マニアになりそうなほど、英語の発音に関する本を買ってみました。以下がそのリストですが、どう見ても買いすぎです。本当にありがとうございました。一応、全て書籍部分は通読しましたが、全てマジメにトレーニングしたわけではありません。

<a href="http://www.amazon.co.jp/exec/obidos/ASIN/0764173693/wktk09-22/ref=nosim">
American Accent Training</a> / <a href="http://www.amazon.co.jp/exec/obidos/ASIN/4757407297/wktk09-22/ref=nosim">日本人は英語のここが聞き取れない</a> / <a href="http://www.amazon.co.jp/exec/obidos/ASIN/4757408226/wktk09-22/ref=nosim">続 日本人は英語のここが聞き取れない</a> / <a href="http://www.amazon.co.jp/exec/obidos/ASIN/481253206X/wktk09-22/ref=nosim">英語の発音 ザジングルズ レベル85基礎筋肉編</a> / <a href="http://www.amazon.co.jp/exec/obidos/ASIN/481253223X/wktk09-22/ref=nosim">英語の発音ザジングルズ レベル86発音筋肉強化編</a> / <a href="http://www.amazon.co.jp/exec/obidos/ASIN/4812532248/wktk09-22/ref=nosim">英語の発音ザ・ジングルズ レベル87発音筋肉国際編</a> / <a href="http://www.amazon.co.jp/exec/obidos/ASIN/4327440841/wktk09-22/ref=nosim">英語舌のつくり方 ――じつはネイティブはこう発音していた! </a> / <a href="http://www.amazon.co.jp/exec/obidos/ASIN/4757404441/wktk09-22/ref=nosim">英語の発音パーフェクト学習事典</a> / <a href="http://www.amazon.co.jp/exec/obidos/ASIN/4062574861/wktk09-22/ref=nosim">XP対応 英語スピーキング科学的上達法 CD-ROM付</a> / <a href="http://www.amazon.co.jp/exec/obidos/ASIN/4469245305/wktk09-22/ref=nosim">英語音声学入門</a> / <a href="http://www.amazon.co.jp/exec/obidos/ASIN/4384054629/wktk09-22/ref=nosim">英語喉 50のメソッド</a> / <a href="http://www.amazon.co.jp/exec/obidos/ASIN/4872591704/wktk09-22/ref=nosim">脱・日本語なまり―英語(+α)実践音声学</a> / <a href="http://www.amazon.co.jp/exec/obidos/ASIN/4816344640/wktk09-22/ref=nosim">DVD&amp;CDでマスター 英語の発音が正しくなる本 DVD&amp;CDでマスター 英語の発音が正しくなる本</a> / <a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756908446/wktk09-22/ref=nosim">フォニックス“発音”トレーニングBook (アスカカルチャー)</a> / <a href="http://www.amazon.co.jp/exec/obidos/ASIN/4806134732/wktk09-22/ref=nosim">CD付 世界一わかりやすい 英語の発音の授業</a>

これらの本を読んで僕なりに思ったこと。英語のリスニング問題などは、音声を聴きとって発音記号の列を復元し、さらにそれを単語列に復元する不良設定問題なんだと。一意に復元できないので、単語列から発音記号、発音記号から音声という展開に関する知識も利用する必要があります。発音記号と音声、単語列と発音記号という2つのマッピングについて、順方向・逆方向ともに変換できるようにしておかないと、高得点は望めない、と判断しました。というわけで、それぞれのマッピングについて、きちんと学習しました。

一冊だけ発音に関する本を買うのであれば、<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4327440841/wktk09-22/ref=nosim">英語舌のつくり方 ――じつはネイティブはこう発音していた! (CD book)</a> をオススメします。
<div style="text-align: left; padding-bottom: 20px; font-size: small; /zoom: 1; overflow: hidden;">
<div style="clear: both;">
<div style="float: left; margin: 0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4327440841/wktk09-22/ref=nosim" rel="nofollow" target="_blank"><img style="border: none;" src="https://ecx.images-amazon.com/images/I/5118JBQRXML._SL160_.jpg" alt="" /></a></div>
<div style="height: 160; margin-bottom: 10px;">
<div style="margin-bottom: 10px; line-height: 120%;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4327440841/wktk09-22/ref=nosim" rel="nofollow" target="_blank">英語舌のつくり方 ――じつはネイティブはこう発音していた! (CD book)</a></div>
<div>野中 泉</div>
<div style="float: left;"></div>
</div>
</div>
</div>
オススメの理由は、<strong>本が薄いから</strong>です。参考書は薄ければ薄いほどよいです。読みきったという自信にもつながりますし。内容はきわめてオーソドックスです。

いくらいい本を買ったところで、読破し、練習することがなければ、発音は上達することができません。<a href="http://www.humming.co.jp/">ハミング発音スクール</a>、という代々木にある学校にも通いました。かなり苦戦しましたし、はっきりいって発音は下手です。しかし、発音を区別する、という概念を学ぶことは、試験の点数上昇に効果があったと考えています。
<h2>Nintendo DSで遊ぶ</h2>
Nintendo DSで遊びました。何いってんだテメー、という話ですね。Nintendo DS向けに出している学習ソフトを使った、というわけです。
<div style="text-align: left; padding-bottom: 20px; font-size: small; /zoom: 1; overflow: hidden;">
<div style="clear: both;">
<div style="float: left; margin: 0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B002QUYQUM/wktk09-22/ref=nosim" rel="nofollow" target="_blank"><img style="border: none;" src="https://ecx.images-amazon.com/images/I/51jhYyIkzkL._SL160_.jpg" alt="" /></a></div>
<div style="height: 145; margin-bottom: 10px;">
<div style="margin-bottom: 10px; line-height: 120%;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B002QUYQUM/wktk09-22/ref=nosim" rel="nofollow" target="_blank">TOEIC(R) TESTスーパーコーチ@DS</a></div>
<div>桐原書店</div>
<div style="float: left;"></div>
</div>
</div>
</div>
iPhoneやAndroidアプリでも 同様のものが出ているので、そういったものでもよいのかもしれません。僕は <a href="http://www.amazon.co.jp/exec/obidos/ASIN/B002QUYQUM/wktk09-22/ref=nosim">TOEIC(R) TESTスーパーコーチ@DS</a> を持ち歩き、ドラゴンの成長を楽しみながら学習を行いました。
<h2>TOEICの試験特性を知る、特に時間配分について厳格に守る</h2>
TOEICはペーパーテストです。選んだ選択肢を紙にマークし、それだけによって採点がなされます。よって、高得点を目指すためには、ペーパーテストとしてのTOEIC対策が必要となります。

通常の選択式試験であれば、割り箸を鼻に突っ込んで鼻血を出してしまう、おちゃめな<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4053013461/wktk09-22/ref=nosim">有坂先生の「例の方法」</a>が汎用性高い手法です。しかし、TOEICは例の方法的手法が比較的通じづらい設問構成になっています。

そんなTOEIC特化対策として、僕は <a href="http://www.amazon.co.jp/exec/obidos/ASIN/4569772765/wktk09-22/ref=nosim"> はじめての新TOEICテスト 完全攻略バイブル</a> を購入しました。試験の申し込み方法や、時間配分、各セクションの出題傾向などが書いてあり、試験を俯瞰して見るのにオススメです。練習問題はやったりやらなかったりしました。
<div style="text-align: left; padding-bottom: 20px; font-size: small; /zoom: 1; overflow: hidden;">
<div style="clear: both;">
<div style="float: left; margin: 0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4569772765/wktk09-22/ref=nosim" rel="nofollow" target="_blank"><img style="border: none;" src="https://ecx.images-amazon.com/images/I/41fjngsrD3L._SL160_.jpg" alt="" /></a></div>
<div style="height: 160; margin-bottom: 10px;">
<div style="margin-bottom: 10px; line-height: 120%;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4569772765/wktk09-22/ref=nosim" rel="nofollow" target="_blank">はじめての新TOEICテスト 完全攻略バイブル</a></div>
<div>長本 吉斉</div>
<div style="float: left;"></div>
</div>
</div>
</div>
特に、時間配分に関しては気にしすぎて損になることはありません。必ず全問解けるようにペースを考えましょう。難しい問題は後で考えられるようにマークして、ずんずん進みましょう。

「７割でええわな」（by 中川家礼二）
<h3>まとめ</h3>
上記の3つをやるだけで、TOEICの点数を850点まで上げることができました。参考になれば幸いです。

実はこのエントリ、2年前に書いたボツエントリです。アフィリエイトを張るのが面倒で、2年放置してしまいました。2年経っても、やっていることは間違ってなかったな、と考えています。新しい英語発音教本も出ているようなので、それも購入して、内容がよければレビューしたいと考えます。

TOEICの勉強をしたあと、O'Reilly MySQL Conference &amp; Expo 2011というカンファレンスで発表する機会を得ました。発音の練習しといてよかったなー、としみじみ思いました。というわけで、ITエンジニアのみなさまもレッツ発音練習でございます。

<a class="thickbox" title="MySQL Conf. 2011での発表" href="https://farm6.staticflickr.com/5223/5639064663_e681693cb0_b.jpg"><img title="MySQL Conf. 2011での発表" src="https://farm6.staticflickr.com/5223/5639064663_e681693cb0.jpg" alt="MySQL Conf. 2011での発表" width="500" height="375" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>257</wp:post_id>
		<wp:post_date>2012-10-21 23:49:48</wp:post_date>
		<wp:post_date_gmt>2012-10-21 14:49:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e9%a3%bd%e3%81%8d%e3%81%a3%e3%81%bd%e3%81%8430%e7%94%b7%e3%81%8c4%e3%83%b6%e6%9c%88%e3%81%a7toeic-850%e7%82%b9%e3%82%92%e5%8f%96%e3%81%a3%e3%81%9f3%e3%81%a4%e3%81%ae%e6%96%b9%e6%b3%95</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e8%8b%b1%e8%aa%9e%e5%ad%a6%e7%bf%92"><![CDATA[英語学習]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_su_rich_snippet_type</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>216</wp:comment_id>
			<wp:comment_author><![CDATA[飽きっぽい30男が4ヶ月でTOEIC 850点を取った3つの方法 | グニャラくんのwktk運営日記 | 目指せ860点！Toeic勉強法]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://toeic.matomeblog.info/archives/477</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2012-10-23 05:16:35</wp:comment_date>
			<wp:comment_date_gmt>2012-10-22 20:16:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...]  [...]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1350936995.2631";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>どんな家でもピッタリサイズ！快適パソコンデスクの入手法</title>
		<link>http://blog.wktk.co.jp/archives/266</link>
		<pubDate>Tue, 23 Oct 2012 12:02:26 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=266</guid>
		<description></description>
		<content:encoded><![CDATA[IKEAの商品を使って、快適なパソコンデスク環境を整えている記事がいくつかあります。
<ul>
	<li><a href="http://blog.masuidrive.jp/index.php/2011/08/01/workspace-in-the-living-room/">リビングにIKEAで作る2畳の快適仕事環境</a></li>
	<li><a href="http://d.hatena.ne.jp/yumu19/20120901/1346500114">IKEAでつくる快適デスク環境</a></li>
</ul>
参考になる、とてもステキなエントリです。

しかし、部屋のサイズにちょうど合うアイテムがIKEAにない場合には、どうしたらいいのでしょうか。ミートボールや牛ローストやサーモンマリネを食べながら、ビールや赤ワインを飲んで途方に暮れるしかないのでしょうか。

答えは簡単。<strong>木工です。</strong>部屋のサイズを測り、自分で設計し、自分で作ればいいんです。D・I・Y!! D・I・Y!!。「ほしいものが、ほしいわ。」の精神ですよ。

というわけで、こんなパソコンデスクを作ってみました。

<a class="thickbox" title="完成形" href="https://farm9.staticflickr.com/8472/8109238544_96e875843e.jpg"><img title="完成形" src="https://farm9.staticflickr.com/8472/8109238544_96e875843e.jpg" alt="完成形" width="500" height="375" /></a>

Arduinoを使った電子工作などが流行っていますが、次は、木工が流行しますよ、絶対。木工男子。来ます。来てます。木工男子にクラクラ。カッコイイとは、こういうことさ。木工は、奇妙で、おもしろい。そして、せつない。木工、大好き。机だって、作ってほしい。おいしい、木工。くう、ねる、木工。ですよ!!!!!!!!!!

我が家には、自作スピーカー「スーパーフラミンゴ」というのもいるのですが、コイツもなかなかいい音出すんです。これも木工。もう木工するしかないです。

<a class="thickbox" title="自作スピーカーと猫とパソコンデスク" href="https://farm9.staticflickr.com/8470/8109239146_172416122e_b.jpg"><img title="自作スピーカーと猫とパソコンデスク" src="https://farm9.staticflickr.com/8470/8109239146_172416122e.jpg" alt="自作スピーカーと猫とパソコンデスク" width="500" height="375" /></a>

というわけで、IKEAよりも、ドイトやカインズホームが似合う男になろう！というエントリです。
<h3>設計</h3>
2012年現在、パソコンデスクに奥行きは必要ないと考えます。特に、モニターアームを使った場合は顕著です。キーボードが置けるほどの奥行きと、耐荷重性さえあれば問題ありません。奥行き350mmの机にしようと考えました。

木工とは言っても、ノコギリはまったく使いません。粉いっぱい出るし、キレイに切るの難しいし、木取り図書くのも面倒です。今回は、<a href="http://www.mokuzaikako.com/">木材加工.comというサービス</a>を用いました。

木材加工.comは、集成材・木材のカット、加工、塗装が自動見積り・注文できるオーダーメイド木材通販・販売専門店です。ホームセンターのD.I.Y.にやたら詳しいおじさんに臆することなく、家でごろごろしながら注文ができます。しかも、穴あけ加工などの加工後のイメージを、3D画像で確認できます。木取り図も描く必要がなくて、ラクです。

今回は、下図のような天板1枚と、側板2枚をオーダーし、単純なコの字型の机を作ろうと考えました。

<a class="thickbox" title="天板" href="&quot;https://farm9.staticflickr.com/8192/8109235542_aaa6abcc00_b.jpg"><img title="天板" src="https://farm9.staticflickr.com/8192/8109235542_aaa6abcc00.jpg" alt="天板" width="500" height="213" /></a>

天板に重いものを乗せるので、天板の下に側板を載せる感じで。天板も横板も、厚さ30mmのゴム集成板とすることにしました。

さて、木材にもいろいろな種類があります。特徴はいろいろありますが、密度はちゃんとチェックしておきましょう。密度が高い木を選ぶと、クソ重いです。よくあるMDFの家具などとは比較にならないくらい重くなります。事前に全体の重さをざっくり計算しておくとよいです。

インターネットで注文後1週間ほどで、注文どおりの木材が家にやってきました。穴のアールがキレイで、割れなども起こっていません。さすがプロ。

<a title="天板" href="https://farm9.staticflickr.com/8329/8107849106_115b83be65_b.jpg"><img title="天板" src="https://farm9.staticflickr.com/8329/8107849106_115b83be65.jpg" alt="天板" width="500" height="375" /></a>

接合部について。アリ組みや留形隠しアリ組みなどができればカッコよかったのですが、今回は金具接合＋横ゆれ防止のボルト留めにしました。ボルト頭を埋めるための座繰りについて、最初やり忘れてしまったので、ダボを埋めてから座繰りなおしました。

<a class="thickbox" title="接合部" href="https://farm9.staticflickr.com/8051/8107845535_bfa63fed9f_b.jpg"><img title="接合部" src="https://farm9.staticflickr.com/8051/8107845535_bfa63fed9f.jpg" alt="接合部" width="500" height="375" /></a>

<a class="thickbox" title="接合部" href="https://farm9.staticflickr.com/8465/8107974575_8af4dc63e2_b.jpg"><img title="接合部" src="https://farm9.staticflickr.com/8465/8107974575_8af4dc63e2.jpg" alt="接合部" width="500" height="375" /></a>

机の高さも悩みどころです。<a href="http://www.biwa.ne.jp/~chiro/kannkyou/tukue.htm">「カイロで健康」というサイト内に、自分の身長から、適切な椅子と机の高さの目安を計算するフォームがあります。</a>このフォームの結果を参考にして、今回は、机の高さを73cmとすることにしました。

キーボードとマウスは、スライドレールで収納できるようにしました。それ用の板は厚みを20mmにして、少し軽量化を図りました。

<a class="thickbox" title="キーボード用レール" href="https://farm9.staticflickr.com/8043/8107846421_4fdbf9309e_b.jpg"><img title="キーボード用レール" src="https://farm9.staticflickr.com/8043/8107846421_4fdbf9309e.jpg" alt="キーボード用レール" width="375" height="500" /></a>

<a class="thickbox" title="取り付けられたレール" href="https://farm9.staticflickr.com/8050/8107986092_703b1e1d28_b.jpg"><img title="取り付けられたレール" src="https://farm9.staticflickr.com/8050/8107986092_703b1e1d28.jpg" alt="取り付けられたレール" width="500" height="375" /></a>

&nbsp;
<h3>工具など</h3>
渋谷・新宿エリアだと、東急ハンズでだいたいの工具・部品は揃います。ちょっと足を伸ばして、中野の島忠ホームズに行くことをオススメします。今回は、楽天市場を駆使しました。TRUSCOのネジなどは、Amazonでも売ってあります。

木工工具は、インパクトドライバーがあれば事足ります。僕はマキタのインパクトドライバー兼震動ドリルという素敵なものを使っています。
<div style="text-align: left; padding-bottom: 20px; font-size: small; /zoom: 1; overflow: hidden;">
<div style="clear: both;">
<div style="float: left; margin: 0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B009T3379K/wktk09-22/ref=nosim" rel="nofollow" target="_blank"><img style="border: none;" src="https://ecx.images-amazon.com/images/I/31%2BAWk1HeWL._SL160_.jpg" alt="" /></a></div>
<div style="height: 160; margin-bottom: 10px;">
<div style="margin-bottom: 10px; line-height: 120%;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B009T3379K/wktk09-22/ref=nosim" rel="nofollow" target="_blank">【コンパクト＆ライトボディ + 電子クラッチ 4モード＋テクス用ネジ専用モード】　充電式4モードインパクトドライバ　TP131DRFX　色：青　【14.4Vモデル】</a></div>
<div style="float: left;"></div>
</div>
</div>
</div>
インパクトドライバーのチャックと反対側にある面に、水準器を取り付けています。水準器を見ながら穴あけなどをすると、かなりの精度で垂直が出せます。

<a class="thickbox" title="水準器付きインパクトドライバー" href="https://farm9.staticflickr.com/8054/8107842579_473b5e2598_b.jpg"><img title="水準器付きインパクトドライバー" src="https://farm9.staticflickr.com/8054/8107842579_473b5e2598.jpg" alt="水準器付きインパクトドライバー" width="500" height="375" /></a>

つけている水準器はコレです。2個セットなので、裏側に取り付けるときの水平出しにも便利です。
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/B009T3379K/wktk09-22/ref=nosim" rel="nofollow" target="_blank"><img src="https://ec2.images-amazon.com/images/I/41EkD125oiL._SL160_.jpg" alt="シンワ" width="100" height="100" border="0" />
シンワ 丸型気泡管ＢФ 16mm</a>

木材同士、もしくは木材と金具の接合について。通常は、すべて木ネジでOKです。今回は、ムラコシ精工の「鬼目ナット」を全面的に採用しました。「鬼目ナット」とは、木にメスネジを作る金具です。木ネジを何度も取り外したりしていると、強度の低下が心配です。引越しの際の分解や、製作時の試行錯誤ができる状況を確保するため、ボルトの取り付け、取り外しが何度もできる鬼目ナットを採用しました。

<a class="thickbox" title="鬼目ナットとボルト" href="https://farm9.staticflickr.com/8047/8107839444_75320031a9_b.jpg"><img title="鬼目ナットとボルト" src="https://farm9.staticflickr.com/8047/8107839444_75320031a9.jpg" alt="鬼目ナットとボルト" width="500" height="375" /></a>

鬼目ナットは、小分けでホームセンターに売ってあったりしますが、結構高いです。ムラコシ精工のサイトで通販しましょう。ムラコシ精工のサイト、初回登録時は500円のクーポンをくれます。送料は525円です。つまりは、初回はほぼ送料無料、ということです。

鬼目ナットのどの径を使うかについて。ムラコシ精工で扱っているボルトはM6のものが多いので、それに合わせてM6のものを使うのがオススメ。なんですが、使うL型特厚金折やキーボード用レールの関係上、今回はM4の鬼目ナットを多用しました。十分な下穴径を確保しないままだと、M4の鬼目ナットは強いトルクをかけると壊れてしまいました。ムラコシ精工のサイトの最低下穴径と同じサイズのドリルで穴を掘り、そのあとドリルを揺らして軽くテーパーをつけておくと、壊れることなく木に埋まりました。
<h3>塗装</h3>
室内塗りなので水性塗料を使いました。油性塗料はクセーので。耐水性などを考え、ウレタン系塗料を採用しました。

<a href="http://www.monomono.jp/kigatame_a/index.html">木固めエース</a>という塗料を使いたかったのですが、入手性が悪いです。今回は<a href="&quot;http://www.capitalpaint.jp/f_aqua.html">フレッシュアクアF</a>を使いました。

<a class="thickbox" title="しっとり塗装中" href="https://farm9.staticflickr.com/8476/8107856552_3121f779a1_b.jpg"><img title="しっとり塗装中" src="https://farm9.staticflickr.com/8476/8107856552_3121f779a1.jpg" alt="しっとり塗装中" width="500" height="375" /></a>

サンディングを塗り、320番の紙ヤスリで削ります。何回か繰り返しました。最後に、全つや消しを塗って完成です。…と文章で書くと楽そうですが、これが結構大変。キレイに塗るのはかなり難しいです。コツとしては、何度塗ってもいいや、と思うことと、1回で塗り過ぎないことです。

なお、木材加工.comでは塗装もやってくれます。正直、お願いしとけばよかったです…
<h3>天板にコンセント</h3>
天板にコンセント、欲しいですよね。パナソニックから、マルチメディアコンセントというかっちょいいコンセントが発売されています。TV/CS/電話/LAN(Cat.5e)/コンセントが一緒になったすぐれもの。これ取り付けたい！

[rakuten]n-denservice:10004917[/rakuten]

コンセントは通常壁面に埋め込まれています。壁の中にはスイッチボックスというものがあり、柱などに取り付けられています。スイッチボックスにあるメスねじ穴に、コンセントプレートなどを取りつけることによって、コンセントは壁に固定されているわけです。んでも、今回柱とかないし。

こんな場合には、未来工業製「パネルボックス」が使えます。板にはさんで使うスイッチボックスです。しかも、板厚が2-25mmまでのものと、2-40mmまでの深型と二種類あります。今回天板の板厚が30mmだったので、深型のパネルボックスを取り付けます。マルチメディアコンセントが付けられるように、3ヶ用パネルボックスSBP-3WYを選びました。

[rakuten]kys:10173199[/rakuten]

…さて、ここで問題発生。設計やパーツ選び自体は問題がなかったのですが、法律的に問題があったのです。

<a href="http://law.e-gov.go.jp/htmldata/S35/S35HO139.html">電気工事士第三条</a>には、電気工事は電気工事士の資格を持っていないと出来ないとあります。何が電気工事であるかは、<a href="http://www.meti.go.jp/policy/tsutatsutou/tuuti1/aa566.pdf">電気設備の技術基準の解釈(PDF)</a>に書いてあります。今回のように「机にコンセントを増設する」ためには、第二種電気工事士の資格が必要です。

んじゃ、いっちょ受けたろうかい、と思って<a href="http://www.shiken.or.jp/">一般財団法人 電気技術者試験センター</a>のサイトを見ました。なんと、試験は年2回あれど、試験申し込みは年1回、春だけなのです。オーマイガー。

というわけで、天板にはパネルボックスを取り付けたままの貧相な状態になっています。資格取得後に配線して、コンセント付けるぞ！
<h3>費用</h3>
かかった費用は、以下のとおりです。

木材 16,032円
<ul>
	<li>[木材加工.com] 天板 8,463円 (穴あけ加工 4つ)</li>
	<li>[木材加工.com] 側板 3,970円</li>
	<li>[木材加工.com] キーボード板 1,604円</li>
</ul>
キーボードレール 2,760円
<ul>
	<li>[アイワ金属] スライドレール ベアリングタイプ 250mm AP-1140C x 2 = 1,730円</li>
	<li>[アイワ金属] スライドレール用キーボードブラケット AP-1201C = 1,030円</li>
</ul>
金具・ボルト・ナット類 4,626円
<ul>
	<li>[ムラコシ精工] 鬼目ナットE-M6×L20 x 4 = 360円</li>
	<li>[ムラコシ精工] ボルトJCB-A-M6xL60 x 4 = 204円</li>
	<li>[ムラコシ精工] 鬼目ナットE-M4×L10 x 42 = 504円</li>
	<li>[TRUSCO] 六角穴付皿ボルト三価白 B773-0415 x 2 = 1,238円</li>
	<li>[メーカー不明] 特厚L字金折 580 x 4 = 2,320円</li>
</ul>
塗料 8,190円
<ul>
	<li>[キャピタルペイント] フレッシュアクアＦ 全艶消しクリアー 0.87kg 3,885円</li>
	<li>[キャピタルペイント] フレッシュアクアＦ サンジング 0.87kg 3,675円</li>
	<li>[メーカー不明] コテバケ 630円</li>
</ul>
コンセント 2,178円
<ul>
	<li>[未来工業] 深形パネルボックス3ヶ用 SBP-3WY x 2 = 2,178円</li>
</ul>
サンドペーパーなど 1,000円くらい

<strong>計 34,786円</strong>

コストパフォーマンスについては、正直よいとも悪いともいえないと思います。
<h3>まとめ</h3>
奥行きも狭く、強度も十分で、見た目も悪くない机ができて超満足しています。うちの猫も乗れるし。

<a title="猫も満足" href="https://farm9.staticflickr.com/8192/8109237304_12ef3c76a6_b.jpg"><img title="猫も満足" src="https://farm9.staticflickr.com/8192/8109237304_12ef3c76a6.jpg" alt="猫も満足" width="500" height="375" /></a>

コンセントについては、法律が相手なので仕方ないです。来年リベンジですな！

木工のノウハウがたまったので、次はお手製キャットタワー＆キャットウォークにチャレンジしたいところです。

みなさんも木工、やってみませんか？楽しいし、自分好みの家具が作れますよ。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>266</wp:post_id>
		<wp:post_date>2012-10-23 21:02:26</wp:post_date>
		<wp:post_date_gmt>2012-10-23 12:02:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%81%a9%e3%82%93%e3%81%aa%e5%ae%b6%e3%81%a7%e3%82%82%e3%83%94%e3%83%83%e3%82%bf%e3%83%aa%e3%82%b5%e3%82%a4%e3%82%ba%ef%bc%81%e3%81%ae%e5%bf%ab%e9%81%a9%e3%83%91%e3%82%bd%e3%82%b3%e3%83%b3%e3%83%87</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%97%a5%e5%b8%b8"><![CDATA[日常]]></category>
		<wp:postmeta>
			<wp:meta_key>_su_rich_snippet_type</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>217</wp:comment_id>
			<wp:comment_author><![CDATA[e]]></wp:comment_author>
			<wp:comment_author_email>test@localhost.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2012-10-24 09:31:26</wp:comment_date>
			<wp:comment_date_gmt>2012-10-24 00:31:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[そんな事よりkikiさんかわいいです。抱きしめたい。
コストパフォーマンスはこの単品を取った限りだと、極悪でしょう。
「どうしてもこの天板が！」というニーズ等が無いのであれば、ここまでコストと時間をかけるのはオーバーエンジニアリングです(断言)。
餅は餅屋ですね(言いたかっただけ)。
しかし、DIYスキルは幅広く応用が効きますから、大きな宝物ですよね(上から目線)。
ある程度のものは多くの人が備えていますが、世の中にはカラーボックスが組み立てられない、という方もいると聞きます。
最近の子供(おっさん目線)はミニ四駆で鍛えられていないから組み立て図を見ても家具が組み立てられない、という話も聞きます。これについては「家庭科でやっているはずだからそんな事は無いだろう。ただの興味本位で弄くったフィクションじゃないの？」と私は思っていますが(提示された情報に対しての自分の知識に基づく相反する予想)。
何はともあれ、家屋の修繕や改善が自分で出来るのは素晴らしいですね。水道のコマ、目張り、結露対策、防音断熱、その他色々…。出来るのと出来ないのとでは大きな差です。

で、この机ですが、横からの荷重に弱そうですね…。ネジ接合部を多少補強していても、手をついて体重がかかったりするとグシャっといってしまいそうな怖さがあります。後ろ側に補強用の板があると応力がネジ接合部から分散されていい感じだと思うのですが。
金具もこんなの
http://www.amazon.co.jp/アイリスオーヤマ-L字金具-GSD-60K/dp/B002JT48OE/
だったらより良かったかもしれませんね。]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1351074231.168";s:7:"message";s:45:"tasuku changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"tasuku";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1351038686.9396";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>218</wp:comment_id>
			<wp:comment_author><![CDATA[tasuku]]></wp:comment_author>
			<wp:comment_author_email>blog@wktk.co.jp</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2012-10-24 19:38:45</wp:comment_date>
			<wp:comment_date_gmt>2012-10-24 10:38:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[横からの荷重弱いです。縦ボルトのおかげで横揺れはほぼないですが、揺らすと縦ボルト4つにかなりの負荷がかかっているようです。

L字金折じゃなくて、棚受にしとくとよかった、というのはありますね。久宝の棚受とかいいな、と思っていたのですが、斜めつっかえ棒のせいでクリアランスがなくなるのがいやで今の形に。
http://q-ho.com/products/bracket/interior.php

補強するとしたら、裏側面に平型のL字金具を付けるとかが第一候補かなー。もしくは、幕板を中央部に付けるとか（後部だとモニターアームのクランプがつかなくなるので）。

無印のコの字机みたいに、板内に金具を埋め込む、というのも事前に検討しとけばよかったかなー、と。
http://ameblo.jp/cloverleaf55/entry-10633118222.html

といろいろ検討できるのが自作の楽しみでよいすなー。
これくらいお金かけるんだったら、完全オーダーメイド家具でもよいかもしれないですね。]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1351075125.76";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"tasuku";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>危なくないgitこと、うちのチームのgit戦略草案(ver. 2)</title>
		<link>http://blog.wktk.co.jp/archives/278</link>
		<pubDate>Thu, 15 Nov 2012 06:37:18 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=278</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>履歴</h2>
恥を忍んで記事を公開させていただいたおかげで、いろいろフィードバックいただきました。フィードバックを取り込んで更新を行なっています。

<dl><dt>2012/11/16:</dt><dd>cherry-pickしやすいように、というくだりのところは論理通ってないので削除しました。
1 pull req. 1 commitの原則をやめました。言いたいことであった「試行錯誤の過程を入れないで」を丸パクリしました！ &gt; id:kazuho
その他表記修正、クリアコードさんの記事に説明丸投げなど。</dd></dl>

<h2>まえがき</h2>
gitでトラブった！という話を何度か聞いたことがあります。なんでトラブッてるんだろう…と話を聞いたところ、同一のリモートブランチに対して複数人・複数環境から操作が行われているようです。極端な例を挙げると、masterブランチしか存在しておらず、コミットログをキレイにするためと称してgit pull --rebaseを常用しているような環境です。

gitは、以下のような操作をしなければ安全です。
<ul>
	<li>mergeに相当する操作をしない</li>
	<li>rebaseに相当する操作をしない</li>
</ul>
…悪い冗談。極端な話ですね。しかし、「merge/rebaseの回数を減らせば、トラブルが起こる確率を減らすことができる」というのは事実です。

そこで、GitHub(Enterprise)の利用を前提に、こういった運用ルールだといいんじゃね、という私案を公開します。ツッコミよろしくです！

なお、git-flowの用語を前提としていますが、developブランチとfeatureブランチしか説明に用いません。
<h2>想定する前提条件</h2>
比較的大規模なチーム開発において、大量に画像を使うようなWebサイトを制作する。本番デプロイは週3回程度。GitHubもしくはGitHub Enterpriseを開発に用いている。
チームメンバーには、非英語圏のオフショア開発拠点が含まれ、スキル・経験ともさまざまである。
<h2>ねらい</h2>
mergeとrebaseを減らしつつ、それらを行う際には意識的に行うようにする。結果、merge/rebaseミスによる意図しない破壊を防ぎ、コードレビューのタイミングを設け、コミットログもそこそこキレイになる。
<h2>mergeを減らす</h2>
developブランチでのmergeを減らすためには、developブランチに変更を行える人を制限し、一般の作業者が変更できないようにします。

git-flowを用いて、特定の環境でだけfeatureブランチを編集し、developへのマージはある特定の人だけが行う、といった運用は、上記の観点からトラブル防止に有効です。

developブランチへのfeatureブランチの取り込みは、すべてpull requestを用いて行います。developブランチに対する直接作業は禁止します。

pull requestのやり方は後述します。

pull requestに取り込みにおいて、相互レビューをするとよいです。自分がpull requestを受ける立場になれば、レビュワーにやさしいpull requestというものの重要性が実感として分かります。
<h2>同一ブランチに対する共同作業をどうするか</h2>
featureブランチについて、複数人で作業したい場合がある。たとえば、<a href="http://labs.gree.jp/blog/2011/05/3528/">sotarok先生のgit-dailyは、そのような状況を想定したワークフロー・ツールである</a>。

feature/sugoiというfeatureブランチを開発するにあたって、サーバサイドロジック側エンジニアが2人、HTML/CSSコーダーが2人、JavaScript側エンジニアが2人、画像製作者が2人参加すると想定する。

画像製作者が制作する画像については、git管理外とする。詳しくは後述する。

それ以外の作業者については、feature/sugoiブランチ以下に個人ごとのサブブランチを立てる(ex. feature/sugoi/suenaga)。サブブランチはfeatureブランチを基に作成される。

あとは、個々人が自分の管理下のブランチを育てる。個人ごとのサブブランチは、リモートにpushはしない。リモートにpushする場合には、featureブランチにmergeを行い、featureブランチをpushする。ここでもpull requestを用いてもよいが、レビューが必要な場合などにとどめる。後述するように、どうせfeatureブランチの内容をdevelopブランチに入れる際にコミットログを加工するから、ここでコミットログを綺麗にしようとは意識しない。

featureブランチのサブブランチは個々人の管理なので、rebaseしようが何しようが問題なし。<a href="http://tomykaira.hatenablog.com/entry/2012/10/21/022627">継続的コミット</a>を採用し、1分ごとに自動コミットしてもらってもOK。本体のコミットログが英語onlyであっても、日本語のコミットログを残してもOK。自分がやりやすいように作業する。
<h2>画像ファイルなど、巨大なバイナリファイルの管理はどうするか。</h2>
gitには向いていません。Subversionや、Alienbrainなどの専用ソフトを使いましょう。

まず、バイナリファイルはmergeができません。よって、画像のバージョン管理の要件としては、任意のバージョンの画像が取得できれば十分となります。

次に、不自然だからです。例えば、Photoshopで作成したjpeg画像がプロジェクトに必要だったとします。Photoshopのpsdファイルはプログラムで言うソースコードにあたり、そこから生成されたjpeg画像はプログラムで言う実行バイナリにあたります。jpeg画像をgitリポジトリに入れることは、実行バイナリをgitリポジトリ管理していることに例えられます。確かに、デプロイの都合や、サードパーティー製ライブラリでソースコードがない場合など、実行バイナリのみをgit管理下にすることはありえます。しかし、一般的に実行バイナリをgit管理下に置くのは不自然だと考えます。

最後に、画像作成者の学習コストが減ります。例えばSubversionを用いた場合、TortoiseSVNなどの枯れたツールが採用できます。gitの概念を教育する必要もありません。Subversionを用いる場合には、ブランチなどは作らず、一本道のコミットを想定します。ブランチ的なことをやりたい場合には、パス・ファイル名を分けて作業します。例えば、特定の期間だけ、ある画像に「NEW」というレイヤーが入った画像を使いたいとします。そのような場合には、image.pngとimage_new.pngのように2ファイルで管理します。これで、参照元のgitのどのブランチからも、svn HEADを見ればよい状態を担保します。

画像作成者にgitを教えて使いこなせるようになったとしましょう。以下のようなメリット・デメリットが考えられます。

メリット
<ul>
	<li>全てのリソースを単一のgitリポジトリとして管理可能</li>
</ul>
デメリット
<ul>
	<li>.gitディレクトリが膨らむ</li>
	<li>教育コストが甚大</li>
</ul>
僕はデメリットのほうが大きいと判断しています。

git-svnを用いてsubmoduleとしてSubversionを使う、というアイデアはありますが、調査できていません。
<h2>pull requestのやり方をどうするか</h2>
githubには、pull requestという機能があります。github上にpushされた変更点を、特定のリポジトリの特定のブランチに取り込むように依頼する機能です。

pull requestは、基となるリポジトリの位置によって２種類に分類されます。
<ol>
	<li> github上でforkを行い、forkされたリポジトリからpull requestする方法</li>
	<li>forkを行う代わりにブランチを作成し、同一リポジトリ内別ブランチからpull requestする方法</li>
</ol>
1.については、fork元のリポジトリにpush権限がない場合に行います。fork元のリポジトリにpush権限を持つ場合は、1.でも2.でもかまいません。github上のforkは重いので、2.で十分。本稿では、今後2.を前提とします。

pull requestは基本1つのコミットから成るようにコミットを修正します。具体的には、git rebase -i developで1つを除いてpickをsquashに変えたりして、コミットメッセージを全体のコミットメッセージに変えます。

なぜ、pull requestを1つのコミットにまとめるか。
<h3>レビューをしやすくなるから</h3>
以下の2コミットがpull requestされたとします。

commit 2
+my $arg = 'test';
-use Data::Dumper;
-print Dumper($kikisan_peropero);
-$kikisan_peropero-&gt;func('test');
+$kikisan_peropero-&gt;func($arg);

commit 1
+use Data::Dumper;
+print Dumper($kikisan_peropero);
+$kikisan_peropero-&gt;func('test');

意図が掴みづらいですね。これは1例なので、まだ単純。しかし、このようなコミットが重なると、レビューが大変しづらくなります。ローカルのみに存在するブランチでは、このような履歴になることも厭わずどんどんコミットすべきです。しかし、それを人に見せるときには、整形したほうがよいです。

それぞれでは独立性が高いが、一体として取り込んで欲しい変更があったとします。そのような場合でも、1つのpull requestが複数のコミットで成り立つのではなく、複数のpull requestそれぞれが1つのコミットで成り立つように心がけます。なぜか。「独立性が高いが、一体として取り込むべきかどうか」ということも、pull requestを取り込む側が判断できるようにするためです。

もちろん、相互依存性が高い一連の変更だが、いくつかのまとまりに別れるようなものは、1つのpull requestに複数のコミットが含まれていてもかまいません。しかし、ルールを決めるという観点では、1pull request 1 commit というわかりやすいものに揃えたほうが運用しやすいです。全員がレビュワー・レビュイーとして成熟すれば、あとは「よかれ」に緩和してもよいところですね。
<h3>自らの作業の振り返りになるから</h3>
自らが行う振り返りレビューの際にも有用です。デバッグ用コードが残っていないか。コミットし忘れているファイルはないか。
<h3>ブランチのログが綺麗に保たれるから</h3>
綺麗というのは、美的な問題にとどまりません。例えば、リリースブランチにおいて、開発用ブランチにある変更のいくつかをcherry-pickしたいとします。

commit 4
Add files forgotten to commit n n

commit 3
This commit is not related and contains bugs

commit 2
oops, typo

commit 1
Add new big great feature

今回、commit 1, commit 3, commit 4を取り込みたいとします。コミット順が若い順にcherry-pickするのは面倒です。cherry-pickは複数のコミットを扱うことができますが、間にちょこちょこ取り込みたくないコミットがある場合にはちょっと面倒です。1 pull request 1 commitが徹底されていれば、機能単位でcherry-pickをすることができます。無論、機能数分だけcherry-pickをする必要はあります。しかし、総コミット数が少なく、それぞれが独立しているという場合には、cherry-pick総数を減らすことができるし、レンジでの指定も出来る可能性が高まります。

以下のようなコマンドで、派生元ブランチからの差分が1コミットであることを確認します。手癖でドット３つとかよく使ってます。

git log (派生元ブランチ)...(派生先ブランチ)

なお、コミットをまとめる前に、各種lintでソースコードの見た目を整えておくことも重要です。また、githubサイト上でdiffを見たりする際の利便性のためにも、タブキャラクターは使わないほうがよいです。
<h3>pull requestの後処理</h3>
取り込んだブランチは、まめに削除します。
git push origin :feature/sugoi

他の人が消したブランチがローカルではまだ表示される場合は
git branch -rd origin/feature/sugoi
や
git remote prune origin
すればよいです。

リモートで消えているブランチがgit branch -a/-rで表示されなくなる。
<h2>しないこと</h2>
<h3>公開された歴史の破壊</h3>
自らの手元にしかないブランチのコミットは、黒歴史として葬ることができます。
しかし、いったん外に出した歴史は、破壊すべきでないです。

具体的には、git push -fをしないように。必然的に、pushしたブランチに関して、git rebaseしてはいけません。

git rebaseは、1からコミット群を繋ぎ直す作業です。よって、リモートブランチにすでにpush済みであれば、git push -fが必要となります。いったん出したpull requestは、そのブランチに新たなコミットを重ねてpush、再度pull requestを行います。もしくは、pull requestを取り下げ、新たなpull requestを作成します。その際、ブランチは新しくする必要があります。
<h3>過度なコミットの綺麗さの追求</h3>
バージョン管理ツールは、人間のミスをリカバーすることも目的の一つです。過度なコミットの綺麗さの追求はしません。最終成果物の品質を上げることに注力しましょう。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>278</wp:post_id>
		<wp:post_date>2012-11-15 15:37:18</wp:post_date>
		<wp:post_date_gmt>2012-11-15 06:37:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%8d%b1%e3%81%aa%e3%81%8f%e3%81%aa%e3%81%84git%e3%81%93%e3%81%a8%e3%80%81%e3%81%86%e3%81%a1%e3%81%ae%e3%83%81%e3%83%bc%e3%83%a0%e3%81%af%e3%81%93%e3%81%86%e3%81%97%e3%81%9f%e3%81%84%e3%81%ad</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e9%a1%9e"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_su_rich_snippet_type</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:283:"Failed posting to your Facebook Timeline. Error: {"message":"Object at URL 'http://blog.wktk.co.jp/archives/278' of type 'article' is invalid because it specifies multiple 'og:url' values: http://blog.wktk.co.jp/archives/278, http://blog.wktk.co.jp/archives/278.","type":"Exception"}";s:5:"error";s:1:"1";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>危なくないgitこと、うちのチームのgit戦略草案(ver. 1)</title>
		<link>http://blog.wktk.co.jp/archives/293</link>
		<pubDate>Fri, 16 Nov 2012 02:23:08 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=293</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>この記事は更新された版があります</h2>
<a href="http://blog.wktk.co.jp/archives/278">2012/11/16: いただいたフィードバックをもとに、version 2を書きました。</a>

<h2>まえがき</h2>
gitでトラブった！という話を何度か聞いたことがあります。なんでトラブッてるんだろう…と話を聞いたところ、同一のリモートブランチに対して複数人・複数環境から操作が行われているようです。極端な例を挙げると、masterブランチしか存在しておらず、コミットログをキレイにするためと称してgit pull --rebaseを常用しているような環境です。

gitは、以下のように使えば安全です。
<ul>
	<li>mergeに相当する操作をしない</li>
	<li>rebaseに相当する操作をしない</li>
</ul>
…悪い冗談。極端な話ですね。しかし、「merge/rebaseの回数を減らせば、トラブルが起こる確率を減らすことができる」というのは事実です。

そこで、GitHub(Enterprise)の利用を前提に、こういった運用ルールだといいんじゃね、という私案を公開します。ツッコミよろしくです！

なお、<a href="http://nvie.com/posts/a-successful-git-branching-model/">A successful Git branching model</a>(<a href="http://keijinsonyaban.blogspot.jp/2010/10/successful-git-branching-model.html">日本語訳</a>)の用語を前提としています。... modelは長いので、以下その支援ツールのgit-flowで代替します。developブランチとfeatureブランチしか説明に用いません。開発ブランチとトピックブランチと読み替えてもらってかまいません。
<h2>想定する前提条件</h2>
比較的大規模なチーム開発において、大量に画像を使うようなWebサイトを制作します。本番デプロイは週3回程度。GitHubもしくはGitHub Enterpriseを開発に用います。

チームメンバーには、非英語圏のオフショア開発拠点が含まれ、スキル・経験ともさまざまです。チーム全体が顔を合わせた状態で、同じ時間に働くことが期待できません。
<h2>ねらい</h2>
mergeとrebaseを減らしつつ、それらを行う際には意識的に行うようにします。結果、merge/rebaseミスによる作業者が意図しない変更を防ぎ、コードレビューのタイミングを設け、コミットログも管理上扱いやすく保ちます。

なお、ルール化を行うことによって、100点の使い方をできる人に、70点の使い方を強制し、それを許容します。
<h2>mergeを減らす</h2>
developブランチでのmergeを減らすためには、developブランチに変更を行える人を制限し、一般の作業者が変更できないようにします。

git-flowを用いて、特定の環境でだけfeatureブランチを編集し、developへのマージはある特定の人だけが行う、といった運用は、上記の観点からトラブル防止に有効です。

developブランチへのfeatureブランチの取り込みは、すべてpull requestを用いて行います。developブランチに対する直接作業は禁止します。

pull requestのやり方は後述します。

pull requestに取り込みにおいて、相互レビューをするとよいです。自分がpull requestを受ける立場になれば、レビュワーにやさしいpull requestというものの重要性が実感としてわかります。
<h2>同一ブランチに対する共同作業をどうするか</h2>
featureブランチについて、複数人で作業したい場合があります。たとえば、<a href="http://labs.gree.jp/blog/2011/05/3528/">sotarok先生のgit-dailyは、そのような状況も想定したワークフロー・ツール</a>です。

feature/sugoiというfeatureブランチを開発するにあたって、サーバサイドロジック側エンジニアが2人、HTML/CSSコーダーが2人、JavaScript側エンジニアが2人、画像製作者が2人参加すると想定します。

画像製作者が制作する画像については、git管理外とします。詳しくは後述。

それ以外の作業者については、feature/sugoiブランチ以下に個人ごとのサブブランチを立てます(ex. feature/sugoi/suenaga)。サブブランチはfeatureブランチを基に作成します。

あとは、個々人が自分の管理下のブランチを育てていきます。個人ごとのサブブランチは、リモートにpushしません。リモートにpushする場合には、featureブランチにmergeを行い、featureブランチをpushします。ここでもpull requestを用いてよいのですが、レビューが必要な場合などにとどめます。

featureブランチのサブブランチは個々人の管理なので、rebaseしようが何しようが問題なし。本体のコミットログが英語onlyであっても、日本語のコミットログを残してもOK。自分がやりやすいように作業します。
<h2>画像ファイルなど、巨大かつ大量なバイナリファイルの管理はどうするか。</h2>
gitには向いていません。Alienbrainなどの専用ソフトを使うか、Subversionの利用にとどめましょう。

gitで巨大かつ大量なバイナリファイルを置くと、cloneが重くなり、.gitディレクトリが肥大します。

まず、バイナリファイルはmergeができません。よって、画像のバージョン管理の要件としては、任意のバージョンの画像が取得できれば十分となります。

次に、不自然だからです。例えば、Photoshopで作成したjpeg画像がプロジェクトに必要だったとします。Photoshopのpsdファイルはプログラムで言うソースコードにあたり、そこから生成されたjpeg画像はプログラムで言う実行バイナリにあたります。jpeg画像をgitリポジトリに入れることは、実行バイナリをgitリポジトリ管理していることに相当すると考えます。確かに、デプロイの都合や、サードパーティー製ライブラリでソースコードがない場合など、実行バイナリのみをgit管理下にすることはありえます。しかし、一般的に実行バイナリをgit管理下に置くのは不自然だと考えます。だからといって、psdファイルをgit管理下に置くとさらに容量を圧迫しちゃいます。

最後に、画像作成者の学習コストが減ります。例えばSubversionを用いた場合、TortoiseSVNなどの枯れたツールが採用できます。gitの概念を教育する必要もありません。Subversionを用いる場合には、ブランチなどは作らず、一本道のコミットを想定します。ブランチ的なことをやりたい場合には、パス・ファイル名を分けて作業します。例えば、特定の期間だけ、ある画像に「NEW」というレイヤーが入った画像を使いたいとします。そのような場合には、image.pngとimage_new.pngのように2ファイルで管理します。これで、参照元のgitのどのブランチからも、svn HEADを見ればよい状態を担保します。

画像作成者がgitを使いこなせるのであっても、画像をgit管理下に置くのはメリットが少ないと考えます。せめて、リポジトリを分けたいところです。

git-svnを用いてsubmoduleとしてSubversionを使う、というアイデアはありますが、調査できていません。

なお、git自身でバイナリファイルを扱うことそのものは問題ありません。大量に画像を使わない＆それらが頻繁に更新されないのであれば、git管理下に置くのがよいでしょう。
<h2>pull requestのやり方をどうするか</h2>
githubには、pull requestという機能があります。github上にpushされた変更点を、特定のリポジトリの特定のブランチに取り込むように依頼する機能です。

pull requestは、基となるリポジトリの位置によって２種類に分類されます。
<ol>
	<li> github上でforkを行い、forkされたリポジトリからpull requestする方法</li>
	<li>forkを行う代わりにブランチを作成し、同一リポジトリ内別ブランチからpull requestする方法</li>
</ol>
1.については、fork元のリポジトリにpush権限がない場合に行います。fork元のリポジトリにpush権限を持つ場合は、1.でも2.でもかまいません。github上のforkは重いので、2.で十分。本稿では、今後2.を前提とします。

pull requestは、「レビュー可能なような」コミット列からなるブランチをもって行います。普段から「<a href="http://www.clear-code.com/blog/2012/3/13.html">意図が伝わるコミットのしかた</a>」のように、コミットをわかりやすくしている方はそのままpull requestしましょう。「<a href="http://tomykaira.hatenablog.com/entry/2012/10/21/022627">継続的コミット</a>」のように、コミットが増えるような作業パターンを採用している人は、git rebase -i developなどを用いてコミットを「レビュー可能」にしましょう。

例えば、以下の2コミットがpull requestされたとします。

commit 2
+my $arg = 'test';
-use Data::Dumper;
-print Dumper($kikisan_peropero);
-$kikisan_peropero-&gt;func('test');
+$kikisan_peropero-&gt;func($arg);

commit 1
+use Data::Dumper;
+print Dumper($kikisan_peropero);
+$kikisan_peropero-&gt;func('test');

意図が掴みづらいですね。さまざまな試行錯誤をしている過程で、printfデバッグなどを行って不必要なコードが混ざったり、ソースコードのフォーマットが変わったりすることがあります。上記の例は、まだ単純。このようなコミットが重なると、レビューを妨げます。試行錯誤の過程をpull requestに入れるのはやめましょう。ローカルのみに存在するブランチでは、このような履歴になってもよいです。しかし、それを人に見せるときには、「レビュー可能に」整形したほうがよいです。

レビュー可能に整形する過程において、期せずして振り返りレビューを自ら行うことにもなります。デバッグ用コードが残っていないか。コミットし忘れているファイルはないか。

なお、一つのpull request(≒featureブランチ)は小さいほうが望ましいです。大きな機能を作る際でも、ある程度分割をして取り込んだほうが負担が少ないです。

pull requestをする前に、以下のようなコマンドで対象となるコミット群がレビュー可能であるかどうか確認しましょう。

git log -p (派生元ブランチ)...(派生先ブランチ)

他にも、レビュー可能性を上げるためにやったほうがよいことがあります。

コミットメッセージについて、コミットの内容を端的に表し、他のコミットメッセージとフォーマットを揃えましょう。「<a href="http://www.clear-code.com/blog/2012/2/21.html">コミットメッセージの書き方</a>」、という記事があるので、参考にしてください。

各種lintでソースコードの見た目を整えておくことも重要です。また、githubサイト上でdiffを見たりする際の利便性のためにも、タブキャラクターは使わないほうがよいです。
<h3>pull requestの後処理</h3>
取り込んだブランチは、まめに削除します。
git push origin :feature/sugoi

他の人が消したブランチがローカルではまだ表示される場合は
git branch -rd origin/feature/sugoi
や
git remote prune origin
すればよいです。

リモートで消えているブランチがgit branch -a/-rで表示されなくなります。
<h2>しないこと</h2>
<h3>公開された歴史の破壊</h3>
自らの手元にしかないブランチのコミットは、黒歴史として葬ることができます。
しかし、いったん外に出した歴史は、破壊すべきでないです。

具体的には、git push -fをしないように。必然的に、pushしたブランチに関して、git rebaseしてはいけません。

git rebaseは、1からコミット群を繋ぎ直す作業です。よって、リモートブランチにすでにpush済みであれば、git push -fが必要となります。いったん出したpull requestは、そのブランチに新たなコミットを重ねてpush、再度pull requestを行います。もしくは、pull requestを取り下げ、新たなpull requestを作成します。その際、ブランチは新しくする必要があります。
<h3>過度なコミットの綺麗さの追求</h3>
バージョン管理ツールは、人間のミスをリカバーすることも目的の一つです。過度なコミットの綺麗さの追求はしません。最終成果物の品質を上げることに注力しましょう。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>293</wp:post_id>
		<wp:post_date>2012-11-16 11:23:08</wp:post_date>
		<wp:post_date_gmt>2012-11-16 02:23:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>293</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="git"><![CDATA[git]]></category>
		<category domain="category" nicename="%e6%8a%80%e8%a1%93%e3%83%a1%e3%83%a2"><![CDATA[技術メモ]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_pages_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_mentioned_friends_message</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_su_rich_snippet_type</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>fb_status_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;a:2:{s:7:"message";s:283:"Failed posting to your Facebook Timeline. Error: {"message":"Object at URL 'http://blog.wktk.co.jp/archives/293' of type 'article' is invalid because it specifies multiple 'og:url' values: http://blog.wktk.co.jp/archives/293, http://blog.wktk.co.jp/archives/293.","type":"Exception"}";s:5:"error";s:1:"1";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Plack::Middleware::Image::DummyでCPAN authorデビュー!!</title>
		<link>http://blog.wktk.co.jp/archives/309</link>
		<pubDate>Sun, 20 Jan 2013 03:35:35 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">http://blog.wktk.co.jp/?p=309</guid>
		<description></description>
		<content:encoded><![CDATA[始めてのCPAN module、Plack::Middleware::Image::Dummyをshipitした。
<ul>
	<li><a href="http://search.cpan.org/~gunya/Plack-Middleware-Image-Dummy/">http://search.cpan.org/~gunya/Plack-Middleware-Image-Dummy/</a></li>
	<li><a href="https://github.com/gunyarakun/p5-Plack-Middleware-Image-Dummy">https://github.com/gunyarakun/p5-Plack-Middleware-Image-Dummy</a></li>
</ul>
約7年前に「<a href="http://d.hatena.ne.jp/tasukuchan/20060324/1143188619">本当のワタシ　デビュー！</a>」というCPAN authorになるぜエントリを書いていたのだが、やっとのデビュー。下積み長い！

Plack::Middleware::Image::Dummy は、<a href="http://dummyimage.com/">Dynamic Dummy Image Generator</a>のPlack版です。指定の幅・サイズ・ファイル形式の画像をURL1つで作ることができます。

たとえば、http://localhost:5000/400x300.pngというURLで、こんな画像が出てきます。

<img alt="" src="https://farm9.staticflickr.com/8215/8397330732_856bc6b262.jpg" width="400" height="300" />

画像内にあるテキスト、テキスト色、背景色も指定できます。
http://localhost:5000/200x300.png?text=美しすぎるカード画像&amp;color=ffffff&amp;bgcolor=000000
<img alt="" src="https://farm9.staticflickr.com/8374/8396246309_2c999fed4f.jpg" width="200" height="300" />

Imager::File::GIFを入れるときにhomebrewでgiflibを入れるんだけど、既存のヘッダとかと干渉してbrew linkがコケるのでbrew link -fでしのいだ。

Build.PLに必要なモジュールが足りずにバージョンアップしてしまったけど、
Module::BuildでREADME.podを賢く作る方法って何かないのかなー。
hirose31さんはシンボリックリンクを張っていて、単純明快でいいな、と思った。

こういったリリースしたぜブログエントリでなんでmetacpanのURLを貼るのか疑問だったんだけど、metacpanのほうが早く更新されるのね。
というわけで、こんな小品をリリースできていけたらいいな、と思っとる次第です。
<h2>追記</h2>
なんか今考えたらPlack::App::DummyImageとかのほうがいいんじゃね？と思ったりした。というわけで「Plack::App dummy」とCPANで検索してみたら、似たようなモジュールが上がっているという悲しい結末。せつないですね。先にモジュール見つけていたらこれ使っていたのに。TMTOWTDI!!!!

<a href="http://search.cpan.org/~bayashi/Plack-App-DummyBox/lib/Plack/App/DummyBox.pm">http://search.cpan.org/~bayashi/Plack-App-DummyBox/lib/Plack/App/DummyBox.pm

</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>309</wp:post_id>
		<wp:post_date>2013-01-20 12:35:35</wp:post_date>
		<wp:post_date_gmt>2013-01-20 03:35:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>plackmiddlewareimagedummy%e3%81%a7cpan-author%e3%83%87%e3%83%93%e3%83%a5%e3%83%bc</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="perl"><![CDATA[Perl]]></category>
		<category domain="category" nicename="%e6%8a%80%e8%a1%93%e3%83%a1%e3%83%a2"><![CDATA[技術メモ]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_su_rich_snippet_type</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_62de7b69063318134545cfff003b15ff</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>次世代HTTP候補のSPDYをWordpress + Nginxで有効にする</title>
		<link>http://blog.wktk.co.jp/archives/322</link>
		<pubDate>Thu, 31 Jan 2013 03:17:10 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">https://blog.wktk.co.jp/?p=322</guid>
		<description></description>
		<content:encoded><![CDATA[SPDY、流行ってますよね。

魔少年？それはビーディー。
ワンダー？それはスティービー。
次世代の香りがするシャレオツプロトコル？それはスピーディー。

というわけで、このブログをSPDY対応にしてみました。
このブログは、Nginxの2重構成となっていて、片方がリバースプロクシ、もう片方がWordPressのPHP実行環境とFastCGIでつながる用。
<h2>SPDYパッチを当てたNginxをビルドする</h2>
NginxでSPDYを有効にする場合、OpenSSL 1.0.1以降が必要とのことですが、システムにそれをインストールする必要はないようです。
Debianなので、aptitudeでもろもろ入れています。

<code>
[shell]
# ビルドに必要なものを入れる
sudo aptitude install build-essential libpcre3-dev zlib1g-dev

# Nginxのtar ball取ってきて、SPDYパッチあてる
wget http://nginx.org/download/nginx-1.3.11.tar.gz
tar xvfz nginx-1.3.11.tar.gz
cd nginx-1.3.11
wget http://nginx.org/patches/spdy/patch.spdy.txt
patch -p1 &lt; patch.spdy.txt

# Nginx用のOpenSSL 1.0.1cを解凍しておく
wget http://www.openssl.org/source/openssl-1.0.1c.tar.gz
tar xvfz openssl-1.0.1c.tar.gz

# Nginxの鬼configure
./configure \
  --prefix=/usr/local/nginx \
  --sbin-path=/usr/local/nginx/sbin/nginx \
  --conf-path=/usr/local/nginx/etc/nginx/nginx.conf \
  --http-log-path=/var/log/nginx/access \
  --error-log-path=/var/log/nginx/error \
  --pid-path=/var/run/nginx/nginx.pid \
  --lock-path=/var/run/nginx/nginx.lock \
  --user=nginx \
  --group=nginx \
  --http-client-body-temp-path=/var/tmp/nginx/req \
  --http-proxy-temp-path=/var/tmp/nginx/proxy \
  --http-fastcgi-temp-path=/var/tmp/nginx/fastcgi \
  --without-mail_pop3_module \
  --without-mail_imap_module \
  --without-mail_smtp_module \
  --with-pcre-jit \
  --with-md5-asm \
  --with-sha1-asm \
  --with-http_stub_status_module \
  --with-http_ssl_module \
  --with-http_realip_module \
  --with-rtsig_module \
  --with-select_module \
  --with-poll_module \
  --with-file-aio \
  --with-http_spdy_module \
  --with-openssl=openssl-1.0.1c
make
sudo make install
[/shell]
</code>
<h2>Nginxの設定</h2>
Nginxの設定ファイルを書く。
<ul>
	<li>sslを有効にする。証明書も買ったよ。</li>
	<li>reverse proxyしてキャッシュする用と、Wordpressホスト用と両方の設定を書く。reverse proxyのときにヘッダに各種情報を仕込んでおく。</li>
</ul>
<code>
[text]
user www-data;
worker_processes  1;

error_log  /var/log/nginx/error.log;
pid        /var/run/nginx.pid;

events {
  worker_connections  1024;
}

http {
  include     mime.types;

  access_log	/var/log/nginx/access.log;

  sendfile        on;
  #tcp_nopush     on;

  #keepalive_timeout  0;
  keepalive_timeout  65;
  tcp_nodelay        on;

  gzip  on;
  gzip_disable "MSIE [1-6]\.(?!.*SV1)";

  # wktk blog
  server {
    listen 8080;

    root /home/tasuku/blog_wktk;
    server_name blog.wktk.co.jp;

    include /home/tasuku/blog_wktk/nginx.conf;

    location / {
      index index.php;
      if (-f $request_filename) {
        expires 14d;
        break;
      }
      if (!-e $request_filename) {
        rewrite ^(.+)$ /index.php?q=$1 last;
      }
    }
    location ~ \.php$ {
      include       fastcgi_params;
      fastcgi_pass  127.0.0.1:9001;
      fastcgi_index index.php;
      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
      fastcgi_param PATH_INFO $fastcgi_path_info;
      fastcgi_param SERVER_PORT 80;
      fastcgi_param SERVER_NAME blog.wktk.co.jp;
      expires 2h;
    }
  }

  # wktk blog reverse proxy

  proxy_cache_path  /var/cache/nginx levels=1:2 keys_zone=czone:180m max_size=512m inactive=120m;
  proxy_temp_path   /var/tmp/nginx;
  proxy_cache_key   "$scheme://$host$request_uri";
  proxy_set_header  Host               $host;
  proxy_set_header  X-Real-IP          $remote_addr;
  proxy_set_header  X-Forwarded-Host   $host;
  proxy_set_header  X-Forwarded-Server $host;
  proxy_set_header  X-Forwarded-For    $proxy_add_x_forwarded_for;
  proxy_set_header  X-Forwarded-Proto  $scheme;
  proxy_buffers     32 16k;

  upstream backend {
    ip_hash;
    server 127.0.0.1:8080;
  }

  server {
    listen 80;
    listen 443 ssl spdy default_server;

    # ssl
    ssl_certificate /etc/nginx/certs/blog.wktk.co.jp.crt;
    ssl_certificate_key /etc/nginx/certs/blog_wktk.key;

    # spdy
    spdy_max_concurrent_streams 50;
    spdy_streams_index_size 32;
    spdy_recv_timeout 5s;
    spdy_keepalive_timeout 15s;
    spdy_headers_comp 9;

    # root /home/tasuku/blog_wktk;
    server_name blog.wktk.co.jp;

    location /wp-admin { proxy_pass http://backend; }
    location ~ .*\.php { proxy_pass http://backend; }

    expires off;

    set $do_not_cache 0;

    location / {
      set $mobile 0;
      if ($http_user_agent ~* '(DoCoMo|J-PHONE|Vodafone|MOT-|UP\.Browser|DDIPOCKET|ASTEL|PDXGW|Palmscape|Xiino|sharp pda browser|Windows CE|L-mode|WILLCOM|SoftBank|Semulator|Vemulator|J-EMULATOR|emobile|mixi-mobile-converter)') {
        set $mobile 1;
      }
      if ($http_user_agent ~* '(iPhone|iPod|Opera Mini|Android.*Mobile|NetFront|PSP|BlackBerry)') {
        set $mobile 2;
      }
      if ($http_cookie ~* "comment_author_[^=]*=([^%]+)%7C|wordpress_logged_in_[^=]*=([^%]+)%7C") {
        set $do_not_cache 1;
      }
      proxy_no_cache     $do_not_cache;
      proxy_cache_bypass $do_not_cache;
      proxy_cache        czone;
      proxy_cache_key    "$scheme://$host$request_uri$is_args$args$mobile";
      proxy_cache_valid  200 20m;
      proxy_cache_valid  404 5m;
      proxy_pass         http://backend;
    }

    location ~* \.(jpg|png|gif|jpeg|css|js|swf|pdf|ppt|pptx)$ {
      proxy_cache_valid  200 120m;
      expires            864000;
      proxy_cache        czone;
      proxy_pass         http://backend;
    }

    location  ~* \/[^\/]+\/(feed|\.xml)\/? {
      if ($http_cookie ~* "comment_author_[^=]*=([^%]+)%7C|wordpress_logged_in_[^=]*=([^%]+)%7C") {
        set $do_not_cache 1;
      }
      proxy_no_cache     $do_not_cache;
      proxy_cache_bypass $do_not_cache;
      proxy_cache        czone;
      proxy_cache_valid  200 60m;
      proxy_pass         http://backend;
    }
  }
}
[/text]
</code>
<h2>WordPress側のSSL設定をする</h2>
wp-config.phpのwp-settings.php読み込み前に、Proxyに来たプロトコルを見てHTTPSかどうかを判定するロジックを入れる。
strtolowerはいらない気がするけど、wp-includes/functions.phpのis_sslと同じノリでやってみる。

<code>
[php]
// tasuku: added for proxy
if ( isset($_SERVER['HTTP_X_FORWARDED_PROTO']) &amp;&amp; strtolower($_SERVER['HTTP_X_FORWARDED_PROTO']) == 'https' ) {
        $_SERVER['HTTPS'] = 'on';
}
[/php]
</code>
<h2>Nginxのinitスクリプトを書く</h2>
initスクリプトを書く。Debianのnginxデフォルトのinitスクリプトのほぼコピペ。

<code>
[shell]
#! /bin/sh

### BEGIN INIT INFO
# Provides:          nginx
# Required-Start:    $local_fs $remote_fs $network $syslog
# Required-Stop:     $local_fs $remote_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts the nginx web server
# Description:       starts nginx using start-stop-daemon
### END INIT INFO

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=/usr/local/nginx/sbin/nginx
NAME=nginx
DESC=nginx

test -x $DAEMON || exit 0

set -e

. /lib/lsb/init-functions

test_nginx_config() {
  if $DAEMON -t $DAEMON_OPTS &gt;/dev/null 2&gt;&amp;1
  then
    return 0
  else
    $DAEMON -t $DAEMON_OPTS
    return $?
  fi
}

case "$1" in
  start)
	echo -n "Starting $DESC: "
        test_nginx_config
	start-stop-daemon --start --quiet --pidfile /var/run/$NAME.pid \
		--exec $DAEMON -- $DAEMON_OPTS || true
	echo "$NAME."
	;;
  stop)
	echo -n "Stopping $DESC: "
	start-stop-daemon --stop --quiet --pidfile /var/run/$NAME.pid \
		--exec $DAEMON || true
	echo "$NAME."
	;;
  restart|force-reload)
	echo -n "Restarting $DESC: "
	start-stop-daemon --stop --quiet --pidfile \
		/var/run/$NAME.pid --exec $DAEMON || true
	sleep 1
        test_nginx_config
	start-stop-daemon --start --quiet --pidfile \
		/var/run/$NAME.pid --exec $DAEMON -- $DAEMON_OPTS || true
	echo "$NAME."
	;;
  reload)
        echo -n "Reloading $DESC configuration: "
        test_nginx_config
        start-stop-daemon --stop --signal HUP --quiet --pidfile /var/run/$NAME.pid \
            --exec $DAEMON || true
        echo "$NAME."
        ;;
  configtest)
        echo -n "Testing $DESC configuration: "
        if test_nginx_config
        then
          echo "$NAME."
        else
          exit $?
        fi
        ;;
  status)
	status_of_proc -p /var/run/$NAME.pid "$DAEMON" nginx &amp;&amp; exit 0 || exit $?
	;;
  *)
	echo "Usage: $NAME {start|stop|restart|reload|force-reload|status|configtest}" &gt;&amp;2
	exit 1
	;;
esac

exit 0
[/shell]
</code>
<h2>動作確認する</h2>
Google Chromeであれば、
<ul>
<li><a href="chrome://net-internals/#spdy">chrome://net-internals/#spdy</a></li>
<li><a href="https://chrome.google.com/webstore/detail/spdy-indicator/mpbpobfflnpcgagjijhmgnchggcjblin">https://chrome.google.com/webstore/detail/spdy-indicator/mpbpobfflnpcgagjijhmgnchggcjblin</a></li>
</ul>

Firefoxであれば、
<ul>
<li><a href="https://addons.mozilla.org/ja/firefox/addon/spdy-indicator/">https://addons.mozilla.org/ja/firefox/addon/spdy-indicator/</a></li>
</ul>
でSPDYが有効かどうかチェックできる。

なぜかChromeのSPDY indicatorでは有効判定されていないが、SPDYで通信はなされているようだ。

というわけで、以下のURLからSPDY版にアクセス！アクセス！
<a href="https://blog.wktk.co.jp/">あなたの知らない世界（by 新倉イワオ）</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>322</wp:post_id>
		<wp:post_date>2013-01-31 12:17:10</wp:post_date>
		<wp:post_date_gmt>2013-01-31 03:17:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%ac%a1%e4%b8%96%e4%bb%a3http%e5%80%99%e8%a3%9c%e3%81%aespdy%e3%82%92wordpress-nginx%e3%81%a7%e6%9c%89%e5%8a%b9%e3%81%ab%e3%81%99%e3%82%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="nginx"><![CDATA[nginx]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[WordPress]]></category>
		<category domain="category" nicename="%e6%8a%80%e8%a1%93%e3%83%a1%e3%83%a2"><![CDATA[技術メモ]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>RPythonで書かれたRuby処理系Topazで遊ぶ</title>
		<link>http://blog.wktk.co.jp/archives/328</link>
		<pubDate>Thu, 07 Feb 2013 18:48:59 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">https://blog.wktk.co.jp/?p=328</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://docs.topazruby.com/en/latest/blog/announcing-topaz/">Topaz</a>というRuby処理系が話題となっているようだ。RPythonで書かれており、CRuby(YARV)よりも高速だという。

同僚でもあるパイパニスト（語弊ある）id: rokujyouhitoma がTopazをビルドできない！と言っていた。そんなに難しいのならチャレンジしてみよう。今日はなぜかPython Tシャツを着ているし。昨日はなぜか職場でNode.jsとPerlのコードを読んでいたし。

<p>
<img src="https://farm9.staticflickr.com/8233/8453063085_775391e53b.jpg">
</p>

<h3>ビルド</h3>

python環境はpythonbrewで、今回はvirtualenvは使わない。OSはMountain Lion。git/Mercurial/各種ビルドツールは入っている感じで。

<code>
[shell]
mkdir topazos
cd topazos
git clone http://github.com/topazproject/topaz
hg clone https://bitbucket.org/pypy/pypy
cd topaz
pip install -r requirements.txt
python ../pypy/rpython/bin/rpython -Ojit targettopaz.py
[/shell]
</code>

RPythonが出すマンデルブロ集合をぼーっと見ていると、ビルドが終わる。
最適化をかけたあと、RPythonの実行系も含んだC言語のソースコードを吐き出し、それをビルドするようだ。

<h3>起動してみる</h3>

まずは試しに起動、と。

<code>
[shell]
> bin/topaz
RPython traceback:
  File "topaz_main.c", line 128, in entry_point
  File "topaz_main.c", line 2163, in _entry_point
Fatal RPython error: NotImplementedError
[1]    99870 abort      bin/topaz
[/shell]
</code>

Oh。なんか失敗した。-eでワンライナーするか、スクリプトファイルが必要らしい。

<code>
[shell]
> bin/topaz -e "puts 'Hello Topaz.'"
Hello Topaz.
[/shell]
</code>

やたー、動いた。

<h3>簡単なベンチマーク</h3>

差が6つの素数の組である、<a href="https://gist.github.com/havenwood/4724778">セクシー素数を求めるRubyコード</a>を動かしてみる。セクシーな結果は出るのかな。

<code>
[shell]
> ruby -v
ruby 1.9.3p327 (2012-11-10 revision 37606) [x86_64-darwin12.0.0]
> time ruby sexy_prime.rb
51.774221
ruby sexy_prime.rb  51.76s user 0.03s system 99% cpu 51.793 total
> time bin/topaz sexy_prime.rb
10.434968
bin/topaz sexy_prime.rb  10.42s user 0.02s system 99% cpu 10.444 total
[/shell]
</code>

Oh, Sexy! 確かにこのベンチマークコードではかなり速くなっているようだ。

<h3>実装を見てみる</h3>

せっかくなので、実装も見てみよう。topazのディレクトリ構成はこんな感じ。

<ul>
<li>lib-ruby: Rubyで書かれたRubyの標準クラス/モジュール。FileUtilsとかppとか。</li>
<li>topaz: RPythonで書かれた本体。構文解析とか。</li>
<li>topaz/modules: RPythonで書かれた標準モジュール。KernelとかMathとか。</li>
<li>topaz/objects: RPythonで書かれた標準クラス。BignumとかFileとかRegexpとか。</li>
</ul>

ためしに、topaz/modules/math.pyを見てみよう。

<code>
[python]
from __future__ import absolute_import

import math

from topaz.module import Module, ModuleDef


class Math(Module):
    moduledef = ModuleDef("Math", filepath=__file__)

    @moduledef.setup_module
    def setup_module(space, w_mod):
        space.set_const(w_mod, "PI", space.newfloat(math.pi))
        space.set_const(w_mod, "E", space.newfloat(math.e))

    @moduledef.function("exp", value="float")
    def method_exp(self, space, value):
        return space.newfloat(math.exp(value))

    @moduledef.function("sin", value="float")
    def method_sin(self, space, value):
        return space.newfloat(math.sin(value))

    @moduledef.function("sqrt", value="float")
    def method_sqrt(self, space, value):
        return space.newfloat(math.sqrt(value))

    @moduledef.function("log", value="float", base="float")
    def method_log(self, space, value, base=math.e):
        if base == math.e:
            return space.newfloat(math.log(value))
        else:
            return space.newfloat(math.log(value) / math.log(base))
[/python]
</code>

どうみてもRPythonです。本当にありがとうございました。

<h3>もっと突っ込んだベンチマーク</h3>

調子に乗って、<a href="http://benchmarksgame.alioth.debian.org/">The Computer Language Benchmarks Game</a>にあるベンチマークプログラムを動かそうとしたけど、めんどそうなので挫折。<a href="http://benchmarksgame.alioth.debian.org/play.php">動かし方が書いてあるページ</a>があるので、誰かチャレンジしてほしいす。おっさんねむいっす。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>328</wp:post_id>
		<wp:post_date>2013-02-08 03:48:59</wp:post_date>
		<wp:post_date_gmt>2013-02-07 18:48:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rpython%e3%81%a7%e6%9b%b8%e3%81%8b%e3%82%8c%e3%81%9fruby%e5%87%a6%e7%90%86%e7%b3%bbtopaz%e3%81%a7%e9%81%8a%e3%81%b6</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>
		<category domain="category" nicename="%e6%8a%80%e8%a1%93%e3%83%a1%e3%83%a2"><![CDATA[技術メモ]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Digest::BLAKE2作成で学ぶモダンPerl XSモジュール作成と、挫折</title>
		<link>http://blog.wktk.co.jp/archives/331</link>
		<pubDate>Sun, 10 Feb 2013 06:16:49 +0000</pubDate>
		<dc:creator>tasuku</dc:creator>
		<guid isPermaLink="false">https://blog.wktk.co.jp/?p=331</guid>
		<description></description>
		<content:encoded><![CDATA[Perlを3行書くと死ぬ奇病にかかってはや数年、毎日青息吐息で出社している僕です。一番好きな言語はC言語です。裏切らないから。

というわけで、裏切らないC言語でPerlのモジュールがかければ死ぬ可能性が低まるのではないか、という仮説のもとに、XS module作成を習作してみよう。

<a href="https://blake2.net/">BLAKE2</a>というとよさげなハッシュアルゴリズムがあるので、それをPerl module化してみた。

<ul>
<li><a href="https://github.com/gunyarakun/p5-Digest-BLAKE2">https://github.com/gunyarakun/p5-Digest-BLAKE2</a></li>
<li><a href="http://search.cpan.org/~gunya/Digest-BLAKE2/">http://search.cpan.org/~gunya/Digest-BLAKE2/</a></li>
</ul>

<h2>ベンチマーク</h2>

まずはベンチマークから。

BLAKE2には4つのアルゴリズムがあるが、マルチプロセス版はセグフォしたので、BLAKE2bとBLAKE2sのみ。

BLAKE2bは64bit CPUで高速に動き512bit出力。BLAKE2sは8-32bit CPUで高速に動き256bit出力。

ビット数あたりの早さでは、MD5を超え、MurmurHashに肉薄している。結構速いっすね。cmptheseでRateの割り算ができればもっときれいに比較できるかな。

<code>
[perl]
                        Rate SHA512    (512bit) SHA1      (160bit) BLAKE2b   (512bit) BLAKE2s   (256bit) MD5       (128bit) MurmurHash(256bit)
SHA512    (512bit)   70572/s                 --                -0%               -90%               -92%               -94%               -95%
SHA1      (160bit)   70671/s                 0%                 --               -90%               -92%               -94%               -95%
BLAKE2b   (512bit)  704225/s               898%               896%                 --               -15%               -41%               -54%
BLAKE2s   (256bit)  833333/s              1081%              1079%                18%                 --               -30%               -45%
MD5       (128bit) 1190476/s              1587%              1585%                69%                43%                 --               -21%
MurmurHash(256bit) 1515152/s              2047%              2044%               115%                82%                27%                 --
[/perl]
</code>

<h2>どんな風に書いたか</h2>

BLAKE2のアルゴリズムごとに、pmとxsのソースコードを自動生成するようにしてみた。

また、今時hexとbase64だけではつらいので、urlsafeなbase64と、Ascii85を追加してみた。<a href="http://base91.sourceforge.net/">basE91</a>とかも入れようかと思ったけど見送り。

Base64, urlsafe Base64, Ascii85へのエンコードは、爆速をうたうエンコードライブラリであるstringencodersを使った。

stringencodersのAscii85は、Adobe式というか、PostScript/PDFで使われているものに近いらしく、Convert::Ascii85とは文字セットが異なる。

普通のAscii85だとテーブルルックアップする必要はないのだが、今回はstringencodersのmod_b85_gen.cをいじってテーブルの配置を変えた。

また、big endianかどうかをstringencodersに教えないといけないので、use Config; $Config->{byteorder}; でバイトオーダを取得してconfig.hを書き出すようにしてしのいだ。

<h2>悩んだところ</h2>

今回、typester先生の<a href="https://speakerdeck.com/typester/xsnimatuwaruhua">XSにまつわる話</a>スライドを見ながらXSモジュールを書いてみた。

以下のようなことで悩んだ。

<ul>
<li>
Module::Build::Pluggable::XSUtilを使っているモジュールが少ない。ただでさえ、Build.PLを使っているモジュールが少ないのに、情報量が少なくて詰んだ。typester先生の<a href="https://github.com/typester/EV-Hiredis">EV::Hiredis</a>を見ながらしのいだ。
</li>
<li>
Module::Build::PluggableとModule::Build->subclassを共存させる方法がよくわかんなくて、ACTION_codeでソースコードテンプレートからソースを生成したかったけど、Build.PLのトップレベルでソースコードを生成してしのいだ。Module::Build::Pluggableのソースコードを見る限り、そう簡単にはいかないっぽい。
<a href="https://github.com/tokuhirom/mRuby.pm/blob/master/Build.PL">mRuby.pmのBuild.PL</a>のように、
自分でppport.h生成とc99 checkをやらないといけないのかもしれないけど、ちょっと面倒。
</li>
<li>
ソースコードテンプレートに変更があっても、Buildで検出してくれない。ソースコードを生成しなおして、Buildできるようにしたい。
<a href="https://github.com/tokuhirom/Nana/blob/master/Build.PL">NanaのBuild.PL</a>のようにすれば、うまく自動生成をハンドリングしてくれるのかな。
</li>
<li>
shipitしようとすると、Digest-BLAKE2-0.01/というディレクトリが消えずに残っていて怒られた。.gitignoreとMANIFEST.SKIPに書いてしのいだがなんか不吉な予感する。
</li>
<li>
CPANにソースコードテンプレートであるBLAKE2x.pmファイルがインデックス化されている。そのモジュールはインストールされず、別名のモジュールがインストールされちゃいます。
</li>
<li>
CPANにblake2ディレクトリのREADMEがインデックス化されている。
</li>
<li>
今でもh2xsを最初に使うべきなのかな。今回はh2xsを全く使わず。
</li>
<li>
typemapというファイルの存在を知らずにハマったのが一番時間を食った。h2xsを使わないのがよくないのか。
</li>

<h2>まとめ</h2>

初めてのXS moduleとそのCPANリリースをやってみた。

一応それなりに高速に動作するハッシュモジュールができて満足だが、パッケージングやビルドまわりでは手詰まり感。XSよりModule::Buildについて調べるのに時間がかかってしまった。モダンXSってどう書くのがいいのか、ある程度テンプレがほしいですね。

<h2>ベンチマークコード</h2>

<code>
[perl]
use Benchmark qw(:all);

use Digest::MD5;
use Digest::SHA;
use Digest::MurmurHash;
use Digest::BLAKE2;

sub md5 {
  Digest::MD5::md5_hex($_[0]);
}

sub sha1 {
  Digest::SHA::sha1_hex($_[0]);
}

sub sha1 {
  Digest::SHA::sha512_hex($_[0]);
}

sub murmur {
  unpack('H*', Digest::MurmurHash::murmur_hash($_[0]));
}

sub blake2b {
  Digest::BLAKE2::blake2b_hex($_[0]);
}

sub blake2s {
  Digest::BLAKE2::blake2s_hex($_[0]);
}

cmpthese(1000000, {
    'MD5       (128bit)' => sub { md5($str) },
    'SHA1      (160bit)' => sub { sha1($str) },
    'MurmurHash(256bit)' => sub { murmur($str) },
    'BLAKE2s   (256bit)' => sub { blake2s($str) },
    'SHA512    (512bit)' => sub { sha1($str) },
    'BLAKE2b   (512bit)' => sub { blake2b($str) },
});
[/perl]
</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>331</wp:post_id>
		<wp:post_date>2013-02-10 15:16:49</wp:post_date>
		<wp:post_date_gmt>2013-02-10 06:16:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>digestblake2%e4%bd%9c%e6%88%90%e3%81%a7%e5%ad%a6%e3%81%b6%e3%83%a2%e3%83%80%e3%83%b3perl-xs%e3%83%a2%e3%82%b8%e3%83%a5%e3%83%bc%e3%83%ab%e4%bd%9c%e6%88%90%e3%81%a8%e3%80%81%e6%8c%ab%e6%8a%98</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="perl"><![CDATA[Perl]]></category>
		<category domain="category" nicename="%e6%8a%80%e8%a1%93%e3%83%a1%e3%83%a2"><![CDATA[技術メモ]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>329</wp:comment_id>
			<wp:comment_author><![CDATA[add]]></wp:comment_author>
			<wp:comment_author_email>benerii@yahoo.co.jp</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2013-02-23 20:25:34</wp:comment_date>
			<wp:comment_date_gmt>2013-02-23 11:25:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[こんばんは。
アルクのSVLをPSSを使って学習する方法を模索していた所、こちらのサイトへ行きつき、参考にさせていただいたのですが、

http://blog.wktk.co.jp/archives/15

該当記事の「gakujiro2pssのダウンロード(Windows)」というリンクをクリックしても、ページに接続することができず、ファイルをダウンロードすることができません。

ここ三日ほど毎日ブラウザーも変えて試しているのですが、状況は変わらずでして・・・

お手数をおかけしますが、別の場所へアップロードしていただくことはできませんでしょうか。よろしければお願いいたします。]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1361618734.8139269351959228515625;s:7:"message";s:50:"Akismet はこのコメントを破棄しました";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:78:{s:15:"comment_post_ID";i:331;s:14:"comment_author";s:3:"add";s:20:"comment_author_email";s:19:"benerii@yahoo.co.jp";s:18:"comment_author_url";s:0:"";s:15:"comment_content";s:748:"こんばんは。
アルクのSVLをPSSを使って学習する方法を模索していた所、こちらのサイトへ行きつき、参考にさせていただいたのですが、

http://blog.wktk.co.jp/archives/15

該当記事の「gakujiro2pssのダウンロード(Windows)」というリンクをクリックしても、ページに接続することができず、ファイルをダウンロードすることができません。

ここ三日ほど毎日ブラウザーも変えて試しているのですが、状況は変わらずでして・・・

お手数をおかけしますが、別の場所へアップロードしていただくことはできませんでしょうか。よろしければお願いいたします。";s:12:"comment_type";s:0:"";s:14:"comment_parent";i:0;s:7:"user_ID";i:0;s:7:"user_ip";s:9:"127.0.0.1";s:10:"user_agent";s:64:"Opera/9.80 (Windows NT 6.1; WOW64) Presto/2.12.388 Version/12.12";s:8:"referrer";s:35:"http://blog.wktk.co.jp/archives/331";s:4:"blog";s:22:"http://blog.wktk.co.jp";s:9:"blog_lang";s:2:"ja";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:35:"http://blog.wktk.co.jp/archives/331";s:21:"akismet_comment_nonce";s:6:"passed";s:11:"POST_author";s:3:"add";s:10:"POST_email";s:19:"benerii@yahoo.co.jp";s:8:"POST_url";s:0:"";s:12:"POST_comment";s:748:"こんばんは。
アルクのSVLをPSSを使って学習する方法を模索していた所、こちらのサイトへ行きつき、参考にさせていただいたのですが、

http://blog.wktk.co.jp/archives/15

該当記事の「gakujiro2pssのダウンロード(Windows)」というリンクをクリックしても、ページに接続することができず、ファイルをダウンロードすることができません。

ここ三日ほど毎日ブラウザーも変えて試しているのですが、状況は変わらずでして・・・

お手数をおかけしますが、別の場所へアップロードしていただくことはできませんでしょうか。よろしければお願いいたします。";s:20:"POST_comment_post_ID";s:3:"331";s:19:"POST_comment_parent";s:1:"0";s:26:"POST_akismet_comment_nonce";s:10:"1d716a26d2";s:14:"POST_formInput";s:0:"";s:15:"SERVER_SOFTWARE";s:12:"nginx/1.3.11";s:11:"REQUEST_URI";s:21:"/wp-comments-post.php";s:8:"SUDO_GID";s:4:"1000";s:4:"USER";s:4:"root";s:4:"MAIL";s:14:"/var/mail/root";s:4:"HOME";s:5:"/root";s:8:"SUDO_UID";s:4:"1000";s:7:"LOGNAME";s:4:"root";s:8:"USERNAME";s:4:"root";s:4:"TERM";s:14:"xterm-256color";s:4:"PATH";s:29:"/sbin:/usr/sbin:/bin:/usr/bin";s:4:"LANG";s:11:"ja_JP.UTF-8";s:9:"LS_COLORS";s:1253:"rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:";s:12:"SUDO_COMMAND";s:32:"/etc/init.d/spawn-fcgi-php start";s:5:"SHELL";s:9:"/bin/bash";s:9:"SUDO_USER";s:6:"tasuku";s:3:"PWD";s:12:"/home/tasuku";s:17:"PHP_FCGI_CHILDREN";s:1:"3";s:9:"FCGI_ROLE";s:9:"RESPONDER";s:12:"QUERY_STRING";s:0:"";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:14:"CONTENT_LENGTH";s:4:"2269";s:11:"SCRIPT_NAME";s:21:"/wp-comments-post.php";s:12:"DOCUMENT_URI";s:21:"/wp-comments-post.php";s:13:"DOCUMENT_ROOT";s:22:"/home/tasuku/blog_wktk";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.0";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:11:"REMOTE_ADDR";s:9:"127.0.0.1";s:11:"REMOTE_PORT";s:5:"48826";s:11:"SERVER_ADDR";s:9:"127.0.0.1";s:11:"SERVER_PORT";s:2:"80";s:11:"SERVER_NAME";s:15:"blog.wktk.co.jp";s:15:"REDIRECT_STATUS";s:3:"200";s:15:"SCRIPT_FILENAME";s:43:"/home/tasuku/blog_wktk/wp-comments-post.php";s:9:"PATH_INFO";s:0:"";s:9:"HTTP_HOST";s:15:"blog.wktk.co.jp";s:14:"HTTP_X_REAL_IP";s:13:"58.138.63.126";s:21:"HTTP_X_FORWARDED_HOST";s:15:"blog.wktk.co.jp";s:23:"HTTP_X_FORWARDED_SERVER";s:15:"blog.wktk.co.jp";s:20:"HTTP_X_FORWARDED_FOR";s:13:"58.138.63.126";s:22:"HTTP_X_FORWARDED_PROTO";s:4:"http";s:15:"HTTP_CONNECTION";s:5:"close";s:19:"HTTP_CONTENT_LENGTH";s:4:"2269";s:15:"HTTP_USER_AGENT";s:64:"Opera/9.80 (Windows NT 6.1; WOW64) Presto/2.12.388 Version/12.12";s:11:"HTTP_ACCEPT";s:129:"text/html, application/xml;q=0.9, application/xhtml+xml, image/png, image/webp, image/jpeg, image/gif, image/x-xbitmap, */*;q=0.1";s:20:"HTTP_ACCEPT_LANGUAGE";s:23:"ja-JP,ja;q=0.9,en;q=0.8";s:20:"HTTP_ACCEPT_ENCODING";s:13:"gzip, deflate";s:12:"HTTP_REFERER";s:35:"http://blog.wktk.co.jp/archives/331";s:11:"HTTP_COOKIE";s:0:"";s:17:"HTTP_CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:8:"PHP_SELF";s:21:"/wp-comments-post.php";s:12:"REQUEST_TIME";s:10:"1361618733";s:25:"comment_post_modified_gmt";s:19:"2013-02-10 06:53:04";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
</channel>
</rss>
